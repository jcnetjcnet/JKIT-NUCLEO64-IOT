
v1.1_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009920  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b58  08009af0  08009af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a648  0800a648  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800a648  0800a648  0001a648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a650  0800a650  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a650  0800a650  0001a650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a658  0800a658  0001a658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800a65c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d04  20000134  0800a790  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003e38  0800a790  00023e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   000397ba  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063e9  00000000  00000000  0005991e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001ca4c  00000000  00000000  0005fd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc0  00000000  00000000  0007c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ee8  00000000  00000000  0007e518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028980  00000000  00000000  00080400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ae43  00000000  00000000  000a8d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da8e4  00000000  00000000  000d3bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ae4a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069f8  00000000  00000000  001ae4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000134 	.word	0x20000134
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009ad8 	.word	0x08009ad8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000138 	.word	0x20000138
 800020c:	08009ad8 	.word	0x08009ad8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <indexOfChar>:
	}
	return -1;
}

static int indexOfChar(char *src, char t,int start)
{
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	4605      	mov	r5, r0
 80005dc:	460e      	mov	r6, r1
 80005de:	4614      	mov	r4, r2
	int i;
	for( i = start ; i < strlen(src) ; i ++)
 80005e0:	4628      	mov	r0, r5
 80005e2:	f7ff fe1f 	bl	8000224 <strlen>
 80005e6:	42a0      	cmp	r0, r4
 80005e8:	d904      	bls.n	80005f4 <indexOfChar+0x1c>
	{
		if(src[i] == t) return i;
 80005ea:	5d2b      	ldrb	r3, [r5, r4]
 80005ec:	42b3      	cmp	r3, r6
 80005ee:	d004      	beq.n	80005fa <indexOfChar+0x22>
	for( i = start ; i < strlen(src) ; i ++)
 80005f0:	3401      	adds	r4, #1
 80005f2:	e7f5      	b.n	80005e0 <indexOfChar+0x8>
	}
	return -1;
 80005f4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80005f8:	bd70      	pop	{r4, r5, r6, pc}
		if(src[i] == t) return i;
 80005fa:	4620      	mov	r0, r4
 80005fc:	e7fc      	b.n	80005f8 <indexOfChar+0x20>
	...

08000600 <send_string_with_nl>:

void send_string_with_nl(char *s)
{
 8000600:	b500      	push	{lr}
 8000602:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 8000606:	4602      	mov	r2, r0
	char buf[1024];
	sprintf(buf,"%s\r\n",s);
 8000608:	4908      	ldr	r1, [pc, #32]	; (800062c <send_string_with_nl+0x2c>)
 800060a:	4668      	mov	r0, sp
 800060c:	f007 fe8a 	bl	8008324 <siprintf>
	HAL_UART_Transmit(&AT_UART_CH,(uint8_t *)buf,strlen(buf),1000);
 8000610:	4668      	mov	r0, sp
 8000612:	f7ff fe07 	bl	8000224 <strlen>
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	b282      	uxth	r2, r0
 800061c:	4669      	mov	r1, sp
 800061e:	4804      	ldr	r0, [pc, #16]	; (8000630 <send_string_with_nl+0x30>)
 8000620:	f005 f97f 	bl	8005922 <HAL_UART_Transmit>
}
 8000624:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 8000628:	f85d fb04 	ldr.w	pc, [sp], #4
 800062c:	08009b0c 	.word	0x08009b0c
 8000630:	20001134 	.word	0x20001134

08000634 <send_string>:
void send_string(char *s)
{
 8000634:	b510      	push	{r4, lr}
 8000636:	4604      	mov	r4, r0
	HAL_UART_Transmit(&AT_UART_CH,(uint8_t *)s,strlen(s),1000);
 8000638:	f7ff fdf4 	bl	8000224 <strlen>
 800063c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000640:	b282      	uxth	r2, r0
 8000642:	4621      	mov	r1, r4
 8000644:	4801      	ldr	r0, [pc, #4]	; (800064c <send_string+0x18>)
 8000646:	f005 f96c 	bl	8005922 <HAL_UART_Transmit>
}
 800064a:	bd10      	pop	{r4, pc}
 800064c:	20001134 	.word	0x20001134

08000650 <send_int_with_nl>:

void send_int_with_nl(int v)
{
 8000650:	b500      	push	{lr}
 8000652:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 8000656:	4602      	mov	r2, r0
	char buf[1024];
	sprintf(buf,"%d\r\n",v);
 8000658:	4908      	ldr	r1, [pc, #32]	; (800067c <send_int_with_nl+0x2c>)
 800065a:	4668      	mov	r0, sp
 800065c:	f007 fe62 	bl	8008324 <siprintf>
	HAL_UART_Transmit(&AT_UART_CH,(uint8_t *)buf,strlen(buf),1000);
 8000660:	4668      	mov	r0, sp
 8000662:	f7ff fddf 	bl	8000224 <strlen>
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	b282      	uxth	r2, r0
 800066c:	4669      	mov	r1, sp
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <send_int_with_nl+0x30>)
 8000670:	f005 f957 	bl	8005922 <HAL_UART_Transmit>
}
 8000674:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 8000678:	f85d fb04 	ldr.w	pc, [sp], #4
 800067c:	08009b14 	.word	0x08009b14
 8000680:	20001134 	.word	0x20001134

08000684 <send_int>:
void send_int(int v)
{
 8000684:	b500      	push	{lr}
 8000686:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 800068a:	4602      	mov	r2, r0
	char buf[1024];
	sprintf(buf,"%d",v);
 800068c:	4908      	ldr	r1, [pc, #32]	; (80006b0 <send_int+0x2c>)
 800068e:	4668      	mov	r0, sp
 8000690:	f007 fe48 	bl	8008324 <siprintf>
	HAL_UART_Transmit(&AT_UART_CH,(uint8_t *)buf,strlen(buf),1000);
 8000694:	4668      	mov	r0, sp
 8000696:	f7ff fdc5 	bl	8000224 <strlen>
 800069a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069e:	b282      	uxth	r2, r0
 80006a0:	4669      	mov	r1, sp
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <send_int+0x30>)
 80006a4:	f005 f93d 	bl	8005922 <HAL_UART_Transmit>
}
 80006a8:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 80006ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80006b0:	08009b1c 	.word	0x08009b1c
 80006b4:	20001134 	.word	0x20001134

080006b8 <AT_ch_write>:
	char ch;
	ch = delete_uart_Q(&AT_UART_RX_Q);
	return ch;
}
void AT_ch_write(char *p, int len)
{
 80006b8:	b508      	push	{r3, lr}
	HAL_UART_Transmit(&AT_UART_CH,(uint8_t *)p,len,1000);
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	b28a      	uxth	r2, r1
 80006c0:	4601      	mov	r1, r0
 80006c2:	4802      	ldr	r0, [pc, #8]	; (80006cc <AT_ch_write+0x14>)
 80006c4:	f005 f92d 	bl	8005922 <HAL_UART_Transmit>
}
 80006c8:	bd08      	pop	{r3, pc}
 80006ca:	bf00      	nop
 80006cc:	20001134 	.word	0x20001134

080006d0 <AT_ch_read>:
{
 80006d0:	b508      	push	{r3, lr}
	ch = delete_uart_Q(&AT_UART_RX_Q);
 80006d2:	4802      	ldr	r0, [pc, #8]	; (80006dc <AT_ch_read+0xc>)
 80006d4:	f002 f91e 	bl	8002914 <delete_uart_Q>
}
 80006d8:	b2c0      	uxtb	r0, r0
 80006da:	bd08      	pop	{r3, pc}
 80006dc:	20000020 	.word	0x20000020

080006e0 <AT_ch_available>:
extern int is_available(uart_rx_queue_t *Q);
int AT_ch_available()
{
 80006e0:	b508      	push	{r3, lr}
	return is_available(&AT_UART_RX_Q);
 80006e2:	4802      	ldr	r0, [pc, #8]	; (80006ec <AT_ch_available+0xc>)
 80006e4:	f002 f92b 	bl	800293e <is_available>
}
 80006e8:	bd08      	pop	{r3, pc}
 80006ea:	bf00      	nop
 80006ec:	20000020 	.word	0x20000020

080006f0 <delay>:
{
 80006f0:	b508      	push	{r3, lr}
	HAL_Delay(x);
 80006f2:	f003 f987 	bl	8003a04 <HAL_Delay>
}
 80006f6:	bd08      	pop	{r3, pc}

080006f8 <millis>:
{
 80006f8:	b508      	push	{r3, lr}
	return HAL_GetTick();
 80006fa:	f003 f97d 	bl	80039f8 <HAL_GetTick>
}
 80006fe:	bd08      	pop	{r3, pc}

08000700 <indexOfString>:
{
 8000700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000704:	4680      	mov	r8, r0
 8000706:	460f      	mov	r7, r1
	num = strlen(src) - strlen(target);
 8000708:	f7ff fd8c 	bl	8000224 <strlen>
 800070c:	4605      	mov	r5, r0
 800070e:	4638      	mov	r0, r7
 8000710:	f7ff fd88 	bl	8000224 <strlen>
 8000714:	4606      	mov	r6, r0
 8000716:	1a2d      	subs	r5, r5, r0
	for( i = 0 ; i <= num ; i ++)
 8000718:	2400      	movs	r4, #0
 800071a:	42ac      	cmp	r4, r5
 800071c:	dc08      	bgt.n	8000730 <indexOfString+0x30>
		if(!strncmp(src+i,target,strlen(target))) return i;
 800071e:	4632      	mov	r2, r6
 8000720:	4639      	mov	r1, r7
 8000722:	eb08 0004 	add.w	r0, r8, r4
 8000726:	f007 fea3 	bl	8008470 <strncmp>
 800072a:	b118      	cbz	r0, 8000734 <indexOfString+0x34>
	for( i = 0 ; i <= num ; i ++)
 800072c:	3401      	adds	r4, #1
 800072e:	e7f4      	b.n	800071a <indexOfString+0x1a>
	return -1;
 8000730:	f04f 34ff 	mov.w	r4, #4294967295
}
 8000734:	4620      	mov	r0, r4
 8000736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800073c <checkIPD>:
/* +IPD,<len>:<data> */



static uint32_t checkIPD(uint8_t *data)
{
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	4605      	mov	r5, r0
  int32_t len = -1;
  int8_t id   = -1;
//printf("checkIPD len=%d\n",strlen(data));
  { // Just for easier diffing
 //   index_PIPDcomma = data.indexOf("+IPD,");
    index_PIPDcomma = indexOfString(data,"+IPD,");
 8000740:	4922      	ldr	r1, [pc, #136]	; (80007cc <checkIPD+0x90>)
 8000742:	f7ff ffdd 	bl	8000700 <indexOfString>
    if (index_PIPDcomma != -1)
 8000746:	f1b0 3fff 	cmp.w	r0, #4294967295
 800074a:	d03a      	beq.n	80007c2 <checkIPD+0x86>
 800074c:	4604      	mov	r4, r0
    {
      index_colon = indexOfChar(data,':', index_PIPDcomma + 5);
 800074e:	1d47      	adds	r7, r0, #5
 8000750:	463a      	mov	r2, r7
 8000752:	213a      	movs	r1, #58	; 0x3a
 8000754:	4628      	mov	r0, r5
 8000756:	f7ff ff3f 	bl	80005d8 <indexOfChar>
 800075a:	4606      	mov	r6, r0

      if (index_colon != -1)
 800075c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000760:	d031      	beq.n	80007c6 <checkIPD+0x8a>
      {
        index_comma = indexOfChar(data,',', index_PIPDcomma + 5);
 8000762:	463a      	mov	r2, r7
 8000764:	212c      	movs	r1, #44	; 0x2c
 8000766:	4628      	mov	r0, r5
 8000768:	f7ff ff36 	bl	80005d8 <indexOfChar>
 800076c:	4607      	mov	r7, r0

        /* +IPD,id,len:data */
        if (index_comma != -1 && index_comma < index_colon)
 800076e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000772:	d001      	beq.n	8000778 <checkIPD+0x3c>
 8000774:	4286      	cmp	r6, r0
 8000776:	dc0b      	bgt.n	8000790 <checkIPD+0x54>
        {
          /* +IPD,len:data */
#if 0
          len = data.substring(index_PIPDcomma + 5, index_colon).toInt();
#else
          data[index_colon] = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	55ab      	strb	r3, [r5, r6]
          len = atoi(data + index_PIPDcomma + 5);
 800077c:	3405      	adds	r4, #5
 800077e:	1928      	adds	r0, r5, r4
 8000780:	f007 fa32 	bl	8007be8 <atoi>
          data[index_colon] = ':';
 8000784:	233a      	movs	r3, #58	; 0x3a
 8000786:	55ab      	strb	r3, [r5, r6]
#endif
          if (len <= 0)
 8000788:	2800      	cmp	r0, #0
 800078a:	dc1b      	bgt.n	80007c4 <checkIPD+0x88>
          {
            return 0;
 800078c:	2000      	movs	r0, #0
 800078e:	e019      	b.n	80007c4 <checkIPD+0x88>
          data[index_comma] = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	542b      	strb	r3, [r5, r0]
          id = atoi(data + index_PIPDcomma + 5);
 8000794:	1d60      	adds	r0, r4, #5
 8000796:	4428      	add	r0, r5
 8000798:	f007 fa26 	bl	8007be8 <atoi>
          data[index_comma] = ',';
 800079c:	232c      	movs	r3, #44	; 0x2c
 800079e:	55eb      	strb	r3, [r5, r7]
          if (id < 0 || id > 4)
 80007a0:	b2c0      	uxtb	r0, r0
 80007a2:	2804      	cmp	r0, #4
 80007a4:	d901      	bls.n	80007aa <checkIPD+0x6e>
            return 0;
 80007a6:	2000      	movs	r0, #0
 80007a8:	e00c      	b.n	80007c4 <checkIPD+0x88>
          data[index_colon] = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	55ab      	strb	r3, [r5, r6]
          len = atoi(data + index_comma + 1);
 80007ae:	1c78      	adds	r0, r7, #1
 80007b0:	4428      	add	r0, r5
 80007b2:	f007 fa19 	bl	8007be8 <atoi>
          data[index_colon] = ':';
 80007b6:	223a      	movs	r2, #58	; 0x3a
 80007b8:	55aa      	strb	r2, [r5, r6]
          if (len <= 0)
 80007ba:	2800      	cmp	r0, #0
 80007bc:	dc02      	bgt.n	80007c4 <checkIPD+0x88>
            return 0;
 80007be:	2000      	movs	r0, #0
 80007c0:	e000      	b.n	80007c4 <checkIPD+0x88>
        return len;
      }
    }
  }

  return 0;
 80007c2:	2000      	movs	r0, #0
}
 80007c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0;
 80007c6:	2000      	movs	r0, #0
 80007c8:	e7fc      	b.n	80007c4 <checkIPD+0x88>
 80007ca:	bf00      	nop
 80007cc:	08009b20 	.word	0x08009b20

080007d0 <ESP8266_ESP8266>:
	m_uart.println = send_string_with_nl;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <ESP8266_ESP8266+0x24>)
 80007d2:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <ESP8266_ESP8266+0x28>)
 80007d4:	601a      	str	r2, [r3, #0]
	m_uart.print   = send_string;
 80007d6:	4a09      	ldr	r2, [pc, #36]	; (80007fc <ESP8266_ESP8266+0x2c>)
 80007d8:	605a      	str	r2, [r3, #4]
	m_uart.println_int = send_int_with_nl;
 80007da:	4a09      	ldr	r2, [pc, #36]	; (8000800 <ESP8266_ESP8266+0x30>)
 80007dc:	609a      	str	r2, [r3, #8]
	m_uart.print_int   = send_int;
 80007de:	4a09      	ldr	r2, [pc, #36]	; (8000804 <ESP8266_ESP8266+0x34>)
 80007e0:	60da      	str	r2, [r3, #12]
	m_uart.read    = AT_ch_read;
 80007e2:	4a09      	ldr	r2, [pc, #36]	; (8000808 <ESP8266_ESP8266+0x38>)
 80007e4:	615a      	str	r2, [r3, #20]
	m_uart.write    = AT_ch_write;
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <ESP8266_ESP8266+0x3c>)
 80007e8:	619a      	str	r2, [r3, #24]
	m_uart.available = 	AT_ch_available;
 80007ea:	4a09      	ldr	r2, [pc, #36]	; (8000810 <ESP8266_ESP8266+0x40>)
 80007ec:	611a      	str	r2, [r3, #16]
	m_puart = &m_uart;
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <ESP8266_ESP8266+0x44>)
 80007f0:	6013      	str	r3, [r2, #0]
}
 80007f2:	4770      	bx	lr
 80007f4:	20001d78 	.word	0x20001d78
 80007f8:	08000601 	.word	0x08000601
 80007fc:	08000635 	.word	0x08000635
 8000800:	08000651 	.word	0x08000651
 8000804:	08000685 	.word	0x08000685
 8000808:	080006d1 	.word	0x080006d1
 800080c:	080006b9 	.word	0x080006b9
 8000810:	080006e1 	.word	0x080006e1
 8000814:	20001d94 	.word	0x20001d94

08000818 <rx_empty>:

////////////////////////////////////////

void rx_empty()
{
 8000818:	b510      	push	{r4, lr}
//  uint8_t data[1024];
  uint8_t ch;
  int idx = 0;
  char a;
  unsigned long start = millis();
 800081a:	f7ff ff6d 	bl	80006f8 <millis>
 800081e:	4604      	mov	r4, r0

  while (millis() - start < 10)
 8000820:	f7ff ff6a 	bl	80006f8 <millis>
 8000824:	1b00      	subs	r0, r0, r4
 8000826:	2809      	cmp	r0, #9
 8000828:	d80d      	bhi.n	8000846 <rx_empty+0x2e>
  {
    if (m_puart->available())
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <rx_empty+0x30>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	4798      	blx	r3
 8000832:	2800      	cmp	r0, #0
 8000834:	d0f4      	beq.n	8000820 <rx_empty+0x8>
    {
      a = m_puart->read();
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <rx_empty+0x30>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	4798      	blx	r3
//        data = "";
    	  idx = 0;
    	  memset(data,0,sizeof(data));
      }
#endif //by isjeon
      start = millis();
 800083e:	f7ff ff5b 	bl	80006f8 <millis>
 8000842:	4604      	mov	r4, r0
 8000844:	e7ec      	b.n	8000820 <rx_empty+0x8>
    }
  }
}
 8000846:	bd10      	pop	{r4, pc}
 8000848:	20001d94 	.word	0x20001d94

0800084c <recvString1_TO>:
  }

  return data;
}
char *recvString1_TO(uint8_t *target, uint32_t timeout)
{
 800084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084e:	4605      	mov	r5, r0
 8000850:	460f      	mov	r7, r1

  char a;
  unsigned long start = millis();
 8000852:	f7ff ff51 	bl	80006f8 <millis>
 8000856:	4606      	mov	r6, r0
  int idx = 0;
  int tick = -1;

#if 1
  memset(data,0,sizeof(data));
 8000858:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800085c:	2100      	movs	r1, #0
 800085e:	481b      	ldr	r0, [pc, #108]	; (80008cc <recvString1_TO+0x80>)
 8000860:	f007 fbf2 	bl	8008048 <memset>
  int idx = 0;
 8000864:	2400      	movs	r4, #0
  while (millis() - start < timeout)
 8000866:	f7ff ff47 	bl	80006f8 <millis>
 800086a:	1b80      	subs	r0, r0, r6
 800086c:	42b8      	cmp	r0, r7
 800086e:	d30c      	bcc.n	800088a <recvString1_TO+0x3e>
	 data[0] = 0;
  }
#endif

  return data;
}
 8000870:	4816      	ldr	r0, [pc, #88]	; (80008cc <recvString1_TO+0x80>)
 8000872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	  printf("Too long size = %d\n",idx);
 8000874:	4621      	mov	r1, r4
 8000876:	4816      	ldr	r0, [pc, #88]	; (80008d0 <recvString1_TO+0x84>)
 8000878:	f007 fc98 	bl	80081ac <iprintf>
 800087c:	e019      	b.n	80008b2 <recvString1_TO+0x66>
    	memset(data,0,sizeof(data));
 800087e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000882:	2100      	movs	r1, #0
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <recvString1_TO+0x80>)
 8000886:	f007 fbdf 	bl	8008048 <memset>
    while (m_puart->available() > 0)
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <recvString1_TO+0x88>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	4798      	blx	r3
 8000892:	2800      	cmp	r0, #0
 8000894:	dde7      	ble.n	8000866 <recvString1_TO+0x1a>
      a = m_puart->read();
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <recvString1_TO+0x88>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	4798      	blx	r3
      if (a == '\0')
 800089e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80008a2:	d0f2      	beq.n	800088a <recvString1_TO+0x3e>
      if(idx >= sizeof(data) - 1)
 80008a4:	f640 33fe 	movw	r3, #3070	; 0xbfe
 80008a8:	429c      	cmp	r4, r3
 80008aa:	d8e3      	bhi.n	8000874 <recvString1_TO+0x28>
          data[idx++] = a;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <recvString1_TO+0x80>)
 80008ae:	5518      	strb	r0, [r3, r4]
 80008b0:	3401      	adds	r4, #1
      if (strstr(data,target))
 80008b2:	4629      	mov	r1, r5
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <recvString1_TO+0x80>)
 80008b6:	f007 fe00 	bl	80084ba <strstr>
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d1d8      	bne.n	8000870 <recvString1_TO+0x24>
      else if (checkIPD(data))
 80008be:	4803      	ldr	r0, [pc, #12]	; (80008cc <recvString1_TO+0x80>)
 80008c0:	f7ff ff3c 	bl	800073c <checkIPD>
 80008c4:	2800      	cmp	r0, #0
 80008c6:	d0e0      	beq.n	800088a <recvString1_TO+0x3e>
 80008c8:	e7d9      	b.n	800087e <recvString1_TO+0x32>
 80008ca:	bf00      	nop
 80008cc:	20001178 	.word	0x20001178
 80008d0:	08009b28 	.word	0x08009b28
 80008d4:	20001d94 	.word	0x20001d94

080008d8 <recvString2_TO>:

////////////////////////////////////////

uint8_t * recvString2_TO(uint8_t * target1, uint8_t * target2, uint32_t timeout)
{
 80008d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008dc:	4605      	mov	r5, r0
 80008de:	460e      	mov	r6, r1
 80008e0:	4690      	mov	r8, r2
  char a;
  unsigned long start = millis();
 80008e2:	f7ff ff09 	bl	80006f8 <millis>
 80008e6:	4607      	mov	r7, r0
  int idx = 0;
  memset(data,0,sizeof(data));
 80008e8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80008ec:	2100      	movs	r1, #0
 80008ee:	481b      	ldr	r0, [pc, #108]	; (800095c <recvString2_TO+0x84>)
 80008f0:	f007 fbaa 	bl	8008048 <memset>
  int idx = 0;
 80008f4:	2400      	movs	r4, #0

  while (millis() - start < timeout)
 80008f6:	f7ff feff 	bl	80006f8 <millis>
 80008fa:	1bc0      	subs	r0, r0, r7
 80008fc:	4540      	cmp	r0, r8
 80008fe:	d309      	bcc.n	8000914 <recvString2_TO+0x3c>
      }
    }
  }

  return data;
}
 8000900:	4816      	ldr	r0, [pc, #88]	; (800095c <recvString2_TO+0x84>)
 8000902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memset(data,0,sizeof(data));
 8000906:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800090a:	2100      	movs	r1, #0
 800090c:	4813      	ldr	r0, [pc, #76]	; (800095c <recvString2_TO+0x84>)
 800090e:	f007 fb9b 	bl	8008048 <memset>
        idx = 0;
 8000912:	2400      	movs	r4, #0
    while (m_puart->available() > 0)
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <recvString2_TO+0x88>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	4798      	blx	r3
 800091c:	2800      	cmp	r0, #0
 800091e:	ddea      	ble.n	80008f6 <recvString2_TO+0x1e>
      a = m_puart->read();
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <recvString2_TO+0x88>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4798      	blx	r3
      if (a == '\0')
 8000928:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 800092c:	d0f2      	beq.n	8000914 <recvString2_TO+0x3c>
      data[idx++] = a;
 800092e:	f104 0901 	add.w	r9, r4, #1
 8000932:	480a      	ldr	r0, [pc, #40]	; (800095c <recvString2_TO+0x84>)
 8000934:	5503      	strb	r3, [r0, r4]
      if (strstr(data,target1))
 8000936:	4629      	mov	r1, r5
 8000938:	f007 fdbf 	bl	80084ba <strstr>
 800093c:	2800      	cmp	r0, #0
 800093e:	d1df      	bne.n	8000900 <recvString2_TO+0x28>
      else if (strstr(data,target2))
 8000940:	4631      	mov	r1, r6
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <recvString2_TO+0x84>)
 8000944:	f007 fdb9 	bl	80084ba <strstr>
 8000948:	2800      	cmp	r0, #0
 800094a:	d1d9      	bne.n	8000900 <recvString2_TO+0x28>
      else if (checkIPD(data))
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <recvString2_TO+0x84>)
 800094e:	f7ff fef5 	bl	800073c <checkIPD>
 8000952:	2800      	cmp	r0, #0
 8000954:	d1d7      	bne.n	8000906 <recvString2_TO+0x2e>
      data[idx++] = a;
 8000956:	464c      	mov	r4, r9
 8000958:	e7dc      	b.n	8000914 <recvString2_TO+0x3c>
 800095a:	bf00      	nop
 800095c:	20001178 	.word	0x20001178
 8000960:	20001d94 	.word	0x20001d94

08000964 <recvFind>:
}

////////////////////////////////////////

bool recvFind(uint8_t * target, uint32_t timeout)
{
 8000964:	b510      	push	{r4, lr}
 8000966:	4604      	mov	r4, r0
  char *data_tmp;

  data_tmp = recvString1_TO(target, timeout);
 8000968:	f7ff ff70 	bl	800084c <recvString1_TO>

  if (indexOfString(data_tmp,target) != -1)
 800096c:	4621      	mov	r1, r4
 800096e:	f7ff fec7 	bl	8000700 <indexOfString>
 8000972:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000976:	d101      	bne.n	800097c <recvFind+0x18>
  {
    return true;
  }

  return false;
 8000978:	2000      	movs	r0, #0
}
 800097a:	bd10      	pop	{r4, pc}
    return true;
 800097c:	2001      	movs	r0, #1
 800097e:	e7fc      	b.n	800097a <recvFind+0x16>

08000980 <recvFindAndFilter>:

////////////////////////////////////////

bool recvFindAndFilter(uint8_t * target, uint8_t * begin, uint8_t * end, uint8_t *data, uint32_t timeout)
{
 8000980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000984:	4606      	mov	r6, r0
 8000986:	460f      	mov	r7, r1
 8000988:	4691      	mov	r9, r2
 800098a:	461c      	mov	r4, r3
  uint8_t * data_tmp;

  data_tmp = recvString1_TO(target, timeout);
 800098c:	9908      	ldr	r1, [sp, #32]
 800098e:	f7ff ff5d 	bl	800084c <recvString1_TO>
 8000992:	4605      	mov	r5, r0
   printf("Len = %d\n",strlen(data_tmp));
   _write(0, data_tmp, strlen(data_tmp));
   printf("[***]\n");
//   while(1);
  }
  if (indexOfString(data_tmp,target) != -1)
 8000994:	4631      	mov	r1, r6
 8000996:	f7ff feb3 	bl	8000700 <indexOfString>
 800099a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800099e:	d022      	beq.n	80009e6 <recvFindAndFilter+0x66>
  {
    int32_t index1 = indexOfString(data_tmp,begin);
 80009a0:	4639      	mov	r1, r7
 80009a2:	4628      	mov	r0, r5
 80009a4:	f7ff feac 	bl	8000700 <indexOfString>
 80009a8:	4680      	mov	r8, r0
    int32_t index2 = indexOfString(data_tmp,end);
 80009aa:	4649      	mov	r1, r9
 80009ac:	4628      	mov	r0, r5
 80009ae:	f7ff fea7 	bl	8000700 <indexOfString>
 80009b2:	4606      	mov	r6, r0

    if (index1 != -1 && index2 != -1)
 80009b4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80009b8:	d002      	beq.n	80009c0 <recvFindAndFilter+0x40>
 80009ba:	f1b0 3fff 	cmp.w	r0, #4294967295
 80009be:	d119      	bne.n	80009f4 <recvFindAndFilter+0x74>
      strncpy(data,data_tmp + index1, index2 - index1);
      data[index2 - index1] = 0;
#endif
      return true;
    }
    else if (index2 != -1)
 80009c0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80009c4:	d125      	bne.n	8000a12 <recvFindAndFilter+0x92>
    }

#if 0
    index1 = data.indexOf("\r\n\r\nOK");
#else
    index1 = indexOfString(data,"\r\n\r\nOK");
 80009c6:	491f      	ldr	r1, [pc, #124]	; (8000a44 <recvFindAndFilter+0xc4>)
 80009c8:	4620      	mov	r0, r4
 80009ca:	f7ff fe99 	bl	8000700 <indexOfString>
 80009ce:	4606      	mov	r6, r0
#endif
    if (index1 != -1)
 80009d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80009d4:	d126      	bne.n	8000a24 <recvFindAndFilter+0xa4>
      strncpy(data, data_tmp + 0, index1);
      data[index1] = 0;
#endif
    }

    index1 = indexOfString(data, "\r\nOK");
 80009d6:	491c      	ldr	r1, [pc, #112]	; (8000a48 <recvFindAndFilter+0xc8>)
 80009d8:	4620      	mov	r0, r4
 80009da:	f7ff fe91 	bl	8000700 <indexOfString>
 80009de:	4606      	mov	r6, r0

    if (index1 != -1)
 80009e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80009e4:	d126      	bne.n	8000a34 <recvFindAndFilter+0xb4>
  }

#if 0
  data = data_tmp;
#else
  strcpy(data,data_tmp); // 이상함?  위 OK 관련 파싱하는 부분이 의미가 없는 코드??
 80009e6:	4629      	mov	r1, r5
 80009e8:	4620      	mov	r0, r4
 80009ea:	f007 fd39 	bl	8008460 <strcpy>
#endif
  return false;
 80009ee:	2000      	movs	r0, #0
}
 80009f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      index1 += strlen(begin); // begin.length();
 80009f4:	4638      	mov	r0, r7
 80009f6:	f7ff fc15 	bl	8000224 <strlen>
 80009fa:	eb08 0100 	add.w	r1, r8, r0
      strncpy(data,data_tmp + index1, index2 - index1);
 80009fe:	1a76      	subs	r6, r6, r1
 8000a00:	4632      	mov	r2, r6
 8000a02:	4429      	add	r1, r5
 8000a04:	4620      	mov	r0, r4
 8000a06:	f007 fd45 	bl	8008494 <strncpy>
      data[index2 - index1] = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	55a3      	strb	r3, [r4, r6]
      return true;
 8000a0e:	2001      	movs	r0, #1
 8000a10:	e7ee      	b.n	80009f0 <recvFindAndFilter+0x70>
      strncpy(data, data_tmp + 0, index2 - 0);
 8000a12:	4632      	mov	r2, r6
 8000a14:	4629      	mov	r1, r5
 8000a16:	4620      	mov	r0, r4
 8000a18:	f007 fd3c 	bl	8008494 <strncpy>
      data[index2 - 0] = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	55a3      	strb	r3, [r4, r6]
      return true;
 8000a20:	2001      	movs	r0, #1
 8000a22:	e7e5      	b.n	80009f0 <recvFindAndFilter+0x70>
      strncpy(data, data_tmp + 0, index1);
 8000a24:	4602      	mov	r2, r0
 8000a26:	4629      	mov	r1, r5
 8000a28:	4620      	mov	r0, r4
 8000a2a:	f007 fd33 	bl	8008494 <strncpy>
      data[index1] = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	55a3      	strb	r3, [r4, r6]
 8000a32:	e7d0      	b.n	80009d6 <recvFindAndFilter+0x56>
      strncpy(data, data_tmp + 0, index1);
 8000a34:	4602      	mov	r2, r0
 8000a36:	4629      	mov	r1, r5
 8000a38:	4620      	mov	r0, r4
 8000a3a:	f007 fd2b 	bl	8008494 <strncpy>
      data[index1] = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	55a3      	strb	r3, [r4, r6]
 8000a42:	e7d0      	b.n	80009e6 <recvFindAndFilter+0x66>
 8000a44:	08009b3c 	.word	0x08009b3c
 8000a48:	08009b44 	.word	0x08009b44

08000a4c <eATGMR>:
}

////////////////////////////////////////

bool eATGMR(char *version)
{
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	4604      	mov	r4, r0
  rx_empty();
 8000a52:	f7ff fee1 	bl	8000818 <rx_empty>
  delay(3000);
 8000a56:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a5a:	f7ff fe49 	bl	80006f0 <delay>
  m_puart->println(F("AT+GMR"));
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <eATGMR+0x34>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <eATGMR+0x38>)
 8000a66:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+GMR"));

  return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", version, 10000);
 8000a68:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	4623      	mov	r3, r4
 8000a70:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <eATGMR+0x3c>)
 8000a72:	4906      	ldr	r1, [pc, #24]	; (8000a8c <eATGMR+0x40>)
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <eATGMR+0x44>)
 8000a76:	f7ff ff83 	bl	8000980 <recvFindAndFilter>
}
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd10      	pop	{r4, pc}
 8000a7e:	bf00      	nop
 8000a80:	20001d94 	.word	0x20001d94
 8000a84:	08009b50 	.word	0x08009b50
 8000a88:	08009b3c 	.word	0x08009b3c
 8000a8c:	08009b58 	.word	0x08009b58
 8000a90:	08009b40 	.word	0x08009b40

08000a94 <ESP32_C_getVersion>:
{
 8000a94:	b510      	push	{r4, lr}
  eATGMR(ESP32_version);
 8000a96:	4c03      	ldr	r4, [pc, #12]	; (8000aa4 <ESP32_C_getVersion+0x10>)
 8000a98:	4620      	mov	r0, r4
 8000a9a:	f7ff ffd7 	bl	8000a4c <eATGMR>
}
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	bd10      	pop	{r4, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000d50 	.word	0x20000d50

08000aa8 <qATCWMODE>:
////////////////////////////////////////

// Get the Wi-Fi Mode (Station/SoftAP/Station+SoftAP)
// ESP32-AT not support _CUR and _DEF here
bool qATCWMODE(uint8_t *mode, uint8_t pattern)
{
 8000aa8:	b530      	push	{r4, r5, lr}
 8000aaa:	b0a3      	sub	sp, #140	; 0x8c
  uint8_t str_mode[128];
  bool ret;

  if (!mode || !pattern)
 8000aac:	b1e8      	cbz	r0, 8000aea <qATCWMODE+0x42>
 8000aae:	4605      	mov	r5, r0
 8000ab0:	b919      	cbnz	r1, 8000aba <qATCWMODE+0x12>
  {
    return false;
 8000ab2:	2400      	movs	r4, #0
  }
  else
  {
    return false;
  }
}
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	b023      	add	sp, #140	; 0x8c
 8000ab8:	bd30      	pop	{r4, r5, pc}
  rx_empty();
 8000aba:	f7ff fead 	bl	8000818 <rx_empty>
      m_puart->println(F("AT+CWMODE?"));
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <qATCWMODE+0x48>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <qATCWMODE+0x4c>)
 8000ac6:	4798      	blx	r3
  ret = recvFindAndFilter("OK", ":", "\r\n\r\nOK", str_mode, 1000);
 8000ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	ab02      	add	r3, sp, #8
 8000ad0:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <qATCWMODE+0x50>)
 8000ad2:	490a      	ldr	r1, [pc, #40]	; (8000afc <qATCWMODE+0x54>)
 8000ad4:	480a      	ldr	r0, [pc, #40]	; (8000b00 <qATCWMODE+0x58>)
 8000ad6:	f7ff ff53 	bl	8000980 <recvFindAndFilter>
  if (ret)
 8000ada:	4604      	mov	r4, r0
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d0e9      	beq.n	8000ab4 <qATCWMODE+0xc>
	*mode = atoi(str_mode);
 8000ae0:	a802      	add	r0, sp, #8
 8000ae2:	f007 f881 	bl	8007be8 <atoi>
 8000ae6:	7028      	strb	r0, [r5, #0]
    return true;
 8000ae8:	e7e4      	b.n	8000ab4 <qATCWMODE+0xc>
    return false;
 8000aea:	2400      	movs	r4, #0
 8000aec:	e7e2      	b.n	8000ab4 <qATCWMODE+0xc>
 8000aee:	bf00      	nop
 8000af0:	20001d94 	.word	0x20001d94
 8000af4:	08009b7c 	.word	0x08009b7c
 8000af8:	08009b3c 	.word	0x08009b3c
 8000afc:	08009b88 	.word	0x08009b88
 8000b00:	08009b40 	.word	0x08009b40

08000b04 <sATCWMODE>:

// Set the Wi-Fi Mode (Station/SoftAP/Station+SoftAP)
// ESP32-AT not support _CUR and _DEF here
bool sATCWMODE(uint8_t mode, uint8_t pattern)
{
  if (!pattern)
 8000b04:	b909      	cbnz	r1, 8000b0a <sATCWMODE+0x6>
  {
    return false;
 8000b06:	2000      	movs	r0, #0
  {
	  return true;
  }
#endif
  return false;
}
 8000b08:	4770      	bx	lr
{
 8000b0a:	b538      	push	{r3, r4, r5, lr}
 8000b0c:	4604      	mov	r4, r0
  rx_empty();
 8000b0e:	f7ff fe83 	bl	8000818 <rx_empty>
      m_puart->print(F("AT+CWMODE="));
 8000b12:	4d10      	ldr	r5, [pc, #64]	; (8000b54 <sATCWMODE+0x50>)
 8000b14:	682b      	ldr	r3, [r5, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	480f      	ldr	r0, [pc, #60]	; (8000b58 <sATCWMODE+0x54>)
 8000b1a:	4798      	blx	r3
  m_puart->println_int(mode);
 8000b1c:	682b      	ldr	r3, [r5, #0]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4620      	mov	r0, r4
 8000b22:	4798      	blx	r3
  data = recvString2_TO("OK", "no change", 1000);
 8000b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b28:	490c      	ldr	r1, [pc, #48]	; (8000b5c <sATCWMODE+0x58>)
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <sATCWMODE+0x5c>)
 8000b2c:	f7ff fed4 	bl	80008d8 <recvString2_TO>
  if(data && (strstr(data,"OK") || strstr(data, "no change")))
 8000b30:	4604      	mov	r4, r0
 8000b32:	b168      	cbz	r0, 8000b50 <sATCWMODE+0x4c>
 8000b34:	490a      	ldr	r1, [pc, #40]	; (8000b60 <sATCWMODE+0x5c>)
 8000b36:	f007 fcc0 	bl	80084ba <strstr>
 8000b3a:	b108      	cbz	r0, 8000b40 <sATCWMODE+0x3c>
	  return true;
 8000b3c:	2001      	movs	r0, #1
}
 8000b3e:	bd38      	pop	{r3, r4, r5, pc}
  if(data && (strstr(data,"OK") || strstr(data, "no change")))
 8000b40:	4906      	ldr	r1, [pc, #24]	; (8000b5c <sATCWMODE+0x58>)
 8000b42:	4620      	mov	r0, r4
 8000b44:	f007 fcb9 	bl	80084ba <strstr>
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d0f8      	beq.n	8000b3e <sATCWMODE+0x3a>
	  return true;
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	e7f6      	b.n	8000b3e <sATCWMODE+0x3a>
  return false;
 8000b50:	2000      	movs	r0, #0
 8000b52:	e7f4      	b.n	8000b3e <sATCWMODE+0x3a>
 8000b54:	20001d94 	.word	0x20001d94
 8000b58:	08009b8c 	.word	0x08009b8c
 8000b5c:	08009b98 	.word	0x08009b98
 8000b60:	08009b40 	.word	0x08009b40

08000b64 <ESP8266_setOprToStationSoftAP>:
{
 8000b64:	b510      	push	{r4, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	460c      	mov	r4, r1
  if (!qATCWMODE(&mode, pattern1))
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	f10d 0007 	add.w	r0, sp, #7
 8000b70:	f7ff ff9a 	bl	8000aa8 <qATCWMODE>
 8000b74:	b138      	cbz	r0, 8000b86 <ESP8266_setOprToStationSoftAP+0x22>
  if (mode == 3)
 8000b76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d003      	beq.n	8000b86 <ESP8266_setOprToStationSoftAP+0x22>
    if (sATCWMODE(3, pattern2) )
 8000b7e:	4621      	mov	r1, r4
 8000b80:	2003      	movs	r0, #3
 8000b82:	f7ff ffbf 	bl	8000b04 <sATCWMODE>
}
 8000b86:	b002      	add	sp, #8
 8000b88:	bd10      	pop	{r4, pc}
	...

08000b8c <sATCWJAP>:
// ESP32-AT not support _CUR and _DEF here
bool sATCWJAP(uint8_t *ssid, uint8_t *pwd, uint8_t pattern)
{
  uint8_t data[256];

  if (!pattern)
 8000b8c:	b90a      	cbnz	r2, 8000b92 <sATCWJAP+0x6>
  {
    return false;
 8000b8e:	2000      	movs	r0, #0
  {
    return true;
  }

  return false;
}
 8000b90:	4770      	bx	lr
{
 8000b92:	b570      	push	{r4, r5, r6, lr}
 8000b94:	b0c0      	sub	sp, #256	; 0x100
 8000b96:	4605      	mov	r5, r0
 8000b98:	460c      	mov	r4, r1
  rx_empty();
 8000b9a:	f7ff fe3d 	bl	8000818 <rx_empty>
      m_puart->print(F("AT+CWJAP=\""));
 8000b9e:	4e14      	ldr	r6, [pc, #80]	; (8000bf0 <sATCWJAP+0x64>)
 8000ba0:	6833      	ldr	r3, [r6, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <sATCWJAP+0x68>)
 8000ba6:	4798      	blx	r3
  m_puart->print(ssid);
 8000ba8:	6833      	ldr	r3, [r6, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	4628      	mov	r0, r5
 8000bae:	4798      	blx	r3
  m_puart->print(F("\",\""));
 8000bb0:	6833      	ldr	r3, [r6, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <sATCWJAP+0x6c>)
 8000bb6:	4798      	blx	r3
  m_puart->print(pwd);
 8000bb8:	6833      	ldr	r3, [r6, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	4798      	blx	r3
  m_puart->println(F("\""));
 8000bc0:	6833      	ldr	r3, [r6, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <sATCWJAP+0x70>)
 8000bc6:	4798      	blx	r3
  strcpy(data,recvString2_TO("OK", "ERROR", 10000));
 8000bc8:	4c0d      	ldr	r4, [pc, #52]	; (8000c00 <sATCWJAP+0x74>)
 8000bca:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bce:	490d      	ldr	r1, [pc, #52]	; (8000c04 <sATCWJAP+0x78>)
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f7ff fe81 	bl	80008d8 <recvString2_TO>
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	4668      	mov	r0, sp
 8000bda:	f007 fc41 	bl	8008460 <strcpy>
  if(strstr(data,"OK"))
 8000bde:	4621      	mov	r1, r4
 8000be0:	4668      	mov	r0, sp
 8000be2:	f007 fc6a 	bl	80084ba <strstr>
 8000be6:	b100      	cbz	r0, 8000bea <sATCWJAP+0x5e>
    return true;
 8000be8:	2001      	movs	r0, #1
}
 8000bea:	b040      	add	sp, #256	; 0x100
 8000bec:	bd70      	pop	{r4, r5, r6, pc}
 8000bee:	bf00      	nop
 8000bf0:	20001d94 	.word	0x20001d94
 8000bf4:	08009ba4 	.word	0x08009ba4
 8000bf8:	08009bb0 	.word	0x08009bb0
 8000bfc:	08009bb4 	.word	0x08009bb4
 8000c00:	08009b40 	.word	0x08009b40
 8000c04:	08009bb8 	.word	0x08009bb8

08000c08 <ESP8266_joinAP>:
{
 8000c08:	b508      	push	{r3, lr}
  return sATCWJAP(ssid, pwd, pattern);
 8000c0a:	f7ff ffbf 	bl	8000b8c <sATCWJAP>
}
 8000c0e:	bd08      	pop	{r3, pc}

08000c10 <eATCWLAP>:

////////////////////////////////////////

// Lists the Available APs
bool eATCWLAP(uint8_t *list)
{
 8000c10:	b510      	push	{r4, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	4604      	mov	r4, r0
//  uint8_t data[256];
  rx_empty();
 8000c16:	f7ff fdff 	bl	8000818 <rx_empty>
  m_puart->println(F("AT+CWLAP"));
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <eATCWLAP+0x2c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <eATCWLAP+0x30>)
 8000c22:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CWLAP"));

  return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", list, 15 * 1000);
 8000c24:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	4623      	mov	r3, r4
 8000c2c:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <eATCWLAP+0x34>)
 8000c2e:	4906      	ldr	r1, [pc, #24]	; (8000c48 <eATCWLAP+0x38>)
 8000c30:	4806      	ldr	r0, [pc, #24]	; (8000c4c <eATCWLAP+0x3c>)
 8000c32:	f7ff fea5 	bl	8000980 <recvFindAndFilter>
}
 8000c36:	b002      	add	sp, #8
 8000c38:	bd10      	pop	{r4, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20001d94 	.word	0x20001d94
 8000c40:	08009bc0 	.word	0x08009bc0
 8000c44:	08009b3c 	.word	0x08009b3c
 8000c48:	08009b58 	.word	0x08009b58
 8000c4c:	08009b40 	.word	0x08009b40

08000c50 <ESP32_C_getAPList>:
{
 8000c50:	b510      	push	{r4, lr}
  eATCWLAP(ESP32_ap_list);
 8000c52:	4c03      	ldr	r4, [pc, #12]	; (8000c60 <ESP32_C_getAPList+0x10>)
 8000c54:	4620      	mov	r0, r4
 8000c56:	f7ff ffdb 	bl	8000c10 <eATCWLAP>
}
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	bd10      	pop	{r4, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000150 	.word	0x20000150

08000c64 <eATCIPSTATUS>:

////////////////////////////////////////

// Gets the Connection Status
bool eATCIPSTATUS(uint8_t *list)
{
 8000c64:	b510      	push	{r4, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	4604      	mov	r4, r0
//  String data;

  delay(100);
 8000c6a:	2064      	movs	r0, #100	; 0x64
 8000c6c:	f7ff fd40 	bl	80006f0 <delay>
  rx_empty();
 8000c70:	f7ff fdd2 	bl	8000818 <rx_empty>
  m_puart->println(F("AT+CIPSTATUS"));
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <eATCIPSTATUS+0x30>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <eATCIPSTATUS+0x34>)
 8000c7c:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIPSTATUS"));

  return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", list, 1000);
 8000c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4623      	mov	r3, r4
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <eATCIPSTATUS+0x38>)
 8000c88:	4905      	ldr	r1, [pc, #20]	; (8000ca0 <eATCIPSTATUS+0x3c>)
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <eATCIPSTATUS+0x40>)
 8000c8c:	f7ff fe78 	bl	8000980 <recvFindAndFilter>
}
 8000c90:	b002      	add	sp, #8
 8000c92:	bd10      	pop	{r4, pc}
 8000c94:	20001d94 	.word	0x20001d94
 8000c98:	08009bdc 	.word	0x08009bdc
 8000c9c:	08009b3c 	.word	0x08009b3c
 8000ca0:	08009b58 	.word	0x08009b58
 8000ca4:	08009b40 	.word	0x08009b40

08000ca8 <ESP8266_getIPStatus>:
{
 8000ca8:	b510      	push	{r4, lr}
  eATCIPSTATUS(ESP32_ap_list);
 8000caa:	4c03      	ldr	r4, [pc, #12]	; (8000cb8 <ESP8266_getIPStatus+0x10>)
 8000cac:	4620      	mov	r0, r4
 8000cae:	f7ff ffd9 	bl	8000c64 <eATCIPSTATUS>
}
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	bd10      	pop	{r4, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000150 	.word	0x20000150

08000cbc <sATCIPSTARTMultiple>:
// Multiple Connections (AT+CIPMUX=1)
// For ESP8266 SSL
// SSL connection needs a large amount of memory; otherwise, it may cause system reboot. Use
// AT+CIPSSLSIZE=<size> to enlarge the SSL buffer size.
bool sATCIPSTARTMultiple(uint8_t mux_id, uint8_t * type, uint8_t * addr, uint32_t port)
{
 8000cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cc0:	4680      	mov	r8, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	4616      	mov	r6, r2
 8000cc6:	461d      	mov	r5, r3
  uint8_t * data;

  rx_empty();
 8000cc8:	f7ff fda6 	bl	8000818 <rx_empty>
  m_puart->print(F("AT+CIPSTART="));
 8000ccc:	4c17      	ldr	r4, [pc, #92]	; (8000d2c <sATCIPSTARTMultiple+0x70>)
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	4817      	ldr	r0, [pc, #92]	; (8000d30 <sATCIPSTARTMultiple+0x74>)
 8000cd4:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIPSTART="));

  m_puart->print_int(mux_id);
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	4640      	mov	r0, r8
 8000cdc:	4798      	blx	r3
  m_puart->print(F(",\""));
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	4814      	ldr	r0, [pc, #80]	; (8000d34 <sATCIPSTARTMultiple+0x78>)
 8000ce4:	4798      	blx	r3
  m_puart->print(type);
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	4638      	mov	r0, r7
 8000cec:	4798      	blx	r3
  m_puart->print(F("\",\""));
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <sATCIPSTARTMultiple+0x7c>)
 8000cf4:	4798      	blx	r3
  m_puart->print(addr);
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	4798      	blx	r3
  m_puart->print(F("\","));
 8000cfe:	6823      	ldr	r3, [r4, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	480e      	ldr	r0, [pc, #56]	; (8000d3c <sATCIPSTARTMultiple+0x80>)
 8000d04:	4798      	blx	r3
  m_puart->println_int(port);
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	4798      	blx	r3

#if USE_ESP32_AT
  data = recvString1_TO("OK", 10000);
 8000d0e:	4c0c      	ldr	r4, [pc, #48]	; (8000d40 <sATCIPSTARTMultiple+0x84>)
 8000d10:	f242 7110 	movw	r1, #10000	; 0x2710
 8000d14:	4620      	mov	r0, r4
 8000d16:	f7ff fd99 	bl	800084c <recvString1_TO>
  if( indexOfString(data, "OK"))
 8000d1a:	4621      	mov	r1, r4
 8000d1c:	f7ff fcf0 	bl	8000700 <indexOfString>
 8000d20:	b908      	cbnz	r0, 8000d26 <sATCIPSTARTMultiple+0x6a>
    return true;
  }
#endif

  return false;
}
 8000d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
 8000d26:	2001      	movs	r0, #1
 8000d28:	e7fb      	b.n	8000d22 <sATCIPSTARTMultiple+0x66>
 8000d2a:	bf00      	nop
 8000d2c:	20001d94 	.word	0x20001d94
 8000d30:	08009bf4 	.word	0x08009bf4
 8000d34:	08009c04 	.word	0x08009c04
 8000d38:	08009bb0 	.word	0x08009bb0
 8000d3c:	08009bd8 	.word	0x08009bd8
 8000d40:	08009b40 	.word	0x08009b40

08000d44 <ESP8266_createTCP_mux>:
{
 8000d44:	b508      	push	{r3, lr}
 8000d46:	4613      	mov	r3, r2
  return sATCIPSTARTMultiple(mux_id, "TCP", addr, port);
 8000d48:	460a      	mov	r2, r1
 8000d4a:	4902      	ldr	r1, [pc, #8]	; (8000d54 <ESP8266_createTCP_mux+0x10>)
 8000d4c:	f7ff ffb6 	bl	8000cbc <sATCIPSTARTMultiple>
}
 8000d50:	bd08      	pop	{r3, pc}
 8000d52:	bf00      	nop
 8000d54:	08009bec 	.word	0x08009bec

08000d58 <ESP8266_registerUDP_mux>:
{
 8000d58:	b508      	push	{r3, lr}
 8000d5a:	4613      	mov	r3, r2
  return sATCIPSTARTMultiple(mux_id, "UDP", addr, port);
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	4902      	ldr	r1, [pc, #8]	; (8000d68 <ESP8266_registerUDP_mux+0x10>)
 8000d60:	f7ff ffac 	bl	8000cbc <sATCIPSTARTMultiple>
}
 8000d64:	bd08      	pop	{r3, pc}
 8000d66:	bf00      	nop
 8000d68:	08009bf0 	.word	0x08009bf0

08000d6c <sATCIPSENDMultiple>:
////////////////////////////////////////

// Sends Data of designated length.
// Multiple connections: (+CIPMUX=1)  => AT+CIPSEND=<link ID>,<length>
bool sATCIPSENDMultiple(uint8_t mux_id, const uint8_t *buffer, uint32_t len)
{
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	4615      	mov	r5, r2
  rx_empty();
 8000d74:	f7ff fd50 	bl	8000818 <rx_empty>
  m_puart->print(F("AT+CIPSEND="));
 8000d78:	4c12      	ldr	r4, [pc, #72]	; (8000dc4 <sATCIPSENDMultiple+0x58>)
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <sATCIPSENDMultiple+0x5c>)
 8000d80:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIPSEND="));

  m_puart->print_int(mux_id);
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	4630      	mov	r0, r6
 8000d88:	4798      	blx	r3
  m_puart->print(F(","));
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	480f      	ldr	r0, [pc, #60]	; (8000dcc <sATCIPSENDMultiple+0x60>)
 8000d90:	4798      	blx	r3
  m_puart->println_int(len);
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	4628      	mov	r0, r5
 8000d98:	4798      	blx	r3

  if (recvFind(">", 5000))
 8000d9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <sATCIPSENDMultiple+0x64>)
 8000da0:	f7ff fde0 	bl	8000964 <recvFind>
 8000da4:	b900      	cbnz	r0, 8000da8 <sATCIPSENDMultiple+0x3c>
#endif
    return recvFind("SEND OK", 10000);
  }

  return false;
}
 8000da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_empty();
 8000da8:	f7ff fd36 	bl	8000818 <rx_empty>
     m_puart->write(buffer,len);
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4629      	mov	r1, r5
 8000db2:	4638      	mov	r0, r7
 8000db4:	4798      	blx	r3
    return recvFind("SEND OK", 10000);
 8000db6:	f242 7110 	movw	r1, #10000	; 0x2710
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <sATCIPSENDMultiple+0x68>)
 8000dbc:	f7ff fdd2 	bl	8000964 <recvFind>
 8000dc0:	e7f1      	b.n	8000da6 <sATCIPSENDMultiple+0x3a>
 8000dc2:	bf00      	nop
 8000dc4:	20001d94 	.word	0x20001d94
 8000dc8:	08009c08 	.word	0x08009c08
 8000dcc:	08009b24 	.word	0x08009b24
 8000dd0:	08009c14 	.word	0x08009c14
 8000dd4:	08009c18 	.word	0x08009c18

08000dd8 <ESP8266_send_mux>:
{
 8000dd8:	b508      	push	{r3, lr}
  return sATCIPSENDMultiple(mux_id, buffer, len);
 8000dda:	f7ff ffc7 	bl	8000d6c <sATCIPSENDMultiple>
}
 8000dde:	bd08      	pop	{r3, pc}

08000de0 <sATCIPCLOSEMultiple>:
////////////////////////////////////////

// Closes TCP/UDP/SSL Connection for multiple connections
// AT+CIPCLOSE=<link ID>
bool sATCIPCLOSEMultiple(uint8_t mux_id)
{
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4604      	mov	r4, r0
  uint8_t * data;

  rx_empty();
 8000de4:	f7ff fd18 	bl	8000818 <rx_empty>
  m_puart->print(F("AT+CIPCLOSE="));
 8000de8:	4d0c      	ldr	r5, [pc, #48]	; (8000e1c <sATCIPCLOSEMultiple+0x3c>)
 8000dea:	682b      	ldr	r3, [r5, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	480c      	ldr	r0, [pc, #48]	; (8000e20 <sATCIPCLOSEMultiple+0x40>)
 8000df0:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIPCLOSE="));

  m_puart->println_int(mux_id);
 8000df2:	682b      	ldr	r3, [r5, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	4620      	mov	r0, r4
 8000df8:	4798      	blx	r3

#if 1
  data = recvString1_TO("OK", 5000);
 8000dfa:	4c0a      	ldr	r4, [pc, #40]	; (8000e24 <sATCIPCLOSEMultiple+0x44>)
 8000dfc:	f241 3188 	movw	r1, #5000	; 0x1388
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff fd23 	bl	800084c <recvString1_TO>

  if (indexOfString(data, "OK") != -1)
 8000e06:	4621      	mov	r1, r4
 8000e08:	f7ff fc7a 	bl	8000700 <indexOfString>
 8000e0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000e10:	d101      	bne.n	8000e16 <sATCIPCLOSEMultiple+0x36>
  {
    return true;
  }
#endif

  return false;
 8000e12:	2000      	movs	r0, #0
}
 8000e14:	bd38      	pop	{r3, r4, r5, pc}
    return true;
 8000e16:	2001      	movs	r0, #1
 8000e18:	e7fc      	b.n	8000e14 <sATCIPCLOSEMultiple+0x34>
 8000e1a:	bf00      	nop
 8000e1c:	20001d94 	.word	0x20001d94
 8000e20:	08009c20 	.word	0x08009c20
 8000e24:	08009b40 	.word	0x08009b40

08000e28 <ESP8266_releaseTCP_mux>:
{
 8000e28:	b508      	push	{r3, lr}
  return sATCIPCLOSEMultiple(mux_id);
 8000e2a:	f7ff ffd9 	bl	8000de0 <sATCIPCLOSEMultiple>
}
 8000e2e:	bd08      	pop	{r3, pc}

08000e30 <ESP8266_unregisterUDP_mux>:
{
 8000e30:	b508      	push	{r3, lr}
  return sATCIPCLOSEMultiple(mux_id);
 8000e32:	f7ff ffd5 	bl	8000de0 <sATCIPCLOSEMultiple>
}
 8000e36:	bd08      	pop	{r3, pc}

08000e38 <eATCIFSR>:

////////////////////////////////////////

// Gets the Local IP Address
bool eATCIFSR(uint8_t *list)
{
 8000e38:	b510      	push	{r4, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	4604      	mov	r4, r0
  rx_empty();
 8000e3e:	f7ff fceb 	bl	8000818 <rx_empty>
  m_puart->println(F("AT+CIFSR"));
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <eATCIFSR+0x2c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <eATCIFSR+0x30>)
 8000e4a:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIFSR"));

  return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", list, 1000);
 8000e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	4623      	mov	r3, r4
 8000e54:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <eATCIFSR+0x34>)
 8000e56:	4906      	ldr	r1, [pc, #24]	; (8000e70 <eATCIFSR+0x38>)
 8000e58:	4806      	ldr	r0, [pc, #24]	; (8000e74 <eATCIFSR+0x3c>)
 8000e5a:	f7ff fd91 	bl	8000980 <recvFindAndFilter>
}
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd10      	pop	{r4, pc}
 8000e62:	bf00      	nop
 8000e64:	20001d94 	.word	0x20001d94
 8000e68:	08009c30 	.word	0x08009c30
 8000e6c:	08009b3c 	.word	0x08009b3c
 8000e70:	08009b58 	.word	0x08009b58
 8000e74:	08009b40 	.word	0x08009b40

08000e78 <ESP8266_getLocalIP>:
{
 8000e78:	b510      	push	{r4, lr}
  eATCIFSR(ESP32_ap_list);
 8000e7a:	4c03      	ldr	r4, [pc, #12]	; (8000e88 <ESP8266_getLocalIP+0x10>)
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f7ff ffdb 	bl	8000e38 <eATCIFSR>
}
 8000e82:	4620      	mov	r0, r4
 8000e84:	bd10      	pop	{r4, pc}
 8000e86:	bf00      	nop
 8000e88:	20000150 	.word	0x20000150

08000e8c <sATCIPMUX>:

////////////////////////////////////////

// Enables/Disables Multiple Connections
bool sATCIPMUX(uint8_t mode)
{
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	4604      	mov	r4, r0
  uint8_t * data;

  rx_empty();
 8000e90:	f7ff fcc2 	bl	8000818 <rx_empty>
  m_puart->print(F("AT+CIPMUX="));
 8000e94:	4d0c      	ldr	r5, [pc, #48]	; (8000ec8 <sATCIPMUX+0x3c>)
 8000e96:	682b      	ldr	r3, [r5, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <sATCIPMUX+0x40>)
 8000e9c:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIPMUX="));

  m_puart->println_int(mode);
 8000e9e:	682b      	ldr	r3, [r5, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	4798      	blx	r3

  //data = recvString("OK", "Link is builded");
  data = recvString1_TO("OK", 1000);
 8000ea6:	4c0a      	ldr	r4, [pc, #40]	; (8000ed0 <sATCIPMUX+0x44>)
 8000ea8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000eac:	4620      	mov	r0, r4
 8000eae:	f7ff fccd 	bl	800084c <recvString1_TO>

  if (indexOfString(data, "OK") != -1)
 8000eb2:	4621      	mov	r1, r4
 8000eb4:	f7ff fc24 	bl	8000700 <indexOfString>
 8000eb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000ebc:	d101      	bne.n	8000ec2 <sATCIPMUX+0x36>
  {
    return true;
  }

  return false;
 8000ebe:	2000      	movs	r0, #0
}
 8000ec0:	bd38      	pop	{r3, r4, r5, pc}
    return true;
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	e7fc      	b.n	8000ec0 <sATCIPMUX+0x34>
 8000ec6:	bf00      	nop
 8000ec8:	20001d94 	.word	0x20001d94
 8000ecc:	08009c3c 	.word	0x08009c3c
 8000ed0:	08009b40 	.word	0x08009b40

08000ed4 <ESP8266_enableMUX>:
{
 8000ed4:	b508      	push	{r3, lr}
  return sATCIPMUX(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff ffd8 	bl	8000e8c <sATCIPMUX>
}
 8000edc:	bd08      	pop	{r3, pc}
	...

08000ee0 <sATCIPSERVER>:
// ‣ 0: deletes server.
// ‣ 1: creates server.
// • <port>: port number; 333 by default.
// • A TCP server can only be created when multiple connections are activated (AT+CIPMUX=1)
bool sATCIPSERVER(uint8_t mode, uint32_t port)
{
 8000ee0:	b538      	push	{r3, r4, r5, lr}
  uint8_t *data;

  if (mode)
 8000ee2:	b1c8      	cbz	r0, 8000f18 <sATCIPSERVER+0x38>
 8000ee4:	460c      	mov	r4, r1
  {
    rx_empty();
 8000ee6:	f7ff fc97 	bl	8000818 <rx_empty>
    m_puart->print(F("AT+CIPSERVER=1,"));
 8000eea:	4d13      	ldr	r5, [pc, #76]	; (8000f38 <sATCIPSERVER+0x58>)
 8000eec:	682b      	ldr	r3, [r5, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	4812      	ldr	r0, [pc, #72]	; (8000f3c <sATCIPSERVER+0x5c>)
 8000ef2:	4798      	blx	r3

    AT_LIB_LOGDEBUG(F("AT+CIPSERVER=1,"));

    m_puart->println_int(port);
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	4620      	mov	r0, r4
 8000efa:	4798      	blx	r3

#if 1
    data = recvString1_TO("OK", 1000);
 8000efc:	4c10      	ldr	r4, [pc, #64]	; (8000f40 <sATCIPSERVER+0x60>)
 8000efe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f02:	4620      	mov	r0, r4
 8000f04:	f7ff fca2 	bl	800084c <recvString1_TO>

    if (indexOfString(data, "OK") != -1)
 8000f08:	4621      	mov	r1, r4
 8000f0a:	f7ff fbf9 	bl	8000700 <indexOfString>
 8000f0e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000f12:	d00e      	beq.n	8000f32 <sATCIPSERVER+0x52>
    {
      return true;
 8000f14:	2001      	movs	r0, #1

    AT_LIB_LOGDEBUG(F("AT+CIPSERVER=0"));

    return recvFind("\r\r\n", 1000);
  }
}
 8000f16:	bd38      	pop	{r3, r4, r5, pc}
    rx_empty();
 8000f18:	f7ff fc7e 	bl	8000818 <rx_empty>
    m_puart->println(F("AT+CIPSERVER=0"));
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <sATCIPSERVER+0x58>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4808      	ldr	r0, [pc, #32]	; (8000f44 <sATCIPSERVER+0x64>)
 8000f24:	4798      	blx	r3
    return recvFind("\r\r\n", 1000);
 8000f26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <sATCIPSERVER+0x68>)
 8000f2c:	f7ff fd1a 	bl	8000964 <recvFind>
 8000f30:	e7f1      	b.n	8000f16 <sATCIPSERVER+0x36>
    return false;
 8000f32:	2000      	movs	r0, #0
 8000f34:	e7ef      	b.n	8000f16 <sATCIPSERVER+0x36>
 8000f36:	bf00      	nop
 8000f38:	20001d94 	.word	0x20001d94
 8000f3c:	08009c48 	.word	0x08009c48
 8000f40:	08009b40 	.word	0x08009b40
 8000f44:	08009c58 	.word	0x08009c58
 8000f48:	08009b58 	.word	0x08009b58

08000f4c <ESP8266_startTCPServer>:
{
 8000f4c:	b508      	push	{r3, lr}
 8000f4e:	4601      	mov	r1, r0
  if (sATCIPSERVER(1, port))
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff ffc5 	bl	8000ee0 <sATCIPSERVER>
}
 8000f56:	bd08      	pop	{r3, pc}

08000f58 <sATCIPSTO>:

////////////////////////////////////////

// Sets the TCP Server Timeout
bool sATCIPSTO(uint32_t timeout)
{
 8000f58:	b538      	push	{r3, r4, r5, lr}
 8000f5a:	4604      	mov	r4, r0
  rx_empty();
 8000f5c:	f7ff fc5c 	bl	8000818 <rx_empty>
  m_puart->print(F("AT+CIPSTO="));
 8000f60:	4d07      	ldr	r5, [pc, #28]	; (8000f80 <sATCIPSTO+0x28>)
 8000f62:	682b      	ldr	r3, [r5, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <sATCIPSTO+0x2c>)
 8000f68:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIPSTO="));

  m_puart->println_int(timeout);
 8000f6a:	682b      	ldr	r3, [r5, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	4620      	mov	r0, r4
 8000f70:	4798      	blx	r3

  return recvFind("OK", 1000);
 8000f72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f76:	4804      	ldr	r0, [pc, #16]	; (8000f88 <sATCIPSTO+0x30>)
 8000f78:	f7ff fcf4 	bl	8000964 <recvFind>
}
 8000f7c:	bd38      	pop	{r3, r4, r5, pc}
 8000f7e:	bf00      	nop
 8000f80:	20001d94 	.word	0x20001d94
 8000f84:	08009c68 	.word	0x08009c68
 8000f88:	08009b40 	.word	0x08009b40

08000f8c <ESP8266_setTCPServerTimeout>:
{
 8000f8c:	b508      	push	{r3, lr}
  return sATCIPSTO(timeout);
 8000f8e:	f7ff ffe3 	bl	8000f58 <sATCIPSTO>
}
 8000f92:	bd08      	pop	{r3, pc}

08000f94 <recvPkg>:
/*----------------------------------------------------------------------------*/
/* +IPD,<id>,<len>:<data> */
/* +IPD,<len>:<data> */

uint32_t recvPkg(uint8_t *buffer, uint32_t buffer_size, uint32_t *data_len, uint32_t timeout, uint8_t *coming_mux_id)
{
 8000f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	4606      	mov	r6, r0
 8000f9c:	468b      	mov	fp, r1
 8000f9e:	9201      	str	r2, [sp, #4]
 8000fa0:	4698      	mov	r8, r3
  unsigned long start;
  uint32_t i;

//by isjeon  uint8_t data[1024];
  int idx = 0;
  memset(data, 0, sizeof(data));
 8000fa2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	485c      	ldr	r0, [pc, #368]	; (800111c <recvPkg+0x188>)
 8000faa:	f007 f84d 	bl	8008048 <memset>
  if (buffer == NULL)
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	f000 80aa 	beq.w	8001108 <recvPkg+0x174>
  {
    return 0;
  }

  start = millis();
 8000fb4:	f7ff fba0 	bl	80006f8 <millis>
 8000fb8:	4682      	mov	sl, r0
  int idx = 0;
 8000fba:	2700      	movs	r7, #0
  
  while (millis() - start < timeout) 
 8000fbc:	e012      	b.n	8000fe4 <recvPkg+0x50>
//      data += a;
      data[idx++] = a;
    }

//    index_PIPDcomma = data.indexOf("+IPD,");
    index_PIPDcomma = indexOfString(data,"+IPD,");
 8000fbe:	4958      	ldr	r1, [pc, #352]	; (8001120 <recvPkg+0x18c>)
 8000fc0:	4856      	ldr	r0, [pc, #344]	; (800111c <recvPkg+0x188>)
 8000fc2:	f7ff fb9d 	bl	8000700 <indexOfString>
 8000fc6:	4604      	mov	r4, r0
    if (index_PIPDcomma != -1) 
 8000fc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000fcc:	d00a      	beq.n	8000fe4 <recvPkg+0x50>
    {
 //     index_colon = data.indexOf(':', index_PIPDcomma + 5);
      index_colon = indexOfChar(data, ':', index_PIPDcomma + 5);
 8000fce:	f100 0905 	add.w	r9, r0, #5
 8000fd2:	464a      	mov	r2, r9
 8000fd4:	213a      	movs	r1, #58	; 0x3a
 8000fd6:	4851      	ldr	r0, [pc, #324]	; (800111c <recvPkg+0x188>)
 8000fd8:	f7ff fafe 	bl	80005d8 <indexOfChar>
 8000fdc:	4605      	mov	r5, r0
      if (index_colon != -1) 
 8000fde:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000fe2:	d113      	bne.n	800100c <recvPkg+0x78>
  while (millis() - start < timeout) 
 8000fe4:	f7ff fb88 	bl	80006f8 <millis>
 8000fe8:	eba0 000a 	sub.w	r0, r0, sl
 8000fec:	4540      	cmp	r0, r8
 8000fee:	d24c      	bcs.n	800108a <recvPkg+0xf6>
    if (m_puart->available() > 0) 
 8000ff0:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <recvPkg+0x190>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	4798      	blx	r3
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	dde0      	ble.n	8000fbe <recvPkg+0x2a>
      a = m_puart->read();
 8000ffc:	4b49      	ldr	r3, [pc, #292]	; (8001124 <recvPkg+0x190>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4798      	blx	r3
      data[idx++] = a;
 8001004:	4b45      	ldr	r3, [pc, #276]	; (800111c <recvPkg+0x188>)
 8001006:	55d8      	strb	r0, [r3, r7]
 8001008:	3701      	adds	r7, #1
 800100a:	e7d8      	b.n	8000fbe <recvPkg+0x2a>
      {
//        index_comma = data.indexOf(',', index_PIPDcomma + 5);
        index_comma = indexOfChar(data,',', index_PIPDcomma + 5);
 800100c:	464a      	mov	r2, r9
 800100e:	212c      	movs	r1, #44	; 0x2c
 8001010:	4842      	ldr	r0, [pc, #264]	; (800111c <recvPkg+0x188>)
 8001012:	f7ff fae1 	bl	80005d8 <indexOfChar>
 8001016:	4607      	mov	r7, r0
        /* +IPD,id,len:data */
        if (index_comma != -1 && index_comma < index_colon) 
 8001018:	f1b0 3fff 	cmp.w	r0, #4294967295
 800101c:	d001      	beq.n	8001022 <recvPkg+0x8e>
 800101e:	4285      	cmp	r5, r0
 8001020:	dc11      	bgt.n	8001046 <recvPkg+0xb2>
        } 
        else 
        { 
          /* +IPD,len:data */
//          len = data.substring(index_PIPDcomma + 5, index_colon).toInt();
          data[index_colon] = 0;
 8001022:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800111c <recvPkg+0x188>
 8001026:	2300      	movs	r3, #0
 8001028:	f808 3005 	strb.w	r3, [r8, r5]
          len = atoi(data + index_PIPDcomma + 5);
 800102c:	1d60      	adds	r0, r4, #5
 800102e:	4440      	add	r0, r8
 8001030:	f006 fdda 	bl	8007be8 <atoi>
          data[index_colon] = ':';
 8001034:	233a      	movs	r3, #58	; 0x3a
 8001036:	f808 3005 	strb.w	r3, [r8, r5]
          if (len <= 0) 
 800103a:	1e01      	subs	r1, r0, #0
 800103c:	dd6a      	ble.n	8001114 <recvPkg+0x180>
          {
            return 0;
          }
        }
        
        has_data = true;
 800103e:	2301      	movs	r3, #1
  int8_t id = -1;
 8001040:	f04f 38ff 	mov.w	r8, #4294967295
 8001044:	e026      	b.n	8001094 <recvPkg+0x100>
          data[index_comma] = 0;
 8001046:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800111c <recvPkg+0x188>
 800104a:	2300      	movs	r3, #0
 800104c:	f809 3000 	strb.w	r3, [r9, r0]
          id = atoi(data + index_PIPDcomma + 5);
 8001050:	1d60      	adds	r0, r4, #5
 8001052:	4448      	add	r0, r9
 8001054:	f006 fdc8 	bl	8007be8 <atoi>
 8001058:	fa4f f880 	sxtb.w	r8, r0
          data[index_comma] = ',';
 800105c:	232c      	movs	r3, #44	; 0x2c
 800105e:	f809 3007 	strb.w	r3, [r9, r7]
          if (id < 0 || id > 4) 
 8001062:	b2c0      	uxtb	r0, r0
 8001064:	2804      	cmp	r0, #4
 8001066:	d902      	bls.n	800106e <recvPkg+0xda>
            return 0;
 8001068:	f04f 0b00 	mov.w	fp, #0
 800106c:	e015      	b.n	800109a <recvPkg+0x106>
          data[index_colon] = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f809 3005 	strb.w	r3, [r9, r5]
          len = atoi(data + index_comma + 1);
 8001074:	1c78      	adds	r0, r7, #1
 8001076:	4448      	add	r0, r9
 8001078:	f006 fdb6 	bl	8007be8 <atoi>
          data[index_colon] = ':';
 800107c:	233a      	movs	r3, #58	; 0x3a
 800107e:	f809 3005 	strb.w	r3, [r9, r5]
          if (len <= 0) 
 8001082:	1e01      	subs	r1, r0, #0
 8001084:	dd43      	ble.n	800110e <recvPkg+0x17a>
        has_data = true;
 8001086:	2301      	movs	r3, #1
 8001088:	e004      	b.n	8001094 <recvPkg+0x100>
  bool has_data = false;
 800108a:	2300      	movs	r3, #0
  int8_t id = -1;
 800108c:	f04f 38ff 	mov.w	r8, #4294967295
  int32_t len = -1;
 8001090:	4641      	mov	r1, r8
  int32_t index_comma = -1; /* , */
 8001092:	4647      	mov	r7, r8
        break;
      }
    }
  }

  if (has_data) 
 8001094:	b92b      	cbnz	r3, 80010a2 <recvPkg+0x10e>
        
        return ret;
      }
    }
  }
  return 0;
 8001096:	f04f 0b00 	mov.w	fp, #0
}
 800109a:	4658      	mov	r0, fp
 800109c:	b003      	add	sp, #12
 800109e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = (uint32_t) len > buffer_size ? buffer_size : (uint32_t) len;
 80010a2:	460d      	mov	r5, r1
 80010a4:	458b      	cmp	fp, r1
 80010a6:	bf28      	it	cs
 80010a8:	468b      	movcs	fp, r1
    start = millis();
 80010aa:	f7ff fb25 	bl	80006f8 <millis>
 80010ae:	4681      	mov	r9, r0
    i = 0;
 80010b0:	2400      	movs	r4, #0
    while (millis() - start < 3000) 
 80010b2:	e001      	b.n	80010b8 <recvPkg+0x124>
      if (i == ret) 
 80010b4:	455c      	cmp	r4, fp
 80010b6:	d016      	beq.n	80010e6 <recvPkg+0x152>
    while (millis() - start < 3000) 
 80010b8:	f7ff fb1e 	bl	80006f8 <millis>
 80010bc:	eba0 0009 	sub.w	r0, r0, r9
 80010c0:	f640 33b7 	movw	r3, #2999	; 0xbb7
 80010c4:	4298      	cmp	r0, r3
 80010c6:	d81c      	bhi.n	8001102 <recvPkg+0x16e>
      while (m_puart->available() > 0 && i < ret) 
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <recvPkg+0x190>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	4798      	blx	r3
 80010d0:	2800      	cmp	r0, #0
 80010d2:	ddef      	ble.n	80010b4 <recvPkg+0x120>
 80010d4:	455c      	cmp	r4, fp
 80010d6:	d2ed      	bcs.n	80010b4 <recvPkg+0x120>
        a = m_puart->read();
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <recvPkg+0x190>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4798      	blx	r3
        buffer[i++] = a;
 80010e0:	5530      	strb	r0, [r6, r4]
 80010e2:	3401      	adds	r4, #1
 80010e4:	e7f0      	b.n	80010c8 <recvPkg+0x134>
        rx_empty();
 80010e6:	f7ff fb97 	bl	8000818 <rx_empty>
        if (data_len) 
 80010ea:	9b01      	ldr	r3, [sp, #4]
 80010ec:	b103      	cbz	r3, 80010f0 <recvPkg+0x15c>
          *data_len = len;
 80010ee:	601d      	str	r5, [r3, #0]
        if (index_comma != -1 && coming_mux_id) 
 80010f0:	f1b7 3fff 	cmp.w	r7, #4294967295
 80010f4:	d0d1      	beq.n	800109a <recvPkg+0x106>
 80010f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0ce      	beq.n	800109a <recvPkg+0x106>
          *coming_mux_id = id;
 80010fc:	f883 8000 	strb.w	r8, [r3]
        return ret;
 8001100:	e7cb      	b.n	800109a <recvPkg+0x106>
  return 0;
 8001102:	f04f 0b00 	mov.w	fp, #0
 8001106:	e7c8      	b.n	800109a <recvPkg+0x106>
    return 0;
 8001108:	f04f 0b00 	mov.w	fp, #0
 800110c:	e7c5      	b.n	800109a <recvPkg+0x106>
            return 0;
 800110e:	f04f 0b00 	mov.w	fp, #0
 8001112:	e7c2      	b.n	800109a <recvPkg+0x106>
            return 0;
 8001114:	f04f 0b00 	mov.w	fp, #0
 8001118:	e7bf      	b.n	800109a <recvPkg+0x106>
 800111a:	bf00      	nop
 800111c:	20001178 	.word	0x20001178
 8001120:	08009b20 	.word	0x08009b20
 8001124:	20001d94 	.word	0x20001d94

08001128 <ESP8266_recv_mux>:
{
 8001128:	b510      	push	{r4, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	4604      	mov	r4, r0
 800112e:	4608      	mov	r0, r1
 8001130:	4611      	mov	r1, r2
  ret = recvPkg(buffer, buffer_size, NULL, timeout, &id);
 8001132:	f10d 020f 	add.w	r2, sp, #15
 8001136:	9200      	str	r2, [sp, #0]
 8001138:	2200      	movs	r2, #0
 800113a:	f7ff ff2b 	bl	8000f94 <recvPkg>
  if (ret > 0 && id == mux_id) 
 800113e:	b120      	cbz	r0, 800114a <ESP8266_recv_mux+0x22>
 8001140:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001144:	42a3      	cmp	r3, r4
 8001146:	d000      	beq.n	800114a <ESP8266_recv_mux+0x22>
  return 0;
 8001148:	2000      	movs	r0, #0
}
 800114a:	b004      	add	sp, #16
 800114c:	bd10      	pop	{r4, pc}

0800114e <ESP8266_recv_mux_p>:
{
 800114e:	b510      	push	{r4, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	4604      	mov	r4, r0
 8001154:	4608      	mov	r0, r1
 8001156:	4611      	mov	r1, r2
  return recvPkg(buffer, buffer_size, NULL, timeout, coming_mux_id);
 8001158:	9400      	str	r4, [sp, #0]
 800115a:	2200      	movs	r2, #0
 800115c:	f7ff ff1a 	bl	8000f94 <recvPkg>
}
 8001160:	b002      	add	sp, #8
 8001162:	bd10      	pop	{r4, pc}

08001164 <_Z5delaym>:
	uint32_t HAL_GetTick();
}


void delay(uint32_t x)
{
 8001164:	b508      	push	{r3, lr}
	HAL_Delay(x);
 8001166:	f002 fc4d 	bl	8003a04 <HAL_Delay>
}
 800116a:	bd08      	pop	{r3, pc}

0800116c <_Z6millisv>:

uint32_t millis()
{
 800116c:	b508      	push	{r3, lr}
	return HAL_GetTick();
 800116e:	f002 fc43 	bl	80039f8 <HAL_GetTick>
}
 8001172:	bd08      	pop	{r3, pc}

08001174 <_ZN7ESP82668checkIPDER6String>:
/*----------------------------------------------------------------------------*/
/* +IPD,<id>,<len>:<data> */
/* +IPD,<len>:<data> */

uint32_t ESP8266::checkIPD(String& data)
{
 8001174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001178:	b08d      	sub	sp, #52	; 0x34
 800117a:	4606      	mov	r6, r0
 800117c:	460d      	mov	r5, r1

  int32_t len = -1;
  int8_t id   = -1;

  { // Just for easier diffing
    index_PIPDcomma = data.indexOf("+IPD,");
 800117e:	4936      	ldr	r1, [pc, #216]	; (8001258 <_ZN7ESP82668checkIPDER6String+0xe4>)
 8001180:	4668      	mov	r0, sp
 8001182:	f000 fe97 	bl	8001eb4 <_ZN6StringC1EPKc>
 8001186:	4669      	mov	r1, sp
 8001188:	4628      	mov	r0, r5
 800118a:	f000 ff6c 	bl	8002066 <_ZNK6String7indexOfERKS_>
 800118e:	4604      	mov	r4, r0
 8001190:	4668      	mov	r0, sp
 8001192:	f000 fe46 	bl	8001e22 <_ZN6StringD1Ev>
    
    if (index_PIPDcomma != -1)
 8001196:	f1b4 3fff 	cmp.w	r4, #4294967295
 800119a:	d103      	bne.n	80011a4 <_ZN7ESP82668checkIPDER6String+0x30>
        return len;
      }
    }
  }

  return 0;
 800119c:	2000      	movs	r0, #0
}
 800119e:	b00d      	add	sp, #52	; 0x34
 80011a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      index_colon = data.indexOf(':', index_PIPDcomma + 5);
 80011a4:	3405      	adds	r4, #5
 80011a6:	4622      	mov	r2, r4
 80011a8:	213a      	movs	r1, #58	; 0x3a
 80011aa:	4628      	mov	r0, r5
 80011ac:	f000 ff38 	bl	8002020 <_ZNK6String7indexOfEcj>
 80011b0:	4607      	mov	r7, r0
      if (index_colon != -1)
 80011b2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80011b6:	d101      	bne.n	80011bc <_ZN7ESP82668checkIPDER6String+0x48>
  return 0;
 80011b8:	2000      	movs	r0, #0
 80011ba:	e7f0      	b.n	800119e <_ZN7ESP82668checkIPDER6String+0x2a>
        index_comma = data.indexOf(',', index_PIPDcomma + 5);
 80011bc:	4622      	mov	r2, r4
 80011be:	212c      	movs	r1, #44	; 0x2c
 80011c0:	4628      	mov	r0, r5
 80011c2:	f000 ff2d 	bl	8002020 <_ZNK6String7indexOfEcj>
 80011c6:	4680      	mov	r8, r0
        if (index_comma != -1 && index_comma < index_colon)
 80011c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80011cc:	d001      	beq.n	80011d2 <_ZN7ESP82668checkIPDER6String+0x5e>
 80011ce:	4287      	cmp	r7, r0
 80011d0:	dc19      	bgt.n	8001206 <_ZN7ESP82668checkIPDER6String+0x92>
          len = data.substring(index_PIPDcomma + 5, index_colon).toInt();
 80011d2:	463b      	mov	r3, r7
 80011d4:	4622      	mov	r2, r4
 80011d6:	4629      	mov	r1, r5
 80011d8:	a809      	add	r0, sp, #36	; 0x24
 80011da:	f000 ff49 	bl	8002070 <_ZNK6String9substringEjj>
 80011de:	a809      	add	r0, sp, #36	; 0x24
 80011e0:	f000 ff6e 	bl	80020c0 <_ZNK6String5toIntEv>
 80011e4:	4604      	mov	r4, r0
 80011e6:	a809      	add	r0, sp, #36	; 0x24
 80011e8:	f000 fe1b 	bl	8001e22 <_ZN6StringD1Ev>
          if (len <= 0)
 80011ec:	2c00      	cmp	r4, #0
 80011ee:	dd30      	ble.n	8001252 <_ZN7ESP82668checkIPDER6String+0xde>
  int8_t id   = -1;
 80011f0:	f04f 39ff 	mov.w	r9, #4294967295
        if (m_onData)
 80011f4:	6873      	ldr	r3, [r6, #4]
 80011f6:	b123      	cbz	r3, 8001202 <_ZN7ESP82668checkIPDER6String+0x8e>
          m_onData(id, len, m_onDataPtr);
 80011f8:	68b2      	ldr	r2, [r6, #8]
 80011fa:	4621      	mov	r1, r4
 80011fc:	fa5f f089 	uxtb.w	r0, r9
 8001200:	4798      	blx	r3
        return len;
 8001202:	4620      	mov	r0, r4
 8001204:	e7cb      	b.n	800119e <_ZN7ESP82668checkIPDER6String+0x2a>
          id = data.substring(index_PIPDcomma + 5, index_comma).toInt();
 8001206:	4603      	mov	r3, r0
 8001208:	4622      	mov	r2, r4
 800120a:	4629      	mov	r1, r5
 800120c:	a803      	add	r0, sp, #12
 800120e:	f000 ff2f 	bl	8002070 <_ZNK6String9substringEjj>
 8001212:	a803      	add	r0, sp, #12
 8001214:	f000 ff54 	bl	80020c0 <_ZNK6String5toIntEv>
 8001218:	4604      	mov	r4, r0
 800121a:	fa4f f980 	sxtb.w	r9, r0
 800121e:	a803      	add	r0, sp, #12
 8001220:	f000 fdff 	bl	8001e22 <_ZN6StringD1Ev>
          if (id < 0 || id > 4)
 8001224:	b2e4      	uxtb	r4, r4
 8001226:	2c04      	cmp	r4, #4
 8001228:	d901      	bls.n	800122e <_ZN7ESP82668checkIPDER6String+0xba>
            return 0;
 800122a:	2000      	movs	r0, #0
 800122c:	e7b7      	b.n	800119e <_ZN7ESP82668checkIPDER6String+0x2a>
          len = data.substring(index_comma + 1, index_colon).toInt();
 800122e:	463b      	mov	r3, r7
 8001230:	f108 0201 	add.w	r2, r8, #1
 8001234:	4629      	mov	r1, r5
 8001236:	a806      	add	r0, sp, #24
 8001238:	f000 ff1a 	bl	8002070 <_ZNK6String9substringEjj>
 800123c:	a806      	add	r0, sp, #24
 800123e:	f000 ff3f 	bl	80020c0 <_ZNK6String5toIntEv>
 8001242:	4604      	mov	r4, r0
 8001244:	a806      	add	r0, sp, #24
 8001246:	f000 fdec 	bl	8001e22 <_ZN6StringD1Ev>
          if (len <= 0)
 800124a:	2c00      	cmp	r4, #0
 800124c:	dcd2      	bgt.n	80011f4 <_ZN7ESP82668checkIPDER6String+0x80>
            return 0;
 800124e:	2000      	movs	r0, #0
 8001250:	e7a5      	b.n	800119e <_ZN7ESP82668checkIPDER6String+0x2a>
            return 0;
 8001252:	2000      	movs	r0, #0
 8001254:	e7a3      	b.n	800119e <_ZN7ESP82668checkIPDER6String+0x2a>
 8001256:	bf00      	nop
 8001258:	08009b20 	.word	0x08009b20

0800125c <_ZN7ESP8266C1Ev>:
	myDebug.println(sApList);
	return ESP32_ap_list;
}
ESP8266::ESP8266()
{
	ESP8266::m_puart = &myAt;
 800125c:	4b01      	ldr	r3, [pc, #4]	; (8001264 <_ZN7ESP8266C1Ev+0x8>)
 800125e:	6003      	str	r3, [r0, #0]
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000e50 	.word	0x20000e50

08001268 <_Z41__static_initialization_and_destruction_0ii>:
void Serial::write(char ch)
{
	char buf[1024];
	sprintf(buf,"%c",ch);
    HAL_UART_Transmit(m_handle,(uint8_t *)buf,strlen(buf),1000);
}
 8001268:	2801      	cmp	r0, #1
 800126a:	d000      	beq.n	800126e <_Z41__static_initialization_and_destruction_0ii+0x6>
 800126c:	4770      	bx	lr
 800126e:	b508      	push	{r3, lr}
 8001270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001274:	4299      	cmp	r1, r3
 8001276:	d000      	beq.n	800127a <_Z41__static_initialization_and_destruction_0ii+0x12>
 8001278:	bd08      	pop	{r3, pc}
		m_handle = p_Handle;
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800127c:	4a05      	ldr	r2, [pc, #20]	; (8001294 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001282:	4a06      	ldr	r2, [pc, #24]	; (800129c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001284:	605a      	str	r2, [r3, #4]
ESP8266 myESP8266;
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001288:	f7ff ffe8 	bl	800125c <_ZN7ESP8266C1Ev>
}
 800128c:	e7f4      	b.n	8001278 <_Z41__static_initialization_and_destruction_0ii+0x10>
 800128e:	bf00      	nop
 8001290:	20000e58 	.word	0x20000e58
 8001294:	20003da0 	.word	0x20003da0
 8001298:	20000e50 	.word	0x20000e50
 800129c:	20001134 	.word	0x20001134
 80012a0:	20000e60 	.word	0x20000e60

080012a4 <_ZN6Serial9availableEv>:
{
 80012a4:	b508      	push	{r3, lr}
	return is_available(&AT_UART_RX_Q);
 80012a6:	4802      	ldr	r0, [pc, #8]	; (80012b0 <_ZN6Serial9availableEv+0xc>)
 80012a8:	f001 fb49 	bl	800293e <is_available>
}
 80012ac:	bd08      	pop	{r3, pc}
 80012ae:	bf00      	nop
 80012b0:	20000020 	.word	0x20000020

080012b4 <_ZN6Serial7printlnE6String>:
{
 80012b4:	b510      	push	{r4, lr}
 80012b6:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80012ba:	4604      	mov	r4, r0
 80012bc:	4608      	mov	r0, r1
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
 80012be:	2300      	movs	r3, #0
 80012c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c4:	4669      	mov	r1, sp
 80012c6:	f000 fe92 	bl	8001fee <_ZNK6String8getBytesEPhjj>
	strcat(buf,"\r\n");
 80012ca:	4668      	mov	r0, sp
 80012cc:	f7fe ffaa 	bl	8000224 <strlen>
 80012d0:	eb0d 0200 	add.w	r2, sp, r0
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <_ZN6Serial7printlnE6String+0x48>)
 80012d6:	8819      	ldrh	r1, [r3, #0]
 80012d8:	789b      	ldrb	r3, [r3, #2]
 80012da:	f82d 1000 	strh.w	r1, [sp, r0]
 80012de:	7093      	strb	r3, [r2, #2]
    HAL_UART_Transmit(m_handle,(uint8_t *)buf,strlen(buf),1000);
 80012e0:	4668      	mov	r0, sp
 80012e2:	f7fe ff9f 	bl	8000224 <strlen>
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	b282      	uxth	r2, r0
 80012ec:	4669      	mov	r1, sp
 80012ee:	6860      	ldr	r0, [r4, #4]
 80012f0:	f004 fb17 	bl	8005922 <HAL_UART_Transmit>
}
 80012f4:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	bf00      	nop
 80012fc:	08009d18 	.word	0x08009d18

08001300 <_ZN6Serial4readEv>:
{
 8001300:	b508      	push	{r3, lr}
 8001302:	4603      	mov	r3, r0
 8001304:	2000      	movs	r0, #0
	if(m_handle == &AT_UART_CH)
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <_ZN6Serial4readEv+0x1c>)
 800130a:	429a      	cmp	r2, r3
 800130c:	d000      	beq.n	8001310 <_ZN6Serial4readEv+0x10>
}
 800130e:	bd08      	pop	{r3, pc}
		ch = delete_uart_Q(&AT_UART_RX_Q);
 8001310:	4803      	ldr	r0, [pc, #12]	; (8001320 <_ZN6Serial4readEv+0x20>)
 8001312:	f001 faff 	bl	8002914 <delete_uart_Q>
 8001316:	b2c0      	uxtb	r0, r0
 8001318:	e7f9      	b.n	800130e <_ZN6Serial4readEv+0xe>
 800131a:	bf00      	nop
 800131c:	20001134 	.word	0x20001134
 8001320:	20000020 	.word	0x20000020

08001324 <_ZN7ESP82668rx_emptyEv>:

////////////////////////////////////////

void ESP8266::rx_empty()
{
 8001324:	b530      	push	{r4, r5, lr}
 8001326:	b085      	sub	sp, #20
 8001328:	4605      	mov	r5, r0
  String data;
 800132a:	4916      	ldr	r1, [pc, #88]	; (8001384 <_ZN7ESP82668rx_emptyEv+0x60>)
 800132c:	a801      	add	r0, sp, #4
 800132e:	f000 fdc1 	bl	8001eb4 <_ZN6StringC1EPKc>
  char a;
  unsigned long start = millis();
 8001332:	f7ff ff1b 	bl	800116c <_Z6millisv>
 8001336:	4604      	mov	r4, r0

  while (millis() - start < 10)
 8001338:	f7ff ff18 	bl	800116c <_Z6millisv>
 800133c:	1b00      	subs	r0, r0, r4
 800133e:	2809      	cmp	r0, #9
 8001340:	d81b      	bhi.n	800137a <_ZN7ESP82668rx_emptyEv+0x56>
  {
    if (m_puart->available())
 8001342:	6828      	ldr	r0, [r5, #0]
 8001344:	f7ff ffae 	bl	80012a4 <_ZN6Serial9availableEv>
 8001348:	2800      	cmp	r0, #0
 800134a:	d0f5      	beq.n	8001338 <_ZN7ESP82668rx_emptyEv+0x14>
    {
      a = m_puart->read();
 800134c:	6828      	ldr	r0, [r5, #0]
 800134e:	f7ff ffd7 	bl	8001300 <_ZN6Serial4readEv>

      if (a == '\0')
 8001352:	4601      	mov	r1, r0
 8001354:	2800      	cmp	r0, #0
 8001356:	d0ef      	beq.n	8001338 <_ZN7ESP82668rx_emptyEv+0x14>
	String & operator += (char c)			{concat(c); return (*this);}
 8001358:	a801      	add	r0, sp, #4
 800135a:	f000 fe3a 	bl	8001fd2 <_ZN6String6concatEc>
        continue;

      data += a;

      if (checkIPD(data))
 800135e:	a901      	add	r1, sp, #4
 8001360:	4628      	mov	r0, r5
 8001362:	f7ff ff07 	bl	8001174 <_ZN7ESP82668checkIPDER6String>
 8001366:	b918      	cbnz	r0, 8001370 <_ZN7ESP82668rx_emptyEv+0x4c>
      {
        data = "";
      }

      start = millis();
 8001368:	f7ff ff00 	bl	800116c <_Z6millisv>
 800136c:	4604      	mov	r4, r0
 800136e:	e7e3      	b.n	8001338 <_ZN7ESP82668rx_emptyEv+0x14>
        data = "";
 8001370:	4904      	ldr	r1, [pc, #16]	; (8001384 <_ZN7ESP82668rx_emptyEv+0x60>)
 8001372:	a801      	add	r0, sp, #4
 8001374:	f000 fe03 	bl	8001f7e <_ZN6StringaSEPKc>
 8001378:	e7f6      	b.n	8001368 <_ZN7ESP82668rx_emptyEv+0x44>
  String data;
 800137a:	a801      	add	r0, sp, #4
 800137c:	f000 fd51 	bl	8001e22 <_ZN6StringD1Ev>
    }
  }
}
 8001380:	b005      	add	sp, #20
 8001382:	bd30      	pop	{r4, r5, pc}
 8001384:	0800a218 	.word	0x0800a218

08001388 <_ZN7ESP826610recvStringE6Stringm>:

////////////////////////////////////////

String ESP8266::recvString(String target, uint32_t timeout)
{
 8001388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800138c:	4605      	mov	r5, r0
 800138e:	460c      	mov	r4, r1
 8001390:	4616      	mov	r6, r2
 8001392:	4698      	mov	r8, r3
  String data;
 8001394:	4916      	ldr	r1, [pc, #88]	; (80013f0 <_ZN7ESP826610recvStringE6Stringm+0x68>)
 8001396:	f000 fd8d 	bl	8001eb4 <_ZN6StringC1EPKc>
  char a;
  unsigned long start = millis();
 800139a:	f7ff fee7 	bl	800116c <_Z6millisv>
 800139e:	4607      	mov	r7, r0

  while (millis() - start < timeout)
 80013a0:	f7ff fee4 	bl	800116c <_Z6millisv>
 80013a4:	1bc0      	subs	r0, r0, r7
 80013a6:	4540      	cmp	r0, r8
 80013a8:	d306      	bcc.n	80013b8 <_ZN7ESP826610recvStringE6Stringm+0x30>
      }
    }
  }
//while(1);
  return data;
}
 80013aa:	4628      	mov	r0, r5
 80013ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data = "";
 80013b0:	490f      	ldr	r1, [pc, #60]	; (80013f0 <_ZN7ESP826610recvStringE6Stringm+0x68>)
 80013b2:	4628      	mov	r0, r5
 80013b4:	f000 fde3 	bl	8001f7e <_ZN6StringaSEPKc>
    while (m_puart->available() > 0)
 80013b8:	6820      	ldr	r0, [r4, #0]
 80013ba:	f7ff ff73 	bl	80012a4 <_ZN6Serial9availableEv>
 80013be:	2800      	cmp	r0, #0
 80013c0:	ddee      	ble.n	80013a0 <_ZN7ESP826610recvStringE6Stringm+0x18>
      a = m_puart->read();
 80013c2:	6820      	ldr	r0, [r4, #0]
 80013c4:	f7ff ff9c 	bl	8001300 <_ZN6Serial4readEv>
      if (a == '\0')
 80013c8:	4601      	mov	r1, r0
 80013ca:	2800      	cmp	r0, #0
 80013cc:	d0f4      	beq.n	80013b8 <_ZN7ESP826610recvStringE6Stringm+0x30>
 80013ce:	4628      	mov	r0, r5
 80013d0:	f000 fdff 	bl	8001fd2 <_ZN6String6concatEc>
      if (data.indexOf(target) != -1)
 80013d4:	4631      	mov	r1, r6
 80013d6:	4628      	mov	r0, r5
 80013d8:	f000 fe45 	bl	8002066 <_ZNK6String7indexOfERKS_>
 80013dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80013e0:	d1e3      	bne.n	80013aa <_ZN7ESP826610recvStringE6Stringm+0x22>
      else if (checkIPD(data))
 80013e2:	4629      	mov	r1, r5
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7ff fec5 	bl	8001174 <_ZN7ESP82668checkIPDER6String>
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d0e4      	beq.n	80013b8 <_ZN7ESP826610recvStringE6Stringm+0x30>
 80013ee:	e7df      	b.n	80013b0 <_ZN7ESP826610recvStringE6Stringm+0x28>
 80013f0:	0800a218 	.word	0x0800a218

080013f4 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m>:
////////////////////////////////////////
extern "C" {
#include <stdio.h>
}
bool ESP8266::recvFindAndFilter(String target, String begin, String end, String &data, uint32_t timeout)
{
 80013f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f8:	b09c      	sub	sp, #112	; 0x70
 80013fa:	4605      	mov	r5, r0
 80013fc:	460c      	mov	r4, r1
 80013fe:	4616      	mov	r6, r2
 8001400:	461f      	mov	r7, r3
 8001402:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
  String data_tmp;
 8001406:	494e      	ldr	r1, [pc, #312]	; (8001540 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0x14c>)
 8001408:	a801      	add	r0, sp, #4
 800140a:	f000 fd53 	bl	8001eb4 <_ZN6StringC1EPKc>

  data_tmp = recvString(target, timeout);
 800140e:	4621      	mov	r1, r4
 8001410:	a807      	add	r0, sp, #28
 8001412:	f000 fda2 	bl	8001f5a <_ZN6StringC1ERKS_>
 8001416:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001418:	aa07      	add	r2, sp, #28
 800141a:	4629      	mov	r1, r5
 800141c:	a804      	add	r0, sp, #16
 800141e:	f7ff ffb3 	bl	8001388 <_ZN7ESP826610recvStringE6Stringm>
 8001422:	a904      	add	r1, sp, #16
 8001424:	a801      	add	r0, sp, #4
 8001426:	f000 fda2 	bl	8001f6e <_ZN6StringaSEOS_>
 800142a:	a804      	add	r0, sp, #16
 800142c:	f000 fcf9 	bl	8001e22 <_ZN6StringD1Ev>
 8001430:	a807      	add	r0, sp, #28
 8001432:	f000 fcf6 	bl	8001e22 <_ZN6StringD1Ev>

  if (data_tmp.indexOf(target) != -1)
 8001436:	4621      	mov	r1, r4
 8001438:	a801      	add	r0, sp, #4
 800143a:	f000 fe14 	bl	8002066 <_ZNK6String7indexOfERKS_>
 800143e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001442:	d054      	beq.n	80014ee <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0xfa>
  {
    int32_t index1 = data_tmp.indexOf(begin);
 8001444:	4631      	mov	r1, r6
 8001446:	a801      	add	r0, sp, #4
 8001448:	f000 fe0d 	bl	8002066 <_ZNK6String7indexOfERKS_>
 800144c:	4605      	mov	r5, r0
    int32_t index2 = data_tmp.indexOf(end);
 800144e:	4639      	mov	r1, r7
 8001450:	a801      	add	r0, sp, #4
 8001452:	f000 fe08 	bl	8002066 <_ZNK6String7indexOfERKS_>
 8001456:	4604      	mov	r4, r0

printf("index1=%d index2=%d\n",index1,index2);
 8001458:	4602      	mov	r2, r0
 800145a:	4629      	mov	r1, r5
 800145c:	4839      	ldr	r0, [pc, #228]	; (8001544 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0x150>)
 800145e:	f006 fea5 	bl	80081ac <iprintf>
    if (index1 != -1 && index2 != -1)
 8001462:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001466:	d002      	beq.n	800146e <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0x7a>
 8001468:	f1b4 3fff 	cmp.w	r4, #4294967295
 800146c:	d111      	bne.n	8001492 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0x9e>
    {
      index1 += begin.length();
      data = data_tmp.substring(index1, index2);
      return true;
    }
    else if (index2 != -1)
 800146e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001472:	d01e      	beq.n	80014b2 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0xbe>
    {
      data = data_tmp.substring(0, index2);
 8001474:	4623      	mov	r3, r4
 8001476:	2200      	movs	r2, #0
 8001478:	a901      	add	r1, sp, #4
 800147a:	a80d      	add	r0, sp, #52	; 0x34
 800147c:	f000 fdf8 	bl	8002070 <_ZNK6String9substringEjj>
 8001480:	a90d      	add	r1, sp, #52	; 0x34
 8001482:	4640      	mov	r0, r8
 8001484:	f000 fd73 	bl	8001f6e <_ZN6StringaSEOS_>
 8001488:	a80d      	add	r0, sp, #52	; 0x34
 800148a:	f000 fcca 	bl	8001e22 <_ZN6StringD1Ev>
      return true;
 800148e:	2401      	movs	r4, #1
 8001490:	e032      	b.n	80014f8 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0x104>
	inline unsigned int length(void) const {return len;}
 8001492:	68b2      	ldr	r2, [r6, #8]
      data = data_tmp.substring(index1, index2);
 8001494:	4623      	mov	r3, r4
 8001496:	442a      	add	r2, r5
 8001498:	a901      	add	r1, sp, #4
 800149a:	a80a      	add	r0, sp, #40	; 0x28
 800149c:	f000 fde8 	bl	8002070 <_ZNK6String9substringEjj>
 80014a0:	a90a      	add	r1, sp, #40	; 0x28
 80014a2:	4640      	mov	r0, r8
 80014a4:	f000 fd63 	bl	8001f6e <_ZN6StringaSEOS_>
 80014a8:	a80a      	add	r0, sp, #40	; 0x28
 80014aa:	f000 fcba 	bl	8001e22 <_ZN6StringD1Ev>
      return true;
 80014ae:	2401      	movs	r4, #1
 80014b0:	e022      	b.n	80014f8 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0x104>
    }

    index1 = data.indexOf("\r\n\r\nOK");
 80014b2:	4925      	ldr	r1, [pc, #148]	; (8001548 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0x154>)
 80014b4:	a810      	add	r0, sp, #64	; 0x40
 80014b6:	f000 fcfd 	bl	8001eb4 <_ZN6StringC1EPKc>
 80014ba:	a910      	add	r1, sp, #64	; 0x40
 80014bc:	4640      	mov	r0, r8
 80014be:	f000 fdd2 	bl	8002066 <_ZNK6String7indexOfERKS_>
 80014c2:	4604      	mov	r4, r0
 80014c4:	a810      	add	r0, sp, #64	; 0x40
 80014c6:	f000 fcac 	bl	8001e22 <_ZN6StringD1Ev>

    if (index1 != -1)
 80014ca:	f1b4 3fff 	cmp.w	r4, #4294967295
 80014ce:	d11a      	bne.n	8001506 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0x112>
    {
      data = data_tmp.substring(0, index1);
    }

    index1 = data.indexOf("\r\nOK");
 80014d0:	491e      	ldr	r1, [pc, #120]	; (800154c <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0x158>)
 80014d2:	a816      	add	r0, sp, #88	; 0x58
 80014d4:	f000 fcee 	bl	8001eb4 <_ZN6StringC1EPKc>
 80014d8:	a916      	add	r1, sp, #88	; 0x58
 80014da:	4640      	mov	r0, r8
 80014dc:	f000 fdc3 	bl	8002066 <_ZNK6String7indexOfERKS_>
 80014e0:	4604      	mov	r4, r0
 80014e2:	a816      	add	r0, sp, #88	; 0x58
 80014e4:	f000 fc9d 	bl	8001e22 <_ZN6StringD1Ev>

    if (index1 != -1)
 80014e8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80014ec:	d119      	bne.n	8001522 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0x12e>
    {
      data = data_tmp.substring(0, index1);
    }
  }

  data = data_tmp;
 80014ee:	a901      	add	r1, sp, #4
 80014f0:	4640      	mov	r0, r8
 80014f2:	f000 fd23 	bl	8001f3c <_ZN6StringaSERKS_>

  return false;
 80014f6:	2400      	movs	r4, #0
  String data_tmp;
 80014f8:	a801      	add	r0, sp, #4
 80014fa:	f000 fc92 	bl	8001e22 <_ZN6StringD1Ev>
}
 80014fe:	4620      	mov	r0, r4
 8001500:	b01c      	add	sp, #112	; 0x70
 8001502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      data = data_tmp.substring(0, index1);
 8001506:	4623      	mov	r3, r4
 8001508:	2200      	movs	r2, #0
 800150a:	a901      	add	r1, sp, #4
 800150c:	a813      	add	r0, sp, #76	; 0x4c
 800150e:	f000 fdaf 	bl	8002070 <_ZNK6String9substringEjj>
 8001512:	a913      	add	r1, sp, #76	; 0x4c
 8001514:	4640      	mov	r0, r8
 8001516:	f000 fd2a 	bl	8001f6e <_ZN6StringaSEOS_>
 800151a:	a813      	add	r0, sp, #76	; 0x4c
 800151c:	f000 fc81 	bl	8001e22 <_ZN6StringD1Ev>
 8001520:	e7d6      	b.n	80014d0 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0xdc>
      data = data_tmp.substring(0, index1);
 8001522:	4623      	mov	r3, r4
 8001524:	2200      	movs	r2, #0
 8001526:	a901      	add	r1, sp, #4
 8001528:	a819      	add	r0, sp, #100	; 0x64
 800152a:	f000 fda1 	bl	8002070 <_ZNK6String9substringEjj>
 800152e:	a919      	add	r1, sp, #100	; 0x64
 8001530:	4640      	mov	r0, r8
 8001532:	f000 fd1c 	bl	8001f6e <_ZN6StringaSEOS_>
 8001536:	a819      	add	r0, sp, #100	; 0x64
 8001538:	f000 fc73 	bl	8001e22 <_ZN6StringD1Ev>
 800153c:	e7d7      	b.n	80014ee <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m+0xfa>
 800153e:	bf00      	nop
 8001540:	0800a218 	.word	0x0800a218
 8001544:	08009c74 	.word	0x08009c74
 8001548:	08009b3c 	.word	0x08009b3c
 800154c:	08009b44 	.word	0x08009b44

08001550 <_ZN7ESP82666eATGMRER6String>:
}

////////////////////////////////////////

bool ESP8266::eATGMR(String &version)
{
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	b08e      	sub	sp, #56	; 0x38
 8001554:	4604      	mov	r4, r0
 8001556:	460d      	mov	r5, r1
  rx_empty();
 8001558:	f7ff fee4 	bl	8001324 <_ZN7ESP82668rx_emptyEv>
  delay(3000);
 800155c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001560:	f7ff fe00 	bl	8001164 <_Z5delaym>
  m_puart->println(F("AT+GMR"));
 8001564:	6826      	ldr	r6, [r4, #0]
 8001566:	4917      	ldr	r1, [pc, #92]	; (80015c4 <_ZN7ESP82666eATGMRER6String+0x74>)
 8001568:	a802      	add	r0, sp, #8
 800156a:	f000 fca3 	bl	8001eb4 <_ZN6StringC1EPKc>
 800156e:	a902      	add	r1, sp, #8
 8001570:	4630      	mov	r0, r6
 8001572:	f7ff fe9f 	bl	80012b4 <_ZN6Serial7printlnE6String>
 8001576:	a802      	add	r0, sp, #8
 8001578:	f000 fc53 	bl	8001e22 <_ZN6StringD1Ev>

  AT_LIB_LOGDEBUG(F("AT+GMR"));
 // return 0;
  return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", version, 10000);
 800157c:	4912      	ldr	r1, [pc, #72]	; (80015c8 <_ZN7ESP82666eATGMRER6String+0x78>)
 800157e:	a805      	add	r0, sp, #20
 8001580:	f000 fc98 	bl	8001eb4 <_ZN6StringC1EPKc>
 8001584:	4911      	ldr	r1, [pc, #68]	; (80015cc <_ZN7ESP82666eATGMRER6String+0x7c>)
 8001586:	a808      	add	r0, sp, #32
 8001588:	f000 fc94 	bl	8001eb4 <_ZN6StringC1EPKc>
 800158c:	4910      	ldr	r1, [pc, #64]	; (80015d0 <_ZN7ESP82666eATGMRER6String+0x80>)
 800158e:	a80b      	add	r0, sp, #44	; 0x2c
 8001590:	f000 fc90 	bl	8001eb4 <_ZN6StringC1EPKc>
 8001594:	f242 7310 	movw	r3, #10000	; 0x2710
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	9500      	str	r5, [sp, #0]
 800159c:	ab0b      	add	r3, sp, #44	; 0x2c
 800159e:	aa08      	add	r2, sp, #32
 80015a0:	a905      	add	r1, sp, #20
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff ff26 	bl	80013f4 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m>
 80015a8:	4604      	mov	r4, r0
 80015aa:	a80b      	add	r0, sp, #44	; 0x2c
 80015ac:	f000 fc39 	bl	8001e22 <_ZN6StringD1Ev>
 80015b0:	a808      	add	r0, sp, #32
 80015b2:	f000 fc36 	bl	8001e22 <_ZN6StringD1Ev>
 80015b6:	a805      	add	r0, sp, #20
 80015b8:	f000 fc33 	bl	8001e22 <_ZN6StringD1Ev>
}
 80015bc:	4620      	mov	r0, r4
 80015be:	b00e      	add	sp, #56	; 0x38
 80015c0:	bd70      	pop	{r4, r5, r6, pc}
 80015c2:	bf00      	nop
 80015c4:	08009b50 	.word	0x08009b50
 80015c8:	08009b40 	.word	0x08009b40
 80015cc:	08009b58 	.word	0x08009b58
 80015d0:	08009b3c 	.word	0x08009b3c

080015d4 <_ZN7ESP826610getVersionEv>:
{
 80015d4:	b538      	push	{r3, r4, r5, lr}
 80015d6:	4604      	mov	r4, r0
 80015d8:	460d      	mov	r5, r1
  String version;
 80015da:	4904      	ldr	r1, [pc, #16]	; (80015ec <_ZN7ESP826610getVersionEv+0x18>)
 80015dc:	f000 fc6a 	bl	8001eb4 <_ZN6StringC1EPKc>
  eATGMR(version);
 80015e0:	4621      	mov	r1, r4
 80015e2:	4628      	mov	r0, r5
 80015e4:	f7ff ffb4 	bl	8001550 <_ZN7ESP82666eATGMRER6String>
}
 80015e8:	4620      	mov	r0, r4
 80015ea:	bd38      	pop	{r3, r4, r5, pc}
 80015ec:	0800a218 	.word	0x0800a218

080015f0 <ESP32_getVersion>:
{
 80015f0:	b510      	push	{r4, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
	String sVersion;
 80015f4:	4913      	ldr	r1, [pc, #76]	; (8001644 <ESP32_getVersion+0x54>)
 80015f6:	a801      	add	r0, sp, #4
 80015f8:	f000 fc5c 	bl	8001eb4 <_ZN6StringC1EPKc>
	sVersion = myESP8266.getVersion();
 80015fc:	4912      	ldr	r1, [pc, #72]	; (8001648 <ESP32_getVersion+0x58>)
 80015fe:	a804      	add	r0, sp, #16
 8001600:	f7ff ffe8 	bl	80015d4 <_ZN7ESP826610getVersionEv>
 8001604:	a904      	add	r1, sp, #16
 8001606:	a801      	add	r0, sp, #4
 8001608:	f000 fcb1 	bl	8001f6e <_ZN6StringaSEOS_>
 800160c:	a804      	add	r0, sp, #16
 800160e:	f000 fc08 	bl	8001e22 <_ZN6StringD1Ev>
		{ getBytes((unsigned char *)buf, bufsize, index); }
 8001612:	4c0e      	ldr	r4, [pc, #56]	; (800164c <ESP32_getVersion+0x5c>)
 8001614:	2300      	movs	r3, #0
 8001616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161a:	4621      	mov	r1, r4
 800161c:	a801      	add	r0, sp, #4
 800161e:	f000 fce6 	bl	8001fee <_ZNK6String8getBytesEPhjj>
	myDebug.println(sVersion);
 8001622:	a901      	add	r1, sp, #4
 8001624:	a807      	add	r0, sp, #28
 8001626:	f000 fc98 	bl	8001f5a <_ZN6StringC1ERKS_>
 800162a:	a907      	add	r1, sp, #28
 800162c:	4808      	ldr	r0, [pc, #32]	; (8001650 <ESP32_getVersion+0x60>)
 800162e:	f7ff fe41 	bl	80012b4 <_ZN6Serial7printlnE6String>
 8001632:	a807      	add	r0, sp, #28
 8001634:	f000 fbf5 	bl	8001e22 <_ZN6StringD1Ev>
	String sVersion;
 8001638:	a801      	add	r0, sp, #4
 800163a:	f000 fbf2 	bl	8001e22 <_ZN6StringD1Ev>
}
 800163e:	4620      	mov	r0, r4
 8001640:	b00a      	add	sp, #40	; 0x28
 8001642:	bd10      	pop	{r4, pc}
 8001644:	0800a218 	.word	0x0800a218
 8001648:	20000e60 	.word	0x20000e60
 800164c:	20000d50 	.word	0x20000d50
 8001650:	20000e58 	.word	0x20000e58

08001654 <_ZN7ESP82668eATCWLAPER6String>:

////////////////////////////////////////

// Lists the Available APs
bool ESP8266::eATCWLAP(String &list)
{
 8001654:	b570      	push	{r4, r5, r6, lr}
 8001656:	b092      	sub	sp, #72	; 0x48
 8001658:	4604      	mov	r4, r0
 800165a:	460d      	mov	r5, r1
  String data;
 800165c:	491c      	ldr	r1, [pc, #112]	; (80016d0 <_ZN7ESP82668eATCWLAPER6String+0x7c>)
 800165e:	a803      	add	r0, sp, #12
 8001660:	f000 fc28 	bl	8001eb4 <_ZN6StringC1EPKc>
  rx_empty();
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fe5d 	bl	8001324 <_ZN7ESP82668rx_emptyEv>
  m_puart->println(F("AT+CWLAP"));
 800166a:	6826      	ldr	r6, [r4, #0]
 800166c:	4919      	ldr	r1, [pc, #100]	; (80016d4 <_ZN7ESP82668eATCWLAPER6String+0x80>)
 800166e:	a806      	add	r0, sp, #24
 8001670:	f000 fc20 	bl	8001eb4 <_ZN6StringC1EPKc>
 8001674:	a906      	add	r1, sp, #24
 8001676:	4630      	mov	r0, r6
 8001678:	f7ff fe1c 	bl	80012b4 <_ZN6Serial7printlnE6String>
 800167c:	a806      	add	r0, sp, #24
 800167e:	f000 fbd0 	bl	8001e22 <_ZN6StringD1Ev>

  AT_LIB_LOGDEBUG(F("AT+CWLAP"));

  return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", list, 15000);
 8001682:	4915      	ldr	r1, [pc, #84]	; (80016d8 <_ZN7ESP82668eATCWLAPER6String+0x84>)
 8001684:	a809      	add	r0, sp, #36	; 0x24
 8001686:	f000 fc15 	bl	8001eb4 <_ZN6StringC1EPKc>
 800168a:	4914      	ldr	r1, [pc, #80]	; (80016dc <_ZN7ESP82668eATCWLAPER6String+0x88>)
 800168c:	a80c      	add	r0, sp, #48	; 0x30
 800168e:	f000 fc11 	bl	8001eb4 <_ZN6StringC1EPKc>
 8001692:	4913      	ldr	r1, [pc, #76]	; (80016e0 <_ZN7ESP82668eATCWLAPER6String+0x8c>)
 8001694:	a80f      	add	r0, sp, #60	; 0x3c
 8001696:	f000 fc0d 	bl	8001eb4 <_ZN6StringC1EPKc>
 800169a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	9500      	str	r5, [sp, #0]
 80016a2:	ab0f      	add	r3, sp, #60	; 0x3c
 80016a4:	aa0c      	add	r2, sp, #48	; 0x30
 80016a6:	a909      	add	r1, sp, #36	; 0x24
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff fea3 	bl	80013f4 <_ZN7ESP826617recvFindAndFilterE6StringS0_S0_RS0_m>
 80016ae:	4604      	mov	r4, r0
 80016b0:	a80f      	add	r0, sp, #60	; 0x3c
 80016b2:	f000 fbb6 	bl	8001e22 <_ZN6StringD1Ev>
 80016b6:	a80c      	add	r0, sp, #48	; 0x30
 80016b8:	f000 fbb3 	bl	8001e22 <_ZN6StringD1Ev>
 80016bc:	a809      	add	r0, sp, #36	; 0x24
 80016be:	f000 fbb0 	bl	8001e22 <_ZN6StringD1Ev>
  String data;
 80016c2:	a803      	add	r0, sp, #12
 80016c4:	f000 fbad 	bl	8001e22 <_ZN6StringD1Ev>
}
 80016c8:	4620      	mov	r0, r4
 80016ca:	b012      	add	sp, #72	; 0x48
 80016cc:	bd70      	pop	{r4, r5, r6, pc}
 80016ce:	bf00      	nop
 80016d0:	0800a218 	.word	0x0800a218
 80016d4:	08009bc0 	.word	0x08009bc0
 80016d8:	08009b40 	.word	0x08009b40
 80016dc:	08009b58 	.word	0x08009b58
 80016e0:	08009b3c 	.word	0x08009b3c

080016e4 <_ZN7ESP82669getAPListEv>:
{
 80016e4:	b538      	push	{r3, r4, r5, lr}
 80016e6:	4604      	mov	r4, r0
 80016e8:	460d      	mov	r5, r1
  String list;
 80016ea:	4904      	ldr	r1, [pc, #16]	; (80016fc <_ZN7ESP82669getAPListEv+0x18>)
 80016ec:	f000 fbe2 	bl	8001eb4 <_ZN6StringC1EPKc>
  eATCWLAP(list);
 80016f0:	4621      	mov	r1, r4
 80016f2:	4628      	mov	r0, r5
 80016f4:	f7ff ffae 	bl	8001654 <_ZN7ESP82668eATCWLAPER6String>
}
 80016f8:	4620      	mov	r0, r4
 80016fa:	bd38      	pop	{r3, r4, r5, pc}
 80016fc:	0800a218 	.word	0x0800a218

08001700 <ESP32_apList>:
{
 8001700:	b510      	push	{r4, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
	String sApList;
 8001704:	4913      	ldr	r1, [pc, #76]	; (8001754 <ESP32_apList+0x54>)
 8001706:	a801      	add	r0, sp, #4
 8001708:	f000 fbd4 	bl	8001eb4 <_ZN6StringC1EPKc>
	sApList = myESP8266.getAPList();
 800170c:	4912      	ldr	r1, [pc, #72]	; (8001758 <ESP32_apList+0x58>)
 800170e:	a804      	add	r0, sp, #16
 8001710:	f7ff ffe8 	bl	80016e4 <_ZN7ESP82669getAPListEv>
 8001714:	a904      	add	r1, sp, #16
 8001716:	a801      	add	r0, sp, #4
 8001718:	f000 fc29 	bl	8001f6e <_ZN6StringaSEOS_>
 800171c:	a804      	add	r0, sp, #16
 800171e:	f000 fb80 	bl	8001e22 <_ZN6StringD1Ev>
 8001722:	4c0e      	ldr	r4, [pc, #56]	; (800175c <ESP32_apList+0x5c>)
 8001724:	2300      	movs	r3, #0
 8001726:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800172a:	4621      	mov	r1, r4
 800172c:	a801      	add	r0, sp, #4
 800172e:	f000 fc5e 	bl	8001fee <_ZNK6String8getBytesEPhjj>
	myDebug.println(sApList);
 8001732:	a901      	add	r1, sp, #4
 8001734:	a807      	add	r0, sp, #28
 8001736:	f000 fc10 	bl	8001f5a <_ZN6StringC1ERKS_>
 800173a:	a907      	add	r1, sp, #28
 800173c:	4808      	ldr	r0, [pc, #32]	; (8001760 <ESP32_apList+0x60>)
 800173e:	f7ff fdb9 	bl	80012b4 <_ZN6Serial7printlnE6String>
 8001742:	a807      	add	r0, sp, #28
 8001744:	f000 fb6d 	bl	8001e22 <_ZN6StringD1Ev>
	String sApList;
 8001748:	a801      	add	r0, sp, #4
 800174a:	f000 fb6a 	bl	8001e22 <_ZN6StringD1Ev>
}
 800174e:	4620      	mov	r0, r4
 8001750:	b00a      	add	sp, #40	; 0x28
 8001752:	bd10      	pop	{r4, pc}
 8001754:	0800a218 	.word	0x0800a218
 8001758:	20000e60 	.word	0x20000e60
 800175c:	20000150 	.word	0x20000150
 8001760:	20000e58 	.word	0x20000e58

08001764 <_GLOBAL__sub_I_ESP32_version>:
}
 8001764:	b508      	push	{r3, lr}
 8001766:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fd7c 	bl	8001268 <_Z41__static_initialization_and_destruction_0ii>
 8001770:	bd08      	pop	{r3, pc}
	...

08001774 <http_action>:
extern uart_rx_queue_t stdin_uart;
extern bool ESP8266_createTCP_mux(uint8_t mux_id, uint8_t * addr, uint32_t port);
extern bool ESP8266_send_mux(uint8_t mux_id, const uint8_t *buffer, uint32_t len);
extern bool ESP8266_releaseTCP_mux(uint8_t mux_id);
void http_action()
{
 8001774:	b530      	push	{r4, r5, lr}
 8001776:	b0b1      	sub	sp, #196	; 0xc4
	uint8_t buffer[128] = {0};
 8001778:	2400      	movs	r4, #0
 800177a:	9410      	str	r4, [sp, #64]	; 0x40
 800177c:	227c      	movs	r2, #124	; 0x7c
 800177e:	4621      	mov	r1, r4
 8001780:	a811      	add	r0, sp, #68	; 0x44
 8001782:	f006 fc61 	bl	8008048 <memset>
	uint8_t mux_id = 0;
 8001786:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f

	printf("Create TCP ");
 800178a:	4831      	ldr	r0, [pc, #196]	; (8001850 <http_action+0xdc>)
 800178c:	f006 fd0e 	bl	80081ac <iprintf>
	if(ESP8266_createTCP_mux(mux_id, HOST_NAME, HOST_PORT ))
 8001790:	2250      	movs	r2, #80	; 0x50
 8001792:	4930      	ldr	r1, [pc, #192]	; (8001854 <http_action+0xe0>)
 8001794:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
 8001798:	f7ff fad4 	bl	8000d44 <ESP8266_createTCP_mux>
 800179c:	2800      	cmp	r0, #0
 800179e:	d039      	beq.n	8001814 <http_action+0xa0>
	{
		printf("OK\n");
 80017a0:	482d      	ldr	r0, [pc, #180]	; (8001858 <http_action+0xe4>)
 80017a2:	f006 fd9f 	bl	80082e4 <puts>
	}
	else
	{
		printf("failed\n");
	}
	char hello[] = "GET / HTTP/1.1\r\nHost: www.yahoo.com\r\nConnection: close\r\n\r\n";
 80017a6:	ac01      	add	r4, sp, #4
 80017a8:	4d2c      	ldr	r5, [pc, #176]	; (800185c <http_action+0xe8>)
 80017aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017ba:	c403      	stmia	r4!, {r0, r1}
 80017bc:	f824 2b02 	strh.w	r2, [r4], #2
 80017c0:	0c12      	lsrs	r2, r2, #16
 80017c2:	7022      	strb	r2, [r4, #0]
    if (ESP8266_send_mux(mux_id, hello, strlen(hello)))
 80017c4:	a801      	add	r0, sp, #4
 80017c6:	f7fe fd2d 	bl	8000224 <strlen>
 80017ca:	4602      	mov	r2, r0
 80017cc:	a901      	add	r1, sp, #4
 80017ce:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
 80017d2:	f7ff fb01 	bl	8000dd8 <ESP8266_send_mux>
 80017d6:	b308      	cbz	r0, 800181c <http_action+0xa8>
    {
    	printf("Send OK\n");
 80017d8:	4821      	ldr	r0, [pc, #132]	; (8001860 <http_action+0xec>)
 80017da:	f006 fd83 	bl	80082e4 <puts>
    else
    {
    	printf("Send  failed\n");
    }

    uint32_t len = ESP8266_recv_mux_p(&mux_id, buffer, sizeof(buffer), 10000);
 80017de:	f242 7310 	movw	r3, #10000	; 0x2710
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	a910      	add	r1, sp, #64	; 0x40
 80017e6:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
 80017ea:	f7ff fcb0 	bl	800114e <ESP8266_recv_mux_p>

    if (len > 0)
 80017ee:	4605      	mov	r5, r0
 80017f0:	b9c0      	cbnz	r0, 8001824 <http_action+0xb0>
    		printf("%c",(char)buffer[i]);
    	}

    	printf("]\n");
    }
    printf("Release TCP ");
 80017f2:	481c      	ldr	r0, [pc, #112]	; (8001864 <http_action+0xf0>)
 80017f4:	f006 fcda 	bl	80081ac <iprintf>
    if (ESP8266_releaseTCP_mux(mux_id))
 80017f8:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
 80017fc:	f7ff fb14 	bl	8000e28 <ESP8266_releaseTCP_mux>
 8001800:	b310      	cbz	r0, 8001848 <http_action+0xd4>
    {
    	printf(" OK\n");
 8001802:	4819      	ldr	r0, [pc, #100]	; (8001868 <http_action+0xf4>)
 8001804:	f006 fd6e 	bl	80082e4 <puts>
    else
    {
    	printf(" failed\n");
    }

    HAL_Delay(5000);
 8001808:	f241 3088 	movw	r0, #5000	; 0x1388
 800180c:	f002 f8fa 	bl	8003a04 <HAL_Delay>
}
 8001810:	b031      	add	sp, #196	; 0xc4
 8001812:	bd30      	pop	{r4, r5, pc}
		printf("failed\n");
 8001814:	4815      	ldr	r0, [pc, #84]	; (800186c <http_action+0xf8>)
 8001816:	f006 fd65 	bl	80082e4 <puts>
 800181a:	e7c4      	b.n	80017a6 <http_action+0x32>
    	printf("Send  failed\n");
 800181c:	4814      	ldr	r0, [pc, #80]	; (8001870 <http_action+0xfc>)
 800181e:	f006 fd61 	bl	80082e4 <puts>
 8001822:	e7dc      	b.n	80017de <http_action+0x6a>
    	printf("Received:[");
 8001824:	4813      	ldr	r0, [pc, #76]	; (8001874 <http_action+0x100>)
 8001826:	f006 fcc1 	bl	80081ac <iprintf>
    	for (uint32_t i = 0; i < len; i++)
 800182a:	2400      	movs	r4, #0
 800182c:	42ac      	cmp	r4, r5
 800182e:	d207      	bcs.n	8001840 <http_action+0xcc>
    		printf("%c",(char)buffer[i]);
 8001830:	ab30      	add	r3, sp, #192	; 0xc0
 8001832:	4423      	add	r3, r4
 8001834:	f813 0c80 	ldrb.w	r0, [r3, #-128]
 8001838:	f006 fcd0 	bl	80081dc <putchar>
    	for (uint32_t i = 0; i < len; i++)
 800183c:	3401      	adds	r4, #1
 800183e:	e7f5      	b.n	800182c <http_action+0xb8>
    	printf("]\n");
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <http_action+0x104>)
 8001842:	f006 fd4f 	bl	80082e4 <puts>
 8001846:	e7d4      	b.n	80017f2 <http_action+0x7e>
    	printf(" failed\n");
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <http_action+0x108>)
 800184a:	f006 fd4b 	bl	80082e4 <puts>
 800184e:	e7db      	b.n	8001808 <http_action+0x94>
 8001850:	08009c8c 	.word	0x08009c8c
 8001854:	08009c98 	.word	0x08009c98
 8001858:	08009b40 	.word	0x08009b40
 800185c:	08009ce0 	.word	0x08009ce0
 8001860:	08009ca8 	.word	0x08009ca8
 8001864:	08009cd0 	.word	0x08009cd0
 8001868:	08009c1c 	.word	0x08009c1c
 800186c:	08009d54 	.word	0x08009d54
 8001870:	08009cb0 	.word	0x08009cb0
 8001874:	08009cc0 	.word	0x08009cc0
 8001878:	08009ccc 	.word	0x08009ccc
 800187c:	08009e58 	.word	0x08009e58

08001880 <httpclient_loop>:
void httpclient_loop()
{
 8001880:	b508      	push	{r3, lr}
	while(1)
	{
		if(is_available(&stdin_uart)) break;
 8001882:	4804      	ldr	r0, [pc, #16]	; (8001894 <httpclient_loop+0x14>)
 8001884:	f001 f85b 	bl	800293e <is_available>
 8001888:	b910      	cbnz	r0, 8001890 <httpclient_loop+0x10>
		http_action();
 800188a:	f7ff ff73 	bl	8001774 <http_action>
		if(is_available(&stdin_uart)) break;
 800188e:	e7f8      	b.n	8001882 <httpclient_loop+0x2>

	}
}
 8001890:	bd08      	pop	{r3, pc}
 8001892:	bf00      	nop
 8001894:	20000050 	.word	0x20000050

08001898 <httpget_init>:
{
 8001898:	b508      	push	{r3, lr}
	if(ESP8266_setOprToStationSoftAP(DEFAULT_PATTERN,DEFAULT_PATTERN))
 800189a:	2103      	movs	r1, #3
 800189c:	4608      	mov	r0, r1
 800189e:	f7ff f961 	bl	8000b64 <ESP8266_setOprToStationSoftAP>
 80018a2:	b160      	cbz	r0, 80018be <httpget_init+0x26>
		printf("Set AP/STA Mode OK\n");
 80018a4:	4813      	ldr	r0, [pc, #76]	; (80018f4 <httpget_init+0x5c>)
 80018a6:	f006 fd1d 	bl	80082e4 <puts>
	if(ESP8266_joinAP(SSID,PASSWORD, DEFAULT_PATTERN ))
 80018aa:	2203      	movs	r2, #3
 80018ac:	4912      	ldr	r1, [pc, #72]	; (80018f8 <httpget_init+0x60>)
 80018ae:	4813      	ldr	r0, [pc, #76]	; (80018fc <httpget_init+0x64>)
 80018b0:	f7ff f9aa 	bl	8000c08 <ESP8266_joinAP>
 80018b4:	b938      	cbnz	r0, 80018c6 <httpget_init+0x2e>
		printf("Connect to WiFi failed \n");
 80018b6:	4812      	ldr	r0, [pc, #72]	; (8001900 <httpget_init+0x68>)
 80018b8:	f006 fd14 	bl	80082e4 <puts>
 80018bc:	e00c      	b.n	80018d8 <httpget_init+0x40>
		printf("Set AP/STA Mode failed\n");
 80018be:	4811      	ldr	r0, [pc, #68]	; (8001904 <httpget_init+0x6c>)
 80018c0:	f006 fd10 	bl	80082e4 <puts>
		return -1;
 80018c4:	e010      	b.n	80018e8 <httpget_init+0x50>
		printf("Connect to WiFi ok\n");
 80018c6:	4810      	ldr	r0, [pc, #64]	; (8001908 <httpget_init+0x70>)
 80018c8:	f006 fd0c 	bl	80082e4 <puts>
		printf("IP addr = %s\n",ESP8266_getLocalIP());
 80018cc:	f7ff fad4 	bl	8000e78 <ESP8266_getLocalIP>
 80018d0:	4601      	mov	r1, r0
 80018d2:	480e      	ldr	r0, [pc, #56]	; (800190c <httpget_init+0x74>)
 80018d4:	f006 fc6a 	bl	80081ac <iprintf>
	if(ESP8266_enableMUX())
 80018d8:	f7ff fafc 	bl	8000ed4 <ESP8266_enableMUX>
 80018dc:	b128      	cbz	r0, 80018ea <httpget_init+0x52>
		printf("enableMux OK\n");
 80018de:	480c      	ldr	r0, [pc, #48]	; (8001910 <httpget_init+0x78>)
 80018e0:	f006 fd00 	bl	80082e4 <puts>
	httpclient_loop();
 80018e4:	f7ff ffcc 	bl	8001880 <httpclient_loop>
}
 80018e8:	bd08      	pop	{r3, pc}
		printf("enableMux failed\n");
 80018ea:	480a      	ldr	r0, [pc, #40]	; (8001914 <httpget_init+0x7c>)
 80018ec:	f006 fcfa 	bl	80082e4 <puts>
		return -1;
 80018f0:	e7fa      	b.n	80018e8 <httpget_init+0x50>
 80018f2:	bf00      	nop
 80018f4:	08009d1c 	.word	0x08009d1c
 80018f8:	08009d30 	.word	0x08009d30
 80018fc:	08009d3c 	.word	0x08009d3c
 8001900:	08009d80 	.word	0x08009d80
 8001904:	08009d44 	.word	0x08009d44
 8001908:	08009d5c 	.word	0x08009d5c
 800190c:	08009d70 	.word	0x08009d70
 8001910:	08009d98 	.word	0x08009d98
 8001914:	08009da8 	.word	0x08009da8

08001918 <client_loop>:
extern uart_rx_queue_t stdin_uart;
extern bool ESP8266_createTCP_mux(uint8_t mux_id, uint8_t * addr, uint32_t port);
extern bool ESP8266_send_mux(uint8_t mux_id, const uint8_t *buffer, uint32_t len);
extern bool ESP8266_releaseTCP_mux(uint8_t mux_id);
void client_loop()
{
 8001918:	b530      	push	{r4, r5, lr}
 800191a:	b0ab      	sub	sp, #172	; 0xac
	uint8_t buffer[128] = {0};
 800191c:	2400      	movs	r4, #0
 800191e:	940a      	str	r4, [sp, #40]	; 0x28
 8001920:	227c      	movs	r2, #124	; 0x7c
 8001922:	4621      	mov	r1, r4
 8001924:	a80b      	add	r0, sp, #44	; 0x2c
 8001926:	f006 fb8f 	bl	8008048 <memset>
	uint8_t mux_id = 0;
 800192a:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27

	printf("Create TCP ");
 800192e:	482e      	ldr	r0, [pc, #184]	; (80019e8 <client_loop+0xd0>)
 8001930:	f006 fc3c 	bl	80081ac <iprintf>
	if(ESP8266_createTCP_mux(mux_id, HOST_NAME, HOST_PORT ))
 8001934:	f641 7290 	movw	r2, #8080	; 0x1f90
 8001938:	492c      	ldr	r1, [pc, #176]	; (80019ec <client_loop+0xd4>)
 800193a:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 800193e:	f7ff fa01 	bl	8000d44 <ESP8266_createTCP_mux>
 8001942:	2800      	cmp	r0, #0
 8001944:	d032      	beq.n	80019ac <client_loop+0x94>
	{
		printf("OK\n");
 8001946:	482a      	ldr	r0, [pc, #168]	; (80019f0 <client_loop+0xd8>)
 8001948:	f006 fccc 	bl	80082e4 <puts>
	}
	else
	{
		printf("failed\n");
	}
	char hello[] = "Hello, this is jcnet tcp client !";
 800194c:	ac01      	add	r4, sp, #4
 800194e:	4d29      	ldr	r5, [pc, #164]	; (80019f4 <client_loop+0xdc>)
 8001950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	8023      	strh	r3, [r4, #0]
    if (ESP8266_send_mux(mux_id, hello, strlen(hello)))
 800195c:	a801      	add	r0, sp, #4
 800195e:	f7fe fc61 	bl	8000224 <strlen>
 8001962:	4602      	mov	r2, r0
 8001964:	a901      	add	r1, sp, #4
 8001966:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 800196a:	f7ff fa35 	bl	8000dd8 <ESP8266_send_mux>
 800196e:	b308      	cbz	r0, 80019b4 <client_loop+0x9c>
    {
    	printf("Send OK\n");
 8001970:	4821      	ldr	r0, [pc, #132]	; (80019f8 <client_loop+0xe0>)
 8001972:	f006 fcb7 	bl	80082e4 <puts>
    else
    {
    	printf("Send  failed\n");
    }

    uint32_t len = ESP8266_recv_mux_p(&mux_id, buffer, sizeof(buffer), 10000);
 8001976:	f242 7310 	movw	r3, #10000	; 0x2710
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	a90a      	add	r1, sp, #40	; 0x28
 800197e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 8001982:	f7ff fbe4 	bl	800114e <ESP8266_recv_mux_p>

    if (len > 0)
 8001986:	4605      	mov	r5, r0
 8001988:	b9c0      	cbnz	r0, 80019bc <client_loop+0xa4>
    		printf("%c",(char)buffer[i]);
    	}

    	printf("]\n");
    }
    printf("Release TCP ");
 800198a:	481c      	ldr	r0, [pc, #112]	; (80019fc <client_loop+0xe4>)
 800198c:	f006 fc0e 	bl	80081ac <iprintf>
    if (ESP8266_releaseTCP_mux(mux_id))
 8001990:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 8001994:	f7ff fa48 	bl	8000e28 <ESP8266_releaseTCP_mux>
 8001998:	b310      	cbz	r0, 80019e0 <client_loop+0xc8>
    {
    	printf(" OK\n");
 800199a:	4819      	ldr	r0, [pc, #100]	; (8001a00 <client_loop+0xe8>)
 800199c:	f006 fca2 	bl	80082e4 <puts>
    else
    {
    	printf(" failed\n");
    }

    HAL_Delay(5000);
 80019a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80019a4:	f002 f82e 	bl	8003a04 <HAL_Delay>
}
 80019a8:	b02b      	add	sp, #172	; 0xac
 80019aa:	bd30      	pop	{r4, r5, pc}
		printf("failed\n");
 80019ac:	4815      	ldr	r0, [pc, #84]	; (8001a04 <client_loop+0xec>)
 80019ae:	f006 fc99 	bl	80082e4 <puts>
 80019b2:	e7cb      	b.n	800194c <client_loop+0x34>
    	printf("Send  failed\n");
 80019b4:	4814      	ldr	r0, [pc, #80]	; (8001a08 <client_loop+0xf0>)
 80019b6:	f006 fc95 	bl	80082e4 <puts>
 80019ba:	e7dc      	b.n	8001976 <client_loop+0x5e>
    	printf("Received:[");
 80019bc:	4813      	ldr	r0, [pc, #76]	; (8001a0c <client_loop+0xf4>)
 80019be:	f006 fbf5 	bl	80081ac <iprintf>
    	for (uint32_t i = 0; i < len; i++)
 80019c2:	2400      	movs	r4, #0
 80019c4:	42ac      	cmp	r4, r5
 80019c6:	d207      	bcs.n	80019d8 <client_loop+0xc0>
    		printf("%c",(char)buffer[i]);
 80019c8:	ab2a      	add	r3, sp, #168	; 0xa8
 80019ca:	4423      	add	r3, r4
 80019cc:	f813 0c80 	ldrb.w	r0, [r3, #-128]
 80019d0:	f006 fc04 	bl	80081dc <putchar>
    	for (uint32_t i = 0; i < len; i++)
 80019d4:	3401      	adds	r4, #1
 80019d6:	e7f5      	b.n	80019c4 <client_loop+0xac>
    	printf("]\n");
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <client_loop+0xf8>)
 80019da:	f006 fc83 	bl	80082e4 <puts>
 80019de:	e7d4      	b.n	800198a <client_loop+0x72>
    	printf(" failed\n");
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <client_loop+0xfc>)
 80019e2:	f006 fc7f 	bl	80082e4 <puts>
 80019e6:	e7db      	b.n	80019a0 <client_loop+0x88>
 80019e8:	08009c8c 	.word	0x08009c8c
 80019ec:	08009dbc 	.word	0x08009dbc
 80019f0:	08009b40 	.word	0x08009b40
 80019f4:	08009dcc 	.word	0x08009dcc
 80019f8:	08009ca8 	.word	0x08009ca8
 80019fc:	08009cd0 	.word	0x08009cd0
 8001a00:	08009c1c 	.word	0x08009c1c
 8001a04:	08009d54 	.word	0x08009d54
 8001a08:	08009cb0 	.word	0x08009cb0
 8001a0c:	08009cc0 	.word	0x08009cc0
 8001a10:	08009ccc 	.word	0x08009ccc
 8001a14:	08009e58 	.word	0x08009e58

08001a18 <tcpclient_loop>:
void tcpclient_loop()
{
 8001a18:	b508      	push	{r3, lr}
	while(1)
	{
		if(is_available(&stdin_uart)) break;
 8001a1a:	4804      	ldr	r0, [pc, #16]	; (8001a2c <tcpclient_loop+0x14>)
 8001a1c:	f000 ff8f 	bl	800293e <is_available>
 8001a20:	b910      	cbnz	r0, 8001a28 <tcpclient_loop+0x10>
		client_loop();
 8001a22:	f7ff ff79 	bl	8001918 <client_loop>
		if(is_available(&stdin_uart)) break;
 8001a26:	e7f8      	b.n	8001a1a <tcpclient_loop+0x2>

	}
}
 8001a28:	bd08      	pop	{r3, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000050 	.word	0x20000050

08001a30 <tcpclient_init>:
{
 8001a30:	b508      	push	{r3, lr}
	if(ESP8266_setOprToStationSoftAP(DEFAULT_PATTERN,DEFAULT_PATTERN))
 8001a32:	2103      	movs	r1, #3
 8001a34:	4608      	mov	r0, r1
 8001a36:	f7ff f895 	bl	8000b64 <ESP8266_setOprToStationSoftAP>
 8001a3a:	b160      	cbz	r0, 8001a56 <tcpclient_init+0x26>
		printf("Set AP/STA Mode OK\n");
 8001a3c:	4813      	ldr	r0, [pc, #76]	; (8001a8c <tcpclient_init+0x5c>)
 8001a3e:	f006 fc51 	bl	80082e4 <puts>
	if(ESP8266_joinAP(SSID,PASSWORD, DEFAULT_PATTERN ))
 8001a42:	2203      	movs	r2, #3
 8001a44:	4912      	ldr	r1, [pc, #72]	; (8001a90 <tcpclient_init+0x60>)
 8001a46:	4813      	ldr	r0, [pc, #76]	; (8001a94 <tcpclient_init+0x64>)
 8001a48:	f7ff f8de 	bl	8000c08 <ESP8266_joinAP>
 8001a4c:	b938      	cbnz	r0, 8001a5e <tcpclient_init+0x2e>
		printf("Connect to WiFi failed \n");
 8001a4e:	4812      	ldr	r0, [pc, #72]	; (8001a98 <tcpclient_init+0x68>)
 8001a50:	f006 fc48 	bl	80082e4 <puts>
 8001a54:	e00c      	b.n	8001a70 <tcpclient_init+0x40>
		printf("Set AP/STA Mode failed\n");
 8001a56:	4811      	ldr	r0, [pc, #68]	; (8001a9c <tcpclient_init+0x6c>)
 8001a58:	f006 fc44 	bl	80082e4 <puts>
		return -1;
 8001a5c:	e010      	b.n	8001a80 <tcpclient_init+0x50>
		printf("Connect to WiFi ok\n");
 8001a5e:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <tcpclient_init+0x70>)
 8001a60:	f006 fc40 	bl	80082e4 <puts>
		printf("IP addr = %s\n",ESP8266_getLocalIP());
 8001a64:	f7ff fa08 	bl	8000e78 <ESP8266_getLocalIP>
 8001a68:	4601      	mov	r1, r0
 8001a6a:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <tcpclient_init+0x74>)
 8001a6c:	f006 fb9e 	bl	80081ac <iprintf>
	if(ESP8266_enableMUX())
 8001a70:	f7ff fa30 	bl	8000ed4 <ESP8266_enableMUX>
 8001a74:	b128      	cbz	r0, 8001a82 <tcpclient_init+0x52>
		printf("enableMux OK\n");
 8001a76:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <tcpclient_init+0x78>)
 8001a78:	f006 fc34 	bl	80082e4 <puts>
	tcpclient_loop();
 8001a7c:	f7ff ffcc 	bl	8001a18 <tcpclient_loop>
}
 8001a80:	bd08      	pop	{r3, pc}
		printf("enableMux failed\n");
 8001a82:	480a      	ldr	r0, [pc, #40]	; (8001aac <tcpclient_init+0x7c>)
 8001a84:	f006 fc2e 	bl	80082e4 <puts>
		return -1;
 8001a88:	e7fa      	b.n	8001a80 <tcpclient_init+0x50>
 8001a8a:	bf00      	nop
 8001a8c:	08009d1c 	.word	0x08009d1c
 8001a90:	08009d30 	.word	0x08009d30
 8001a94:	08009d3c 	.word	0x08009d3c
 8001a98:	08009d80 	.word	0x08009d80
 8001a9c:	08009d44 	.word	0x08009d44
 8001aa0:	08009d5c 	.word	0x08009d5c
 8001aa4:	08009d70 	.word	0x08009d70
 8001aa8:	08009d98 	.word	0x08009d98
 8001aac:	08009da8 	.word	0x08009da8

08001ab0 <loop>:
extern bool ESP8266_releaseTCP_mux(uint8_t mux_id);
extern uint32_t ESP8266_recv_mux_p(uint8_t *coming_mux_id, uint8_t *buffer, uint32_t buffer_size, uint32_t timeout);
extern bool ESP8266_send_mux(uint8_t mux_id, const uint8_t *buffer, uint32_t len);
uint8_t *ESP8266_getIPStatus();
void loop()
{
 8001ab0:	b530      	push	{r4, r5, lr}
 8001ab2:	b0a3      	sub	sp, #140	; 0x8c
  uint8_t buffer[128] = {0};
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	9102      	str	r1, [sp, #8]
 8001ab8:	227c      	movs	r2, #124	; 0x7c
 8001aba:	a803      	add	r0, sp, #12
 8001abc:	f006 fac4 	bl	8008048 <memset>
  uint8_t mux_id;

  uint32_t len = ESP8266_recv_mux_p(&mux_id, buffer, sizeof(buffer), 100);
 8001ac0:	2364      	movs	r3, #100	; 0x64
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	a902      	add	r1, sp, #8
 8001ac6:	f10d 0007 	add.w	r0, sp, #7
 8001aca:	f7ff fb40 	bl	800114e <ESP8266_recv_mux_p>

  if (len > 0)
 8001ace:	b908      	cbnz	r0, 8001ad4 <loop+0x24>

    printf("Status:[");
    printf("%s",ESP8266_getIPStatus());
    printf("]\n");
  }
}
 8001ad0:	b023      	add	sp, #140	; 0x8c
 8001ad2:	bd30      	pop	{r4, r5, pc}
 8001ad4:	4605      	mov	r5, r0
    printf("Status:[");
 8001ad6:	482e      	ldr	r0, [pc, #184]	; (8001b90 <loop+0xe0>)
 8001ad8:	f006 fb68 	bl	80081ac <iprintf>
    printf("%s",ESP8266_getIPStatus());
 8001adc:	f7ff f8e4 	bl	8000ca8 <ESP8266_getIPStatus>
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	482c      	ldr	r0, [pc, #176]	; (8001b94 <loop+0xe4>)
 8001ae4:	f006 fb62 	bl	80081ac <iprintf>
    printf("]\n");
 8001ae8:	482b      	ldr	r0, [pc, #172]	; (8001b98 <loop+0xe8>)
 8001aea:	f006 fbfb 	bl	80082e4 <puts>
    printf("Received from :");
 8001aee:	482b      	ldr	r0, [pc, #172]	; (8001b9c <loop+0xec>)
 8001af0:	f006 fb5c 	bl	80081ac <iprintf>
    printf("%d\n",mux_id);
 8001af4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001af8:	4829      	ldr	r0, [pc, #164]	; (8001ba0 <loop+0xf0>)
 8001afa:	f006 fb57 	bl	80081ac <iprintf>
    printf("[");
 8001afe:	205b      	movs	r0, #91	; 0x5b
 8001b00:	f006 fb6c 	bl	80081dc <putchar>
    for (uint32_t i = 0; i < len; i++)
 8001b04:	2400      	movs	r4, #0
 8001b06:	42ac      	cmp	r4, r5
 8001b08:	d207      	bcs.n	8001b1a <loop+0x6a>
      printf("%c",(char)buffer[i]);
 8001b0a:	ab22      	add	r3, sp, #136	; 0x88
 8001b0c:	4423      	add	r3, r4
 8001b0e:	f813 0c80 	ldrb.w	r0, [r3, #-128]
 8001b12:	f006 fb63 	bl	80081dc <putchar>
    for (uint32_t i = 0; i < len; i++)
 8001b16:	3401      	adds	r4, #1
 8001b18:	e7f5      	b.n	8001b06 <loop+0x56>
    printf("]\n");
 8001b1a:	481f      	ldr	r0, [pc, #124]	; (8001b98 <loop+0xe8>)
 8001b1c:	f006 fbe2 	bl	80082e4 <puts>
    if (ESP8266_send_mux(mux_id, buffer, len))
 8001b20:	462a      	mov	r2, r5
 8001b22:	a902      	add	r1, sp, #8
 8001b24:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001b28:	f7ff f956 	bl	8000dd8 <ESP8266_send_mux>
 8001b2c:	b1f8      	cbz	r0, 8001b6e <loop+0xbe>
    	printf("Send back OK\n");
 8001b2e:	481d      	ldr	r0, [pc, #116]	; (8001ba4 <loop+0xf4>)
 8001b30:	f006 fbd8 	bl	80082e4 <puts>
    if (ESP8266_releaseTCP_mux(mux_id))
 8001b34:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001b38:	f7ff f976 	bl	8000e28 <ESP8266_releaseTCP_mux>
 8001b3c:	b1d8      	cbz	r0, 8001b76 <loop+0xc6>
      printf("Release TCP ");
 8001b3e:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <loop+0xf8>)
 8001b40:	f006 fb34 	bl	80081ac <iprintf>
      printf("%d",mux_id);
 8001b44:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001b48:	4818      	ldr	r0, [pc, #96]	; (8001bac <loop+0xfc>)
 8001b4a:	f006 fb2f 	bl	80081ac <iprintf>
      printf(" OK\n");
 8001b4e:	4818      	ldr	r0, [pc, #96]	; (8001bb0 <loop+0x100>)
 8001b50:	f006 fbc8 	bl	80082e4 <puts>
    printf("Status:[");
 8001b54:	480e      	ldr	r0, [pc, #56]	; (8001b90 <loop+0xe0>)
 8001b56:	f006 fb29 	bl	80081ac <iprintf>
    printf("%s",ESP8266_getIPStatus());
 8001b5a:	f7ff f8a5 	bl	8000ca8 <ESP8266_getIPStatus>
 8001b5e:	4601      	mov	r1, r0
 8001b60:	480c      	ldr	r0, [pc, #48]	; (8001b94 <loop+0xe4>)
 8001b62:	f006 fb23 	bl	80081ac <iprintf>
    printf("]\n");
 8001b66:	480c      	ldr	r0, [pc, #48]	; (8001b98 <loop+0xe8>)
 8001b68:	f006 fbbc 	bl	80082e4 <puts>
}
 8001b6c:	e7b0      	b.n	8001ad0 <loop+0x20>
    	printf("Send back failed\n");
 8001b6e:	4811      	ldr	r0, [pc, #68]	; (8001bb4 <loop+0x104>)
 8001b70:	f006 fbb8 	bl	80082e4 <puts>
 8001b74:	e7de      	b.n	8001b34 <loop+0x84>
      printf("Release TCP ");
 8001b76:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <loop+0xf8>)
 8001b78:	f006 fb18 	bl	80081ac <iprintf>
      printf("%d",mux_id);
 8001b7c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <loop+0xfc>)
 8001b82:	f006 fb13 	bl	80081ac <iprintf>
      printf(" failed\n");
 8001b86:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <loop+0x108>)
 8001b88:	f006 fbac 	bl	80082e4 <puts>
 8001b8c:	e7e2      	b.n	8001b54 <loop+0xa4>
 8001b8e:	bf00      	nop
 8001b90:	08009df0 	.word	0x08009df0
 8001b94:	08009dfc 	.word	0x08009dfc
 8001b98:	08009ccc 	.word	0x08009ccc
 8001b9c:	08009e00 	.word	0x08009e00
 8001ba0:	08009b38 	.word	0x08009b38
 8001ba4:	08009e10 	.word	0x08009e10
 8001ba8:	08009cd0 	.word	0x08009cd0
 8001bac:	08009b1c 	.word	0x08009b1c
 8001bb0:	08009c1c 	.word	0x08009c1c
 8001bb4:	08009e20 	.word	0x08009e20
 8001bb8:	08009e58 	.word	0x08009e58

08001bbc <tcpserver_loop>:
int tcpserver_loop()
{
 8001bbc:	b508      	push	{r3, lr}
	while(1)
	{
		if(is_available(&stdin_uart)) break;
 8001bbe:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <tcpserver_loop+0x14>)
 8001bc0:	f000 febd 	bl	800293e <is_available>
 8001bc4:	b910      	cbnz	r0, 8001bcc <tcpserver_loop+0x10>
		loop();
 8001bc6:	f7ff ff73 	bl	8001ab0 <loop>
		if(is_available(&stdin_uart)) break;
 8001bca:	e7f8      	b.n	8001bbe <tcpserver_loop+0x2>

	}
}
 8001bcc:	bd08      	pop	{r3, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000050 	.word	0x20000050

08001bd4 <tcpserver_init>:
{
 8001bd4:	b508      	push	{r3, lr}
	if(ESP8266_setOprToStationSoftAP(DEFAULT_PATTERN,DEFAULT_PATTERN))
 8001bd6:	2103      	movs	r1, #3
 8001bd8:	4608      	mov	r0, r1
 8001bda:	f7fe ffc3 	bl	8000b64 <ESP8266_setOprToStationSoftAP>
 8001bde:	b338      	cbz	r0, 8001c30 <tcpserver_init+0x5c>
		printf("Set AP/STA Mode OK\n");
 8001be0:	481f      	ldr	r0, [pc, #124]	; (8001c60 <tcpserver_init+0x8c>)
 8001be2:	f006 fb7f 	bl	80082e4 <puts>
	if(ESP8266_joinAP(SSID,PASSWORD, DEFAULT_PATTERN ))
 8001be6:	2203      	movs	r2, #3
 8001be8:	491e      	ldr	r1, [pc, #120]	; (8001c64 <tcpserver_init+0x90>)
 8001bea:	481f      	ldr	r0, [pc, #124]	; (8001c68 <tcpserver_init+0x94>)
 8001bec:	f7ff f80c 	bl	8000c08 <ESP8266_joinAP>
 8001bf0:	b320      	cbz	r0, 8001c3c <tcpserver_init+0x68>
		printf("Connect to WiFi ok\n");
 8001bf2:	481e      	ldr	r0, [pc, #120]	; (8001c6c <tcpserver_init+0x98>)
 8001bf4:	f006 fb76 	bl	80082e4 <puts>
		printf("IP addr = %s\n",ESP8266_getLocalIP());
 8001bf8:	f7ff f93e 	bl	8000e78 <ESP8266_getLocalIP>
 8001bfc:	4601      	mov	r1, r0
 8001bfe:	481c      	ldr	r0, [pc, #112]	; (8001c70 <tcpserver_init+0x9c>)
 8001c00:	f006 fad4 	bl	80081ac <iprintf>
	if(ESP8266_enableMUX())
 8001c04:	f7ff f966 	bl	8000ed4 <ESP8266_enableMUX>
 8001c08:	b1e0      	cbz	r0, 8001c44 <tcpserver_init+0x70>
		printf("enableMux OK\n");
 8001c0a:	481a      	ldr	r0, [pc, #104]	; (8001c74 <tcpserver_init+0xa0>)
 8001c0c:	f006 fb6a 	bl	80082e4 <puts>
	if(ESP8266_startTCPServer(8090))
 8001c10:	f641 709a 	movw	r0, #8090	; 0x1f9a
 8001c14:	f7ff f99a 	bl	8000f4c <ESP8266_startTCPServer>
 8001c18:	b1c0      	cbz	r0, 8001c4c <tcpserver_init+0x78>
	    printf("Start TCP server OK\n");
 8001c1a:	4817      	ldr	r0, [pc, #92]	; (8001c78 <tcpserver_init+0xa4>)
 8001c1c:	f006 fb62 	bl	80082e4 <puts>
	if (ESP8266_setTCPServerTimeout(10))
 8001c20:	200a      	movs	r0, #10
 8001c22:	f7ff f9b3 	bl	8000f8c <ESP8266_setTCPServerTimeout>
 8001c26:	b9a8      	cbnz	r0, 8001c54 <tcpserver_init+0x80>
		printf("Set TCP server timeout failed\n");
 8001c28:	4814      	ldr	r0, [pc, #80]	; (8001c7c <tcpserver_init+0xa8>)
 8001c2a:	f006 fb5b 	bl	80082e4 <puts>
 8001c2e:	e014      	b.n	8001c5a <tcpserver_init+0x86>
		printf("Set AP/STA Mode failed\n");
 8001c30:	4813      	ldr	r0, [pc, #76]	; (8001c80 <tcpserver_init+0xac>)
 8001c32:	f006 fb57 	bl	80082e4 <puts>
		return -1;
 8001c36:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001c3a:	bd08      	pop	{r3, pc}
		printf("Connect to WiFi failed \n");
 8001c3c:	4811      	ldr	r0, [pc, #68]	; (8001c84 <tcpserver_init+0xb0>)
 8001c3e:	f006 fb51 	bl	80082e4 <puts>
		return -1;
 8001c42:	e7f8      	b.n	8001c36 <tcpserver_init+0x62>
		printf("enableMux failed\n");
 8001c44:	4810      	ldr	r0, [pc, #64]	; (8001c88 <tcpserver_init+0xb4>)
 8001c46:	f006 fb4d 	bl	80082e4 <puts>
		return -1;
 8001c4a:	e7f4      	b.n	8001c36 <tcpserver_init+0x62>
		printf("start TCP server failed\n");
 8001c4c:	480f      	ldr	r0, [pc, #60]	; (8001c8c <tcpserver_init+0xb8>)
 8001c4e:	f006 fb49 	bl	80082e4 <puts>
		return -1;
 8001c52:	e7f0      	b.n	8001c36 <tcpserver_init+0x62>
	    printf("Set TCP server timeout 10 seconds\n");
 8001c54:	480e      	ldr	r0, [pc, #56]	; (8001c90 <tcpserver_init+0xbc>)
 8001c56:	f006 fb45 	bl	80082e4 <puts>
	tcpserver_loop();
 8001c5a:	f7ff ffaf 	bl	8001bbc <tcpserver_loop>
}
 8001c5e:	e7ec      	b.n	8001c3a <tcpserver_init+0x66>
 8001c60:	08009d1c 	.word	0x08009d1c
 8001c64:	08009d30 	.word	0x08009d30
 8001c68:	08009d3c 	.word	0x08009d3c
 8001c6c:	08009d5c 	.word	0x08009d5c
 8001c70:	08009d70 	.word	0x08009d70
 8001c74:	08009d98 	.word	0x08009d98
 8001c78:	08009e34 	.word	0x08009e34
 8001c7c:	08009e84 	.word	0x08009e84
 8001c80:	08009d44 	.word	0x08009d44
 8001c84:	08009d80 	.word	0x08009d80
 8001c88:	08009da8 	.word	0x08009da8
 8001c8c:	08009e48 	.word	0x08009e48
 8001c90:	08009e60 	.word	0x08009e60

08001c94 <udp_client>:
extern bool ESP8266_unregisterUDP_mux(uint8_t mux_id);
extern bool ESP8266_send_mux(uint8_t mux_id, const uint8_t *buffer, uint32_t len);
extern uint32_t ESP8266_recv_mux(uint8_t mux_id, uint8_t *buffer, uint32_t buffer_size, uint32_t timeout);

void udp_client()
{
 8001c94:	b530      	push	{r4, r5, lr}
 8001c96:	b0ab      	sub	sp, #172	; 0xac
	uint8_t buffer[128] = {0};
 8001c98:	2400      	movs	r4, #0
 8001c9a:	940a      	str	r4, [sp, #40]	; 0x28
 8001c9c:	227c      	movs	r2, #124	; 0x7c
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	a80b      	add	r0, sp, #44	; 0x2c
 8001ca2:	f006 f9d1 	bl	8008048 <memset>
	uint8_t mux_id = 0;

	printf("Register UDP ");
 8001ca6:	482c      	ldr	r0, [pc, #176]	; (8001d58 <udp_client+0xc4>)
 8001ca8:	f006 fa80 	bl	80081ac <iprintf>
	if(ESP8266_registerUDP_mux(mux_id, HOST_NAME, HOST_PORT ))
 8001cac:	f641 7290 	movw	r2, #8080	; 0x1f90
 8001cb0:	492a      	ldr	r1, [pc, #168]	; (8001d5c <udp_client+0xc8>)
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7ff f850 	bl	8000d58 <ESP8266_registerUDP_mux>
 8001cb8:	b378      	cbz	r0, 8001d1a <udp_client+0x86>
	{
		printf("OK\n");
 8001cba:	4829      	ldr	r0, [pc, #164]	; (8001d60 <udp_client+0xcc>)
 8001cbc:	f006 fb12 	bl	80082e4 <puts>
	}
	else
	{
		printf("failed\n");
	}
	char hello[] = "Hello, this is jcnet udp client !";
 8001cc0:	ac01      	add	r4, sp, #4
 8001cc2:	4d28      	ldr	r5, [pc, #160]	; (8001d64 <udp_client+0xd0>)
 8001cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ccc:	682b      	ldr	r3, [r5, #0]
 8001cce:	8023      	strh	r3, [r4, #0]
    if (ESP8266_send_mux(mux_id, hello, strlen(hello)))
 8001cd0:	a801      	add	r0, sp, #4
 8001cd2:	f7fe faa7 	bl	8000224 <strlen>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	a901      	add	r1, sp, #4
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f7ff f87c 	bl	8000dd8 <ESP8266_send_mux>
 8001ce0:	b1f8      	cbz	r0, 8001d22 <udp_client+0x8e>
    {
    	printf("Send OK\n");
 8001ce2:	4821      	ldr	r0, [pc, #132]	; (8001d68 <udp_client+0xd4>)
 8001ce4:	f006 fafe 	bl	80082e4 <puts>
    else
    {
    	printf("Send  failed\n");
    }

    uint32_t len = ESP8266_recv_mux(mux_id, buffer, sizeof(buffer), 10000);
 8001ce8:	f242 7310 	movw	r3, #10000	; 0x2710
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	a90a      	add	r1, sp, #40	; 0x28
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff fa19 	bl	8001128 <ESP8266_recv_mux>

    if (len > 0)
 8001cf6:	4605      	mov	r5, r0
 8001cf8:	b9b8      	cbnz	r0, 8001d2a <udp_client+0x96>
    		printf("%c",(char)buffer[i]);
    	}

    	printf("]\n");
    }
    printf("Unregister UDP ");
 8001cfa:	481c      	ldr	r0, [pc, #112]	; (8001d6c <udp_client+0xd8>)
 8001cfc:	f006 fa56 	bl	80081ac <iprintf>
    if (ESP8266_unregisterUDP_mux(mux_id))
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff f895 	bl	8000e30 <ESP8266_unregisterUDP_mux>
 8001d06:	b310      	cbz	r0, 8001d4e <udp_client+0xba>
    {
    	printf(" OK\n");
 8001d08:	4819      	ldr	r0, [pc, #100]	; (8001d70 <udp_client+0xdc>)
 8001d0a:	f006 faeb 	bl	80082e4 <puts>
    else
    {
    	printf(" failed\n");
    }

    HAL_Delay(5000);
 8001d0e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001d12:	f001 fe77 	bl	8003a04 <HAL_Delay>
}
 8001d16:	b02b      	add	sp, #172	; 0xac
 8001d18:	bd30      	pop	{r4, r5, pc}
		printf("failed\n");
 8001d1a:	4816      	ldr	r0, [pc, #88]	; (8001d74 <udp_client+0xe0>)
 8001d1c:	f006 fae2 	bl	80082e4 <puts>
 8001d20:	e7ce      	b.n	8001cc0 <udp_client+0x2c>
    	printf("Send  failed\n");
 8001d22:	4815      	ldr	r0, [pc, #84]	; (8001d78 <udp_client+0xe4>)
 8001d24:	f006 fade 	bl	80082e4 <puts>
 8001d28:	e7de      	b.n	8001ce8 <udp_client+0x54>
    	printf("Received:[");
 8001d2a:	4814      	ldr	r0, [pc, #80]	; (8001d7c <udp_client+0xe8>)
 8001d2c:	f006 fa3e 	bl	80081ac <iprintf>
    	for (uint32_t i = 0; i < len; i++)
 8001d30:	2400      	movs	r4, #0
 8001d32:	42ac      	cmp	r4, r5
 8001d34:	d207      	bcs.n	8001d46 <udp_client+0xb2>
    		printf("%c",(char)buffer[i]);
 8001d36:	ab2a      	add	r3, sp, #168	; 0xa8
 8001d38:	4423      	add	r3, r4
 8001d3a:	f813 0c80 	ldrb.w	r0, [r3, #-128]
 8001d3e:	f006 fa4d 	bl	80081dc <putchar>
    	for (uint32_t i = 0; i < len; i++)
 8001d42:	3401      	adds	r4, #1
 8001d44:	e7f5      	b.n	8001d32 <udp_client+0x9e>
    	printf("]\n");
 8001d46:	480e      	ldr	r0, [pc, #56]	; (8001d80 <udp_client+0xec>)
 8001d48:	f006 facc 	bl	80082e4 <puts>
 8001d4c:	e7d5      	b.n	8001cfa <udp_client+0x66>
    	printf(" failed\n");
 8001d4e:	480d      	ldr	r0, [pc, #52]	; (8001d84 <udp_client+0xf0>)
 8001d50:	f006 fac8 	bl	80082e4 <puts>
 8001d54:	e7db      	b.n	8001d0e <udp_client+0x7a>
 8001d56:	bf00      	nop
 8001d58:	08009ea4 	.word	0x08009ea4
 8001d5c:	08009dbc 	.word	0x08009dbc
 8001d60:	08009b40 	.word	0x08009b40
 8001d64:	08009ec4 	.word	0x08009ec4
 8001d68:	08009ca8 	.word	0x08009ca8
 8001d6c:	08009eb4 	.word	0x08009eb4
 8001d70:	08009c1c 	.word	0x08009c1c
 8001d74:	08009d54 	.word	0x08009d54
 8001d78:	08009cb0 	.word	0x08009cb0
 8001d7c:	08009cc0 	.word	0x08009cc0
 8001d80:	08009ccc 	.word	0x08009ccc
 8001d84:	08009e58 	.word	0x08009e58

08001d88 <udpclient_loop>:
void udpclient_loop()
{
 8001d88:	b508      	push	{r3, lr}
	while(1)
	{
		if(is_available(&stdin_uart)) break;
 8001d8a:	4804      	ldr	r0, [pc, #16]	; (8001d9c <udpclient_loop+0x14>)
 8001d8c:	f000 fdd7 	bl	800293e <is_available>
 8001d90:	b910      	cbnz	r0, 8001d98 <udpclient_loop+0x10>
		udp_client();
 8001d92:	f7ff ff7f 	bl	8001c94 <udp_client>
		if(is_available(&stdin_uart)) break;
 8001d96:	e7f8      	b.n	8001d8a <udpclient_loop+0x2>

	}
}
 8001d98:	bd08      	pop	{r3, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000050 	.word	0x20000050

08001da0 <udpclient_init>:
{
 8001da0:	b508      	push	{r3, lr}
	if(ESP8266_setOprToStationSoftAP(DEFAULT_PATTERN,DEFAULT_PATTERN))
 8001da2:	2103      	movs	r1, #3
 8001da4:	4608      	mov	r0, r1
 8001da6:	f7fe fedd 	bl	8000b64 <ESP8266_setOprToStationSoftAP>
 8001daa:	b160      	cbz	r0, 8001dc6 <udpclient_init+0x26>
		printf("Set AP/STA Mode OK\n");
 8001dac:	4813      	ldr	r0, [pc, #76]	; (8001dfc <udpclient_init+0x5c>)
 8001dae:	f006 fa99 	bl	80082e4 <puts>
	if(ESP8266_joinAP(SSID,PASSWORD, DEFAULT_PATTERN ))
 8001db2:	2203      	movs	r2, #3
 8001db4:	4912      	ldr	r1, [pc, #72]	; (8001e00 <udpclient_init+0x60>)
 8001db6:	4813      	ldr	r0, [pc, #76]	; (8001e04 <udpclient_init+0x64>)
 8001db8:	f7fe ff26 	bl	8000c08 <ESP8266_joinAP>
 8001dbc:	b938      	cbnz	r0, 8001dce <udpclient_init+0x2e>
		printf("Connect to WiFi failed \n");
 8001dbe:	4812      	ldr	r0, [pc, #72]	; (8001e08 <udpclient_init+0x68>)
 8001dc0:	f006 fa90 	bl	80082e4 <puts>
 8001dc4:	e00c      	b.n	8001de0 <udpclient_init+0x40>
		printf("Set AP/STA Mode failed\n");
 8001dc6:	4811      	ldr	r0, [pc, #68]	; (8001e0c <udpclient_init+0x6c>)
 8001dc8:	f006 fa8c 	bl	80082e4 <puts>
		return -1;
 8001dcc:	e010      	b.n	8001df0 <udpclient_init+0x50>
		printf("Connect to WiFi ok\n");
 8001dce:	4810      	ldr	r0, [pc, #64]	; (8001e10 <udpclient_init+0x70>)
 8001dd0:	f006 fa88 	bl	80082e4 <puts>
		printf("IP addr = %s\n",ESP8266_getLocalIP());
 8001dd4:	f7ff f850 	bl	8000e78 <ESP8266_getLocalIP>
 8001dd8:	4601      	mov	r1, r0
 8001dda:	480e      	ldr	r0, [pc, #56]	; (8001e14 <udpclient_init+0x74>)
 8001ddc:	f006 f9e6 	bl	80081ac <iprintf>
	if(ESP8266_enableMUX())
 8001de0:	f7ff f878 	bl	8000ed4 <ESP8266_enableMUX>
 8001de4:	b128      	cbz	r0, 8001df2 <udpclient_init+0x52>
		printf("enableMux OK\n");
 8001de6:	480c      	ldr	r0, [pc, #48]	; (8001e18 <udpclient_init+0x78>)
 8001de8:	f006 fa7c 	bl	80082e4 <puts>
	udpclient_loop();
 8001dec:	f7ff ffcc 	bl	8001d88 <udpclient_loop>
}
 8001df0:	bd08      	pop	{r3, pc}
		printf("enableMux failed\n");
 8001df2:	480a      	ldr	r0, [pc, #40]	; (8001e1c <udpclient_init+0x7c>)
 8001df4:	f006 fa76 	bl	80082e4 <puts>
		return -1;
 8001df8:	e7fa      	b.n	8001df0 <udpclient_init+0x50>
 8001dfa:	bf00      	nop
 8001dfc:	08009d1c 	.word	0x08009d1c
 8001e00:	08009d30 	.word	0x08009d30
 8001e04:	08009d3c 	.word	0x08009d3c
 8001e08:	08009d80 	.word	0x08009d80
 8001e0c:	08009d44 	.word	0x08009d44
 8001e10:	08009d5c 	.word	0x08009d5c
 8001e14:	08009d70 	.word	0x08009d70
 8001e18:	08009d98 	.word	0x08009d98
 8001e1c:	08009da8 	.word	0x08009da8

08001e20 <_ZNK6String14StringIfHelperEv>:
{
	// use a function pointer to allow for "if (s)" without the
	// complications of an operator bool(). for more information, see:
	// http://www.artima.com/cppsource/safebool.html
	typedef void (String::*StringIfHelperType)() const;
	void StringIfHelper() const {}
 8001e20:	4770      	bx	lr

08001e22 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
 8001e22:	b510      	push	{r4, lr}
 8001e24:	4604      	mov	r4, r0
{
	if (buffer) free(buffer);
 8001e26:	6800      	ldr	r0, [r0, #0]
 8001e28:	b108      	cbz	r0, 8001e2e <_ZN6StringD1Ev+0xc>
 8001e2a:	f006 f8dd 	bl	8007fe8 <free>
}
 8001e2e:	4620      	mov	r0, r4
 8001e30:	bd10      	pop	{r4, pc}

08001e32 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
 8001e32:	b510      	push	{r4, lr}
 8001e34:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8001e36:	6800      	ldr	r0, [r0, #0]
 8001e38:	b108      	cbz	r0, 8001e3e <_ZN6String10invalidateEv+0xc>
 8001e3a:	f006 f8d5 	bl	8007fe8 <free>
	buffer = NULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8001e42:	60a3      	str	r3, [r4, #8]
 8001e44:	6063      	str	r3, [r4, #4]
}
 8001e46:	bd10      	pop	{r4, pc}

08001e48 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8001e48:	b538      	push	{r3, r4, r5, lr}
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8001e4e:	3101      	adds	r1, #1
 8001e50:	6800      	ldr	r0, [r0, #0]
 8001e52:	f006 fa4f 	bl	80082f4 <realloc>
	if (newbuffer) {
 8001e56:	b118      	cbz	r0, 8001e60 <_ZN6String12changeBufferEj+0x18>
		buffer = newbuffer;
 8001e58:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
 8001e5a:	6065      	str	r5, [r4, #4]
		return 1;
 8001e5c:	2001      	movs	r0, #1
	}
	return 0;
}
 8001e5e:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
 8001e60:	2000      	movs	r0, #0
 8001e62:	e7fc      	b.n	8001e5e <_ZN6String12changeBufferEj+0x16>

08001e64 <_ZN6String7reserveEj>:
{
 8001e64:	b510      	push	{r4, lr}
 8001e66:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8001e68:	6803      	ldr	r3, [r0, #0]
 8001e6a:	b113      	cbz	r3, 8001e72 <_ZN6String7reserveEj+0xe>
 8001e6c:	6843      	ldr	r3, [r0, #4]
 8001e6e:	428b      	cmp	r3, r1
 8001e70:	d20b      	bcs.n	8001e8a <_ZN6String7reserveEj+0x26>
	if (changeBuffer(size)) {
 8001e72:	4620      	mov	r0, r4
 8001e74:	f7ff ffe8 	bl	8001e48 <_ZN6String12changeBufferEj>
 8001e78:	b900      	cbnz	r0, 8001e7c <_ZN6String7reserveEj+0x18>
}
 8001e7a:	bd10      	pop	{r4, pc}
		if (len == 0) buffer[0] = 0;
 8001e7c:	68a3      	ldr	r3, [r4, #8]
 8001e7e:	b913      	cbnz	r3, 8001e86 <_ZN6String7reserveEj+0x22>
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
		return 1;
 8001e86:	2001      	movs	r0, #1
 8001e88:	e7f7      	b.n	8001e7a <_ZN6String7reserveEj+0x16>
	if (buffer && capacity >= size) return 1;
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	e7f5      	b.n	8001e7a <_ZN6String7reserveEj+0x16>

08001e8e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8001e8e:	b570      	push	{r4, r5, r6, lr}
 8001e90:	4604      	mov	r4, r0
 8001e92:	460e      	mov	r6, r1
 8001e94:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8001e96:	4611      	mov	r1, r2
 8001e98:	f7ff ffe4 	bl	8001e64 <_ZN6String7reserveEj>
 8001e9c:	b130      	cbz	r0, 8001eac <_ZN6String4copyEPKcj+0x1e>
		invalidate();
		return *this;
	}
	len = length;
 8001e9e:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
 8001ea0:	4631      	mov	r1, r6
 8001ea2:	6820      	ldr	r0, [r4, #0]
 8001ea4:	f006 fadc 	bl	8008460 <strcpy>
	return *this;
}
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
		invalidate();
 8001eac:	4620      	mov	r0, r4
 8001eae:	f7ff ffc0 	bl	8001e32 <_ZN6String10invalidateEv>
		return *this;
 8001eb2:	e7f9      	b.n	8001ea8 <_ZN6String4copyEPKcj+0x1a>

08001eb4 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8001eb4:	b538      	push	{r3, r4, r5, lr}
 8001eb6:	4604      	mov	r4, r0
	buffer = NULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8001ebc:	6043      	str	r3, [r0, #4]
	len = 0;
 8001ebe:	6083      	str	r3, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
 8001ec0:	b141      	cbz	r1, 8001ed4 <_ZN6StringC1EPKc+0x20>
 8001ec2:	460d      	mov	r5, r1
 8001ec4:	4608      	mov	r0, r1
 8001ec6:	f7fe f9ad 	bl	8000224 <strlen>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4629      	mov	r1, r5
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f7ff ffdd 	bl	8001e8e <_ZN6String4copyEPKcj>
}
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	bd38      	pop	{r3, r4, r5, pc}

08001ed8 <_ZN6String4moveERS_>:
}
#endif //by isjeon

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
 8001ed8:	b530      	push	{r4, r5, lr}
 8001eda:	b083      	sub	sp, #12
 8001edc:	4605      	mov	r5, r0
 8001ede:	460c      	mov	r4, r1
	if (buffer) {
 8001ee0:	6800      	ldr	r0, [r0, #0]
 8001ee2:	b168      	cbz	r0, 8001f00 <_ZN6String4moveERS_+0x28>
	friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
 8001ee4:	6809      	ldr	r1, [r1, #0]
 8001ee6:	b1b9      	cbz	r1, 8001f18 <_ZN6String4moveERS_+0x40>
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <_ZN6String4moveERS_+0x60>)
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2300      	movs	r3, #0
 8001eee:	9301      	str	r3, [sp, #4]
		if (rhs && capacity >= rhs.len) {
 8001ef0:	9b00      	ldr	r3, [sp, #0]
 8001ef2:	b1ab      	cbz	r3, 8001f20 <_ZN6String4moveERS_+0x48>
 8001ef4:	686a      	ldr	r2, [r5, #4]
 8001ef6:	68a3      	ldr	r3, [r4, #8]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d216      	bcs.n	8001f2a <_ZN6String4moveERS_+0x52>
			strcpy(buffer, rhs.buffer);
			len = rhs.len;
			rhs.len = 0;
			return;
		} else {
			free(buffer);
 8001efc:	f006 f874 	bl	8007fe8 <free>
		}
	}
	buffer = rhs.buffer;
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8001f04:	6863      	ldr	r3, [r4, #4]
 8001f06:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8001f08:	68a3      	ldr	r3, [r4, #8]
 8001f0a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 8001f10:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 8001f12:	60a3      	str	r3, [r4, #8]
}
 8001f14:	b003      	add	sp, #12
 8001f16:	bd30      	pop	{r4, r5, pc}
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	e7e7      	b.n	8001ef0 <_ZN6String4moveERS_+0x18>
		if (rhs && capacity >= rhs.len) {
 8001f20:	9b01      	ldr	r3, [sp, #4]
 8001f22:	f013 0f01 	tst.w	r3, #1
 8001f26:	d0e9      	beq.n	8001efc <_ZN6String4moveERS_+0x24>
 8001f28:	e7e4      	b.n	8001ef4 <_ZN6String4moveERS_+0x1c>
			strcpy(buffer, rhs.buffer);
 8001f2a:	f006 fa99 	bl	8008460 <strcpy>
			len = rhs.len;
 8001f2e:	68a3      	ldr	r3, [r4, #8]
 8001f30:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60a3      	str	r3, [r4, #8]
			return;
 8001f36:	e7ed      	b.n	8001f14 <_ZN6String4moveERS_+0x3c>
 8001f38:	08001e21 	.word	0x08001e21

08001f3c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
 8001f3c:	b510      	push	{r4, lr}
 8001f3e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8001f40:	4288      	cmp	r0, r1
 8001f42:	d005      	beq.n	8001f50 <_ZN6StringaSERKS_+0x14>
 8001f44:	460b      	mov	r3, r1
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8001f46:	6809      	ldr	r1, [r1, #0]
 8001f48:	b121      	cbz	r1, 8001f54 <_ZN6StringaSERKS_+0x18>
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	f7ff ff9f 	bl	8001e8e <_ZN6String4copyEPKcj>
	else invalidate();
	
	return *this;
}
 8001f50:	4620      	mov	r0, r4
 8001f52:	bd10      	pop	{r4, pc}
	else invalidate();
 8001f54:	f7ff ff6d 	bl	8001e32 <_ZN6String10invalidateEv>
 8001f58:	e7fa      	b.n	8001f50 <_ZN6StringaSERKS_+0x14>

08001f5a <_ZN6StringC1ERKS_>:
String::String(const String &value)
 8001f5a:	b510      	push	{r4, lr}
 8001f5c:	4604      	mov	r4, r0
	buffer = NULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8001f62:	6043      	str	r3, [r0, #4]
	len = 0;
 8001f64:	6083      	str	r3, [r0, #8]
	*this = value;
 8001f66:	f7ff ffe9 	bl	8001f3c <_ZN6StringaSERKS_>
}
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	bd10      	pop	{r4, pc}

08001f6e <_ZN6StringaSEOS_>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
 8001f6e:	b510      	push	{r4, lr}
 8001f70:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8001f72:	4288      	cmp	r0, r1
 8001f74:	d001      	beq.n	8001f7a <_ZN6StringaSEOS_+0xc>
 8001f76:	f7ff ffaf 	bl	8001ed8 <_ZN6String4moveERS_>
	return *this;
}
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	bd10      	pop	{r4, pc}

08001f7e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8001f7e:	b538      	push	{r3, r4, r5, lr}
 8001f80:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8001f82:	b151      	cbz	r1, 8001f9a <_ZN6StringaSEPKc+0x1c>
 8001f84:	460d      	mov	r5, r1
 8001f86:	4608      	mov	r0, r1
 8001f88:	f7fe f94c 	bl	8000224 <strlen>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4629      	mov	r1, r5
 8001f90:	4620      	mov	r0, r4
 8001f92:	f7ff ff7c 	bl	8001e8e <_ZN6String4copyEPKcj>
	else invalidate();
	
	return *this;
}
 8001f96:	4620      	mov	r0, r4
 8001f98:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 8001f9a:	f7ff ff4a 	bl	8001e32 <_ZN6String10invalidateEv>
 8001f9e:	e7fa      	b.n	8001f96 <_ZN6StringaSEPKc+0x18>

08001fa0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8001fa0:	b570      	push	{r4, r5, r6, lr}
	unsigned int newlen = len + length;
 8001fa2:	6883      	ldr	r3, [r0, #8]
 8001fa4:	189d      	adds	r5, r3, r2
	if (!cstr) return 0;
 8001fa6:	b191      	cbz	r1, 8001fce <_ZN6String6concatEPKcj+0x2e>
 8001fa8:	4604      	mov	r4, r0
 8001faa:	460e      	mov	r6, r1
	if (length == 0) return 1;
 8001fac:	b90a      	cbnz	r2, 8001fb2 <_ZN6String6concatEPKcj+0x12>
 8001fae:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
	if (!reserve(newlen)) return 0;
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	f7ff ff56 	bl	8001e64 <_ZN6String7reserveEj>
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d0f9      	beq.n	8001fb0 <_ZN6String6concatEPKcj+0x10>
	strcpy(buffer + len, cstr);
 8001fbc:	6820      	ldr	r0, [r4, #0]
 8001fbe:	68a3      	ldr	r3, [r4, #8]
 8001fc0:	4631      	mov	r1, r6
 8001fc2:	4418      	add	r0, r3
 8001fc4:	f006 fa4c 	bl	8008460 <strcpy>
	len = newlen;
 8001fc8:	60a5      	str	r5, [r4, #8]
	return 1;
 8001fca:	2001      	movs	r0, #1
 8001fcc:	e7f0      	b.n	8001fb0 <_ZN6String6concatEPKcj+0x10>
	if (!cstr) return 0;
 8001fce:	2000      	movs	r0, #0
 8001fd0:	e7ee      	b.n	8001fb0 <_ZN6String6concatEPKcj+0x10>

08001fd2 <_ZN6String6concatEc>:
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
{
 8001fd2:	b500      	push	{lr}
 8001fd4:	b083      	sub	sp, #12
	char buf[2];
	buf[0] = c;
 8001fd6:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	a901      	add	r1, sp, #4
 8001fe4:	f7ff ffdc 	bl	8001fa0 <_ZN6String6concatEPKcj>
}
 8001fe8:	b003      	add	sp, #12
 8001fea:	f85d fb04 	ldr.w	pc, [sp], #4

08001fee <_ZNK6String8getBytesEPhjj>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
 8001fee:	b1b2      	cbz	r2, 800201e <_ZNK6String8getBytesEPhjj+0x30>
{
 8001ff0:	b538      	push	{r3, r4, r5, lr}
 8001ff2:	460c      	mov	r4, r1
	if (!bufsize || !buf) return;
 8001ff4:	b17c      	cbz	r4, 8002016 <_ZNK6String8getBytesEPhjj+0x28>
	if (index >= len) {
 8001ff6:	6885      	ldr	r5, [r0, #8]
 8001ff8:	429d      	cmp	r5, r3
 8001ffa:	d90d      	bls.n	8002018 <_ZNK6String8getBytesEPhjj+0x2a>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
 8001ffc:	1e51      	subs	r1, r2, #1
	if (n > len - index) n = len - index;
 8001ffe:	1aed      	subs	r5, r5, r3
 8002000:	428d      	cmp	r5, r1
 8002002:	d300      	bcc.n	8002006 <_ZNK6String8getBytesEPhjj+0x18>
	unsigned int n = bufsize - 1;
 8002004:	460d      	mov	r5, r1
	strncpy((char *)buf, buffer + index, n);
 8002006:	6801      	ldr	r1, [r0, #0]
 8002008:	462a      	mov	r2, r5
 800200a:	4419      	add	r1, r3
 800200c:	4620      	mov	r0, r4
 800200e:	f006 fa41 	bl	8008494 <strncpy>
	buf[n] = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	5563      	strb	r3, [r4, r5]
}
 8002016:	bd38      	pop	{r3, r4, r5, pc}
		buf[0] = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	7023      	strb	r3, [r4, #0]
		return;
 800201c:	e7fb      	b.n	8002016 <_ZNK6String8getBytesEPhjj+0x28>
 800201e:	4770      	bx	lr

08002020 <_ZNK6String7indexOfEcj>:
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
 8002020:	6883      	ldr	r3, [r0, #8]
 8002022:	4293      	cmp	r3, r2
 8002024:	d907      	bls.n	8002036 <_ZNK6String7indexOfEcj+0x16>
{
 8002026:	b510      	push	{r4, lr}
	const char* temp = strchr(buffer + fromIndex, ch);
 8002028:	6804      	ldr	r4, [r0, #0]
 800202a:	18a0      	adds	r0, r4, r2
 800202c:	f006 fa0b 	bl	8008446 <strchr>
	if (temp == NULL) return -1;
 8002030:	b120      	cbz	r0, 800203c <_ZNK6String7indexOfEcj+0x1c>
	return temp - buffer;
 8002032:	1b00      	subs	r0, r0, r4
}
 8002034:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 8002036:	f04f 30ff 	mov.w	r0, #4294967295
}
 800203a:	4770      	bx	lr
	if (temp == NULL) return -1;
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	e7f8      	b.n	8002034 <_ZNK6String7indexOfEcj+0x14>

08002042 <_ZNK6String7indexOfERKS_j>:
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
 8002042:	6883      	ldr	r3, [r0, #8]
 8002044:	4293      	cmp	r3, r2
 8002046:	d908      	bls.n	800205a <_ZNK6String7indexOfERKS_j+0x18>
{
 8002048:	b510      	push	{r4, lr}
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 800204a:	6804      	ldr	r4, [r0, #0]
 800204c:	6809      	ldr	r1, [r1, #0]
 800204e:	18a0      	adds	r0, r4, r2
 8002050:	f006 fa33 	bl	80084ba <strstr>
	if (found == NULL) return -1;
 8002054:	b120      	cbz	r0, 8002060 <_ZNK6String7indexOfERKS_j+0x1e>
	return found - buffer;
 8002056:	1b00      	subs	r0, r0, r4
}
 8002058:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 800205a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800205e:	4770      	bx	lr
	if (found == NULL) return -1;
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	e7f8      	b.n	8002058 <_ZNK6String7indexOfERKS_j+0x16>

08002066 <_ZNK6String7indexOfERKS_>:
{
 8002066:	b508      	push	{r3, lr}
	return indexOf(s2, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	f7ff ffea 	bl	8002042 <_ZNK6String7indexOfERKS_j>
}
 800206e:	bd08      	pop	{r3, pc}

08002070 <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
 8002070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002074:	4606      	mov	r6, r0
 8002076:	460f      	mov	r7, r1
 8002078:	4615      	mov	r5, r2
 800207a:	461c      	mov	r4, r3
	if (left > right) {
 800207c:	429a      	cmp	r2, r3
 800207e:	d801      	bhi.n	8002084 <_ZNK6String9substringEjj+0x14>
 8002080:	4614      	mov	r4, r2
 8002082:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8002084:	490d      	ldr	r1, [pc, #52]	; (80020bc <_ZNK6String9substringEjj+0x4c>)
 8002086:	4630      	mov	r0, r6
 8002088:	f7ff ff14 	bl	8001eb4 <_ZN6StringC1EPKc>
	if (left >= len) return out;
 800208c:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8002090:	45a0      	cmp	r8, r4
 8002092:	d910      	bls.n	80020b6 <_ZNK6String9substringEjj+0x46>
	if (right > len) right = len;
 8002094:	45a8      	cmp	r8, r5
 8002096:	d300      	bcc.n	800209a <_ZNK6String9substringEjj+0x2a>
 8002098:	46a8      	mov	r8, r5
	char temp = buffer[right];  // save the replaced character
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f813 5008 	ldrb.w	r5, [r3, r8]
	buffer[right] = '\0';	
 80020a0:	2200      	movs	r2, #0
 80020a2:	f803 2008 	strb.w	r2, [r3, r8]
	out = buffer + left;  // pointer arithmetic
 80020a6:	6839      	ldr	r1, [r7, #0]
 80020a8:	4421      	add	r1, r4
 80020aa:	4630      	mov	r0, r6
 80020ac:	f7ff ff67 	bl	8001f7e <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f803 5008 	strb.w	r5, [r3, r8]
	return out;
}
 80020b6:	4630      	mov	r0, r6
 80020b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020bc:	0800a218 	.word	0x0800a218

080020c0 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80020c0:	6800      	ldr	r0, [r0, #0]
 80020c2:	b118      	cbz	r0, 80020cc <_ZNK6String5toIntEv+0xc>
{
 80020c4:	b508      	push	{r3, lr}
	if (buffer) return atol(buffer);
 80020c6:	f005 fd93 	bl	8007bf0 <atol>
	return 0;
}
 80020ca:	bd08      	pop	{r3, pc}
	return 0;
 80020cc:	2000      	movs	r0, #0
}
 80020ce:	4770      	bx	lr

080020d0 <can_start>:
extern uart_rx_queue_t stdin_uart;

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
void can_start(int chn) // chn 1,2
{
 80020d0:	b510      	push	{r4, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
           CAN_FilterTypeDef  sFilterConfig;


           sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	9306      	str	r3, [sp, #24]
           sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80020d8:	9307      	str	r3, [sp, #28]

           sFilterConfig.FilterIdHigh = 0x7FF<<5;
 80020da:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80020de:	9200      	str	r2, [sp, #0]
           sFilterConfig.FilterIdLow = 0x0000;
 80020e0:	9301      	str	r3, [sp, #4]
           sFilterConfig.FilterMaskIdHigh = 0;
 80020e2:	9302      	str	r3, [sp, #8]
           sFilterConfig.FilterMaskIdLow = 0;
 80020e4:	9303      	str	r3, [sp, #12]

           sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80020e6:	9304      	str	r3, [sp, #16]
           sFilterConfig.FilterActivation = ENABLE;
 80020e8:	2301      	movs	r3, #1
 80020ea:	9308      	str	r3, [sp, #32]
           sFilterConfig.SlaveStartFilterBank = 14;
 80020ec:	230e      	movs	r3, #14
 80020ee:	9309      	str	r3, [sp, #36]	; 0x24
           if(chn == 1)
 80020f0:	2801      	cmp	r0, #1
 80020f2:	d003      	beq.n	80020fc <can_start+0x2c>
                   HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
                   HAL_CAN_Start(&hcan1);
                   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // | CAN_IT_TX_MAILBOX_EMPTY);
           }
#if 1
           else if(chn == 2)
 80020f4:	2802      	cmp	r0, #2
 80020f6:	d010      	beq.n	800211a <can_start+0x4a>
                   HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
                   HAL_CAN_Start(&hcan2);
                   HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
           }
#endif
}
 80020f8:	b00a      	add	sp, #40	; 0x28
 80020fa:	bd10      	pop	{r4, pc}
                   sFilterConfig.FilterBank = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	9305      	str	r3, [sp, #20]
                   HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8002100:	4c0d      	ldr	r4, [pc, #52]	; (8002138 <can_start+0x68>)
 8002102:	4669      	mov	r1, sp
 8002104:	4620      	mov	r0, r4
 8002106:	f001 fd37 	bl	8003b78 <HAL_CAN_ConfigFilter>
                   HAL_CAN_Start(&hcan1);
 800210a:	4620      	mov	r0, r4
 800210c:	f001 fdcc 	bl	8003ca8 <HAL_CAN_Start>
                   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // | CAN_IT_TX_MAILBOX_EMPTY);
 8002110:	2102      	movs	r1, #2
 8002112:	4620      	mov	r0, r4
 8002114:	f001 ff38 	bl	8003f88 <HAL_CAN_ActivateNotification>
 8002118:	e7ee      	b.n	80020f8 <can_start+0x28>
                   sFilterConfig.FilterBank = 14;
 800211a:	230e      	movs	r3, #14
 800211c:	9305      	str	r3, [sp, #20]
                   HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 800211e:	4c07      	ldr	r4, [pc, #28]	; (800213c <can_start+0x6c>)
 8002120:	4669      	mov	r1, sp
 8002122:	4620      	mov	r0, r4
 8002124:	f001 fd28 	bl	8003b78 <HAL_CAN_ConfigFilter>
                   HAL_CAN_Start(&hcan2);
 8002128:	4620      	mov	r0, r4
 800212a:	f001 fdbd 	bl	8003ca8 <HAL_CAN_Start>
                   HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800212e:	2102      	movs	r1, #2
 8002130:	4620      	mov	r0, r4
 8002132:	f001 ff29 	bl	8003f88 <HAL_CAN_ActivateNotification>
}
 8002136:	e7df      	b.n	80020f8 <can_start+0x28>
 8002138:	20003de4 	.word	0x20003de4
 800213c:	20003c54 	.word	0x20003c54

08002140 <can1_tx>:
   HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);


}
void can1_tx()
{
 8002140:	b508      	push	{r3, lr}
   static CAN_RxHeaderTypeDef rxHeader; // F1 V1.19.0
   static CAN_TxHeaderTypeDef txHeader;
   static uint8_t txData[8]; // 송신버퍼입니다
   static uint32_t txMailbox;

   memset(txData,0,sizeof(txData));
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <can1_tx+0x48>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]


   while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {} // by isjeon
 800214a:	4810      	ldr	r0, [pc, #64]	; (800218c <can1_tx+0x4c>)
 800214c:	f001 fe50 	bl	8003df0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002150:	2803      	cmp	r0, #3
 8002152:	d1fa      	bne.n	800214a <can1_tx+0xa>
   txHeader.StdId = 0x555; // 0x7FF;
 8002154:	490e      	ldr	r1, [pc, #56]	; (8002190 <can1_tx+0x50>)
 8002156:	f240 5355 	movw	r3, #1365	; 0x555
 800215a:	600b      	str	r3, [r1, #0]
   txHeader.RTR = CAN_RTR_DATA;
 800215c:	2300      	movs	r3, #0
 800215e:	60cb      	str	r3, [r1, #12]
   txHeader.IDE = CAN_ID_STD;
 8002160:	608b      	str	r3, [r1, #8]
   txHeader.DLC = 8;
 8002162:	2208      	movs	r2, #8
 8002164:	610a      	str	r2, [r1, #16]
   txHeader.TransmitGlobalTime = DISABLE;
 8002166:	750b      	strb	r3, [r1, #20]
   txData[0] = 0xCA;
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <can1_tx+0x48>)
 800216a:	23ca      	movs	r3, #202	; 0xca
 800216c:	7013      	strb	r3, [r2, #0]
   txData[1] = 0xFE;
 800216e:	23fe      	movs	r3, #254	; 0xfe
 8002170:	7053      	strb	r3, [r2, #1]
   txData[2] = 0xaa;     txData[3] = 0xaa;     txData[4] = 0xaa;     txData[5] = 0xaa;
 8002172:	23aa      	movs	r3, #170	; 0xaa
 8002174:	7093      	strb	r3, [r2, #2]
 8002176:	70d3      	strb	r3, [r2, #3]
 8002178:	7113      	strb	r3, [r2, #4]
 800217a:	7153      	strb	r3, [r2, #5]
//   sprintf(txData+2,"%d",g_tx1Cnt++);
//   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);

   HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <can1_tx+0x54>)
 800217e:	4803      	ldr	r0, [pc, #12]	; (800218c <can1_tx+0x4c>)
 8002180:	f001 fdc0 	bl	8003d04 <HAL_CAN_AddTxMessage>
}
 8002184:	bd08      	pop	{r3, pc}
 8002186:	bf00      	nop
 8002188:	20000e90 	.word	0x20000e90
 800218c:	20003de4 	.word	0x20003de4
 8002190:	20000ea0 	.word	0x20000ea0
 8002194:	20000ed0 	.word	0x20000ed0

08002198 <can2_tx>:
void can2_tx()
{
 8002198:	b508      	push	{r3, lr}
   static CAN_RxHeaderTypeDef rxHeader; // F1 V1.19.0
   static CAN_TxHeaderTypeDef txHeader;
   static uint8_t txData[8]; // 송신버퍼입니다
   static uint32_t txMailbox;

   memset(txData,0,sizeof(txData));
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <can2_tx+0x48>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]


   while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan2) != 3) {} // by isjeon
 80021a2:	4810      	ldr	r0, [pc, #64]	; (80021e4 <can2_tx+0x4c>)
 80021a4:	f001 fe24 	bl	8003df0 <HAL_CAN_GetTxMailboxesFreeLevel>
 80021a8:	2803      	cmp	r0, #3
 80021aa:	d1fa      	bne.n	80021a2 <can2_tx+0xa>
   txHeader.StdId = 0x555; // 0x7FF;
 80021ac:	490e      	ldr	r1, [pc, #56]	; (80021e8 <can2_tx+0x50>)
 80021ae:	f240 5355 	movw	r3, #1365	; 0x555
 80021b2:	600b      	str	r3, [r1, #0]
   txHeader.RTR = CAN_RTR_DATA;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60cb      	str	r3, [r1, #12]
   txHeader.IDE = CAN_ID_STD;
 80021b8:	608b      	str	r3, [r1, #8]
   txHeader.DLC = 8;
 80021ba:	2208      	movs	r2, #8
 80021bc:	610a      	str	r2, [r1, #16]
   txHeader.TransmitGlobalTime = DISABLE;
 80021be:	750b      	strb	r3, [r1, #20]
   txData[0] = 0xCA;
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <can2_tx+0x48>)
 80021c2:	23ca      	movs	r3, #202	; 0xca
 80021c4:	7013      	strb	r3, [r2, #0]
   txData[1] = 0xFE;
 80021c6:	23fe      	movs	r3, #254	; 0xfe
 80021c8:	7053      	strb	r3, [r2, #1]
   txData[2] = 0xbb;     txData[3] = 0xbb;     txData[4] = 0xbb;     txData[5] = 0xbb;
 80021ca:	23bb      	movs	r3, #187	; 0xbb
 80021cc:	7093      	strb	r3, [r2, #2]
 80021ce:	70d3      	strb	r3, [r2, #3]
 80021d0:	7113      	strb	r3, [r2, #4]
 80021d2:	7153      	strb	r3, [r2, #5]
//   sprintf(txData+2,"%d",g_tx1Cnt++);
//   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);

   HAL_CAN_AddTxMessage(&hcan2, &txHeader, txData, &txMailbox);
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <can2_tx+0x54>)
 80021d6:	4803      	ldr	r0, [pc, #12]	; (80021e4 <can2_tx+0x4c>)
 80021d8:	f001 fd94 	bl	8003d04 <HAL_CAN_AddTxMessage>
}
 80021dc:	bd08      	pop	{r3, pc}
 80021de:	bf00      	nop
 80021e0:	20000e98 	.word	0x20000e98
 80021e4:	20003c54 	.word	0x20003c54
 80021e8:	20000eb8 	.word	0x20000eb8
 80021ec:	20000ed4 	.word	0x20000ed4

080021f0 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021f0:	b508      	push	{r3, lr}
    printf("\n\rTransmission completed mailbox_0\n\r");
 80021f2:	4802      	ldr	r0, [pc, #8]	; (80021fc <HAL_CAN_TxMailbox0CompleteCallback+0xc>)
 80021f4:	f005 ffda 	bl	80081ac <iprintf>
}
 80021f8:	bd08      	pop	{r3, pc}
 80021fa:	bf00      	nop
 80021fc:	08009ee8 	.word	0x08009ee8

08002200 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002200:	b508      	push	{r3, lr}
	printf("\n\rTransmission completed mailbox_1\n\r");
 8002202:	4802      	ldr	r0, [pc, #8]	; (800220c <HAL_CAN_TxMailbox1CompleteCallback+0xc>)
 8002204:	f005 ffd2 	bl	80081ac <iprintf>

}
 8002208:	bd08      	pop	{r3, pc}
 800220a:	bf00      	nop
 800220c:	08009f10 	.word	0x08009f10

08002210 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002210:	b508      	push	{r3, lr}
	printf("\n\rTransmission completed mailbox_2\n\r");
 8002212:	4802      	ldr	r0, [pc, #8]	; (800221c <HAL_CAN_TxMailbox2CompleteCallback+0xc>)
 8002214:	f005 ffca 	bl	80081ac <iprintf>

}
 8002218:	bd08      	pop	{r3, pc}
 800221a:	bf00      	nop
 800221c:	08009f38 	.word	0x08009f38

08002220 <HAL_CAN_RxFifo0MsgPendingCallback>:
volatile uint8_t rxDataCan1[8];
volatile uint8_t rxDataCan2[8];
volatile int can1_rx_flag = 0;
volatile int can2_rx_flag = 0;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002220:	b530      	push	{r4, r5, lr}
 8002222:	b083      	sub	sp, #12
 8002224:	4604      	mov	r4, r0
   char rxData[8];
   CAN_FilterTypeDef  sFilterConfig;
   static CAN_RxHeaderTypeDef rxHeader; // F1 V1.19.0
   static CAN_TxHeaderTypeDef txHeader;

        if(hcan == &hcan1)
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8002228:	4298      	cmp	r0, r3
 800222a:	d004      	beq.n	8002236 <HAL_CAN_RxFifo0MsgPendingCallback+0x16>
                memcpy(rxDataCan1, rxData, 8);

//                insert_CAN_if_Q(1,can1_rxData,rxHeader.StdId);

        }
        if(hcan == &hcan2)
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800222e:	429c      	cmp	r4, r3
 8002230:	d015      	beq.n	800225e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
                memcpy(rxDataCan2, rxData, 8);
//                insert_CAN_if_Q(1,can1_rxData,rxHeader.StdId);

        }

}
 8002232:	b003      	add	sp, #12
 8002234:	bd30      	pop	{r4, r5, pc}
        		can1_rx_flag = 1;
 8002236:	4b16      	ldr	r3, [pc, #88]	; (8002290 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
                HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800223c:	4d12      	ldr	r5, [pc, #72]	; (8002288 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800223e:	2100      	movs	r1, #0
 8002240:	4628      	mov	r0, r5
 8002242:	f001 fe8e 	bl	8003f62 <HAL_CAN_GetRxFifoFillLevel>
                HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData);
 8002246:	466b      	mov	r3, sp
 8002248:	4a12      	ldr	r2, [pc, #72]	; (8002294 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800224a:	2100      	movs	r1, #0
 800224c:	4628      	mov	r0, r5
 800224e:	f001 fde8 	bl	8003e22 <HAL_CAN_GetRxMessage>
                memcpy(rxDataCan1, rxData, 8);
 8002252:	4a11      	ldr	r2, [pc, #68]	; (8002298 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8002254:	466b      	mov	r3, sp
 8002256:	cb03      	ldmia	r3!, {r0, r1}
 8002258:	6010      	str	r0, [r2, #0]
 800225a:	6051      	str	r1, [r2, #4]
 800225c:	e7e6      	b.n	800222c <HAL_CAN_RxFifo0MsgPendingCallback+0xc>
    			can2_rx_flag = 1;
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]
                HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0);
 8002264:	4c09      	ldr	r4, [pc, #36]	; (800228c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8002266:	2100      	movs	r1, #0
 8002268:	4620      	mov	r0, r4
 800226a:	f001 fe7a 	bl	8003f62 <HAL_CAN_GetRxFifoFillLevel>
                HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxHeader, rxData);
 800226e:	466b      	mov	r3, sp
 8002270:	4a08      	ldr	r2, [pc, #32]	; (8002294 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8002272:	2100      	movs	r1, #0
 8002274:	4620      	mov	r0, r4
 8002276:	f001 fdd4 	bl	8003e22 <HAL_CAN_GetRxMessage>
                memcpy(rxDataCan2, rxData, 8);
 800227a:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800227c:	466b      	mov	r3, sp
 800227e:	cb03      	ldmia	r3!, {r0, r1}
 8002280:	6010      	str	r0, [r2, #0]
 8002282:	6051      	str	r1, [r2, #4]
}
 8002284:	e7d5      	b.n	8002232 <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
 8002286:	bf00      	nop
 8002288:	20003de4 	.word	0x20003de4
 800228c:	20003c54 	.word	0x20003c54
 8002290:	20000e6c 	.word	0x20000e6c
 8002294:	20000e74 	.word	0x20000e74
 8002298:	20001da0 	.word	0x20001da0
 800229c:	20000e70 	.word	0x20000e70
 80022a0:	20001d98 	.word	0x20001d98

080022a4 <can_fn>:

void can_fn(int ac, char *av[])
{
 80022a4:	b510      	push	{r4, lr}
	if(ac == 3 && !strcmp(av[1],"tx"))
 80022a6:	2803      	cmp	r0, #3
 80022a8:	d117      	bne.n	80022da <can_fn+0x36>
 80022aa:	460c      	mov	r4, r1
 80022ac:	490d      	ldr	r1, [pc, #52]	; (80022e4 <can_fn+0x40>)
 80022ae:	6860      	ldr	r0, [r4, #4]
 80022b0:	f7fd ffae 	bl	8000210 <strcmp>
 80022b4:	b988      	cbnz	r0, 80022da <can_fn+0x36>
	{
		int ch;
		ch = av[2][0];
 80022b6:	68a3      	ldr	r3, [r4, #8]
 80022b8:	781c      	ldrb	r4, [r3, #0]
		if(ch == '1')
 80022ba:	2c31      	cmp	r4, #49	; 0x31
 80022bc:	d007      	beq.n	80022ce <can_fn+0x2a>
		{
			printf("CAN1 tx\n");
			can1_tx();
		}
		if(ch == '2')
 80022be:	2c32      	cmp	r4, #50	; 0x32
 80022c0:	d10e      	bne.n	80022e0 <can_fn+0x3c>
		{
			printf("CAN2 tx\n");
 80022c2:	4809      	ldr	r0, [pc, #36]	; (80022e8 <can_fn+0x44>)
 80022c4:	f006 f80e 	bl	80082e4 <puts>
			can2_tx();
 80022c8:	f7ff ff66 	bl	8002198 <can2_tx>
 80022cc:	e008      	b.n	80022e0 <can_fn+0x3c>
			printf("CAN1 tx\n");
 80022ce:	4807      	ldr	r0, [pc, #28]	; (80022ec <can_fn+0x48>)
 80022d0:	f006 f808 	bl	80082e4 <puts>
			can1_tx();
 80022d4:	f7ff ff34 	bl	8002140 <can1_tx>
 80022d8:	e7f1      	b.n	80022be <can_fn+0x1a>
		}
	}
	else
	{
		printf("Usage : can tx [1/2]\n");
 80022da:	4805      	ldr	r0, [pc, #20]	; (80022f0 <can_fn+0x4c>)
 80022dc:	f006 f802 	bl	80082e4 <puts>
		can1_loopback();
		HAL_Delay(1000);
        if(is_available(&stdin_uart)) break;
	}
#endif
}
 80022e0:	bd10      	pop	{r4, pc}
 80022e2:	bf00      	nop
 80022e4:	08009f60 	.word	0x08009f60
 80022e8:	08009f6c 	.word	0x08009f6c
 80022ec:	08009f64 	.word	0x08009f64
 80022f0:	08009f74 	.word	0x08009f74

080022f4 <exec_cmd>:
};

#include "string.h"

int exec_cmd(uint8_t *cmd, int ac,char *av[])
{
 80022f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022f8:	4680      	mov	r8, r0
 80022fa:	460e      	mov	r6, r1
 80022fc:	4617      	mov	r7, r2
        int i;
        for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 80022fe:	2400      	movs	r4, #0
 8002300:	2c06      	cmp	r4, #6
 8002302:	d815      	bhi.n	8002330 <exec_cmd+0x3c>
        {
                if(!strcmp(cmd, cmd_tbl[i].cmd))
 8002304:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8002308:	4d0c      	ldr	r5, [pc, #48]	; (800233c <exec_cmd+0x48>)
 800230a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800230e:	4640      	mov	r0, r8
 8002310:	f7fd ff7e 	bl	8000210 <strcmp>
 8002314:	4605      	mov	r5, r0
 8002316:	b108      	cbz	r0, 800231c <exec_cmd+0x28>
        for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8002318:	3401      	adds	r4, #1
 800231a:	e7f1      	b.n	8002300 <exec_cmd+0xc>
                {
                        cmd_tbl[i].fn(ac, av);
 800231c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <exec_cmd+0x48>)
 8002322:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002326:	6863      	ldr	r3, [r4, #4]
 8002328:	4639      	mov	r1, r7
 800232a:	4630      	mov	r0, r6
 800232c:	4798      	blx	r3
                        return 0;
 800232e:	e001      	b.n	8002334 <exec_cmd+0x40>
                }
        }
        return -1;
 8002330:	f04f 35ff 	mov.w	r5, #4294967295
}
 8002334:	4628      	mov	r0, r5
 8002336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800233a:	bf00      	nop
 800233c:	0800a038 	.word	0x0800a038

08002340 <get_args>:
extern void my_putchar(char c);
int get_args(char *buf, char *av[])
{
 8002340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002342:	4605      	mov	r5, r0
 8002344:	460f      	mov	r7, r1
        int     num, start, end;
        start = end = num = 0;
 8002346:	2400      	movs	r4, #0
 8002348:	4621      	mov	r1, r4
 800234a:	4626      	mov	r6, r4
 800234c:	e00e      	b.n	800236c <get_args+0x2c>
        while (1)
        {
//printf("buf+start = [%s] start=%d end=%d buf[end]=%x num=%d\n",buf, start,end,buf[end],num);
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
                {
                        if(buf[end]) buf[end] = '\0';
 800234e:	b10b      	cbz	r3, 8002354 <get_args+0x14>
 8002350:	2300      	movs	r3, #0
 8002352:	7013      	strb	r3, [r2, #0]
                        if(start != end)
 8002354:	42a1      	cmp	r1, r4
 8002356:	d101      	bne.n	800235c <get_args+0x1c>
                        end ++;
                        start = end ;
                }
        }
        return 0;
}
 8002358:	4630      	mov	r0, r6
 800235a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                strcpy(av[num],buf+start);
 800235c:	4429      	add	r1, r5
 800235e:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8002362:	f006 f87d 	bl	8008460 <strcpy>
                                num ++;
 8002366:	3601      	adds	r6, #1
                                return num;
 8002368:	e7f6      	b.n	8002358 <get_args+0x18>
                        end ++;
 800236a:	3401      	adds	r4, #1
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
 800236c:	192a      	adds	r2, r5, r4
 800236e:	5d2b      	ldrb	r3, [r5, r4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ec      	beq.n	800234e <get_args+0xe>
 8002374:	2b0a      	cmp	r3, #10
 8002376:	d0ea      	beq.n	800234e <get_args+0xe>
 8002378:	2b0d      	cmp	r3, #13
 800237a:	d0e8      	beq.n	800234e <get_args+0xe>
                if(buf[end] != ' ' && buf[end] != '\t' ) {
 800237c:	2b20      	cmp	r3, #32
 800237e:	d001      	beq.n	8002384 <get_args+0x44>
 8002380:	2b09      	cmp	r3, #9
 8002382:	d1f2      	bne.n	800236a <get_args+0x2a>
                        buf[end] = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	7013      	strb	r3, [r2, #0]
                        strcpy(av[num],buf+start);
 8002388:	4429      	add	r1, r5
 800238a:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 800238e:	f006 f867 	bl	8008460 <strcpy>
                        num ++;
 8002392:	3601      	adds	r6, #1
                        end ++;
 8002394:	1c61      	adds	r1, r4, #1
 8002396:	460c      	mov	r4, r1
 8002398:	e7e8      	b.n	800236c <get_args+0x2c>
	...

0800239c <do_cmd>:
const char *prompt="jkit";
char *version="iot2.1";
static char cmd_buf[128],old_buf[128];
static int idx = 0;
int do_cmd(char ch)
{
 800239c:	b510      	push	{r4, lr}
 800239e:	b0a0      	sub	sp, #128	; 0x80

        char buf[128];
        int ac,i;
        if(ch == '\n' || ch == '\r')
 80023a0:	280a      	cmp	r0, #10
 80023a2:	d00f      	beq.n	80023c4 <do_cmd+0x28>
 80023a4:	280d      	cmp	r0, #13
 80023a6:	d00d      	beq.n	80023c4 <do_cmd+0x28>
                 strcpy(old_buf,buf);
                 exec_cmd(av[0],ac, av);
                 printf("%s-%s> ",prompt,version); fflush(stdout);
                 idx = 0;
        }
        else if(ch == '\b')
 80023a8:	2808      	cmp	r0, #8
 80023aa:	d060      	beq.n	800246e <do_cmd+0xd2>
        {
                 if(idx > 0) { idx --; my_putchar('\b'); my_putchar(' '); my_putchar('\b'); return 0;}
        }
        else if(idx < 63) {
 80023ac:	4b38      	ldr	r3, [pc, #224]	; (8002490 <do_cmd+0xf4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b3e      	cmp	r3, #62	; 0x3e
 80023b2:	dc40      	bgt.n	8002436 <do_cmd+0x9a>
                 cmd_buf[idx++] = ch;   my_putchar(ch);
 80023b4:	1c59      	adds	r1, r3, #1
 80023b6:	4a36      	ldr	r2, [pc, #216]	; (8002490 <do_cmd+0xf4>)
 80023b8:	6011      	str	r1, [r2, #0]
 80023ba:	4a36      	ldr	r2, [pc, #216]	; (8002494 <do_cmd+0xf8>)
 80023bc:	54d0      	strb	r0, [r2, r3]
 80023be:	f000 fad5 	bl	800296c <my_putchar>
 80023c2:	e038      	b.n	8002436 <do_cmd+0x9a>
                 my_putchar('\n');
 80023c4:	200a      	movs	r0, #10
 80023c6:	f000 fad1 	bl	800296c <my_putchar>
                 cmd_buf[idx] = '\0';
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <do_cmd+0xf4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4831      	ldr	r0, [pc, #196]	; (8002494 <do_cmd+0xf8>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	54c2      	strb	r2, [r0, r3]
                 if(!strncmp(cmd_buf,"!!",2))
 80023d4:	2202      	movs	r2, #2
 80023d6:	4930      	ldr	r1, [pc, #192]	; (8002498 <do_cmd+0xfc>)
 80023d8:	f006 f84a 	bl	8008470 <strncmp>
 80023dc:	b170      	cbz	r0, 80023fc <do_cmd+0x60>
                 strcpy(buf,cmd_buf);
 80023de:	492d      	ldr	r1, [pc, #180]	; (8002494 <do_cmd+0xf8>)
 80023e0:	4668      	mov	r0, sp
 80023e2:	f006 f83d 	bl	8008460 <strcpy>
                 for( i = 0 ; i < 6 ; i ++) av[i] = &avbuf[i][0];
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	dc0c      	bgt.n	8002406 <do_cmd+0x6a>
 80023ec:	4a2b      	ldr	r2, [pc, #172]	; (800249c <do_cmd+0x100>)
 80023ee:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 80023f2:	492b      	ldr	r1, [pc, #172]	; (80024a0 <do_cmd+0x104>)
 80023f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80023f8:	3301      	adds	r3, #1
 80023fa:	e7f5      	b.n	80023e8 <do_cmd+0x4c>
                         strcpy(cmd_buf,old_buf);
 80023fc:	4929      	ldr	r1, [pc, #164]	; (80024a4 <do_cmd+0x108>)
 80023fe:	4825      	ldr	r0, [pc, #148]	; (8002494 <do_cmd+0xf8>)
 8002400:	f006 f82e 	bl	8008460 <strcpy>
 8002404:	e7eb      	b.n	80023de <do_cmd+0x42>
                 ac = get_args(cmd_buf, av);
 8002406:	4926      	ldr	r1, [pc, #152]	; (80024a0 <do_cmd+0x104>)
 8002408:	4822      	ldr	r0, [pc, #136]	; (8002494 <do_cmd+0xf8>)
 800240a:	f7ff ff99 	bl	8002340 <get_args>
 800240e:	4604      	mov	r4, r0
                 if(idx == 0 || !ac) {
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <do_cmd+0xf4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b103      	cbz	r3, 8002418 <do_cmd+0x7c>
 8002416:	b988      	cbnz	r0, 800243c <do_cmd+0xa0>
                         idx = 0;
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <do_cmd+0xf4>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
                         printf("%s-%s> ",prompt,version); fflush(stdout);
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <do_cmd+0x10c>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <do_cmd+0x110>)
 8002424:	6819      	ldr	r1, [r3, #0]
 8002426:	4822      	ldr	r0, [pc, #136]	; (80024b0 <do_cmd+0x114>)
 8002428:	f005 fec0 	bl	80081ac <iprintf>
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <do_cmd+0x118>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6898      	ldr	r0, [r3, #8]
 8002432:	f005 fca9 	bl	8007d88 <fflush>
        }

        return 0;

}
 8002436:	2000      	movs	r0, #0
 8002438:	b020      	add	sp, #128	; 0x80
 800243a:	bd10      	pop	{r4, pc}
                 strcpy(old_buf,buf);
 800243c:	4669      	mov	r1, sp
 800243e:	4819      	ldr	r0, [pc, #100]	; (80024a4 <do_cmd+0x108>)
 8002440:	f006 f80e 	bl	8008460 <strcpy>
                 exec_cmd(av[0],ac, av);
 8002444:	4a16      	ldr	r2, [pc, #88]	; (80024a0 <do_cmd+0x104>)
 8002446:	4621      	mov	r1, r4
 8002448:	6810      	ldr	r0, [r2, #0]
 800244a:	f7ff ff53 	bl	80022f4 <exec_cmd>
                 printf("%s-%s> ",prompt,version); fflush(stdout);
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <do_cmd+0x10c>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <do_cmd+0x110>)
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	4816      	ldr	r0, [pc, #88]	; (80024b0 <do_cmd+0x114>)
 8002458:	f005 fea8 	bl	80081ac <iprintf>
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <do_cmd+0x118>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6898      	ldr	r0, [r3, #8]
 8002462:	f005 fc91 	bl	8007d88 <fflush>
                 idx = 0;
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <do_cmd+0xf4>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e7e3      	b.n	8002436 <do_cmd+0x9a>
                 if(idx > 0) { idx --; my_putchar('\b'); my_putchar(' '); my_putchar('\b'); return 0;}
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <do_cmd+0xf4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	dddf      	ble.n	8002436 <do_cmd+0x9a>
 8002476:	3b01      	subs	r3, #1
 8002478:	4a05      	ldr	r2, [pc, #20]	; (8002490 <do_cmd+0xf4>)
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	f000 fa76 	bl	800296c <my_putchar>
 8002480:	2020      	movs	r0, #32
 8002482:	f000 fa73 	bl	800296c <my_putchar>
 8002486:	2008      	movs	r0, #8
 8002488:	f000 fa70 	bl	800296c <my_putchar>
 800248c:	e7d3      	b.n	8002436 <do_cmd+0x9a>
 800248e:	bf00      	nop
 8002490:	20000f58 	.word	0x20000f58
 8002494:	20000ed8 	.word	0x20000ed8
 8002498:	08009f8c 	.word	0x08009f8c
 800249c:	20001da8 	.word	0x20001da8
 80024a0:	20000000 	.word	0x20000000
 80024a4:	20000f5c 	.word	0x20000f5c
 80024a8:	2000001c 	.word	0x2000001c
 80024ac:	20000018 	.word	0x20000018
 80024b0:	08009f90 	.word	0x08009f90
 80024b4:	200000d0 	.word	0x200000d0

080024b8 <wait_input>:
extern int is_available(uart_rx_queue_t *Q);
extern int delete_uart_Q(uart_rx_queue_t *Q);
extern uart_rx_queue_t stdin_uart;

void wait_input()
{
 80024b8:	b508      	push	{r3, lr}
	while(1)
	{
		if(is_available(&stdin_uart)) {
 80024ba:	4807      	ldr	r0, [pc, #28]	; (80024d8 <wait_input+0x20>)
 80024bc:	f000 fa3f 	bl	800293e <is_available>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d0fa      	beq.n	80024ba <wait_input+0x2>
 80024c4:	e002      	b.n	80024cc <wait_input+0x14>
		  while(is_available(&stdin_uart))
		  {
			  int ch;
			  ch = delete_uart_Q(&stdin_uart);
 80024c6:	4804      	ldr	r0, [pc, #16]	; (80024d8 <wait_input+0x20>)
 80024c8:	f000 fa24 	bl	8002914 <delete_uart_Q>
		  while(is_available(&stdin_uart))
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <wait_input+0x20>)
 80024ce:	f000 fa36 	bl	800293e <is_available>
 80024d2:	2800      	cmp	r0, #0
 80024d4:	d1f7      	bne.n	80024c6 <wait_input+0xe>
		  }
          break;
		}
	}
}
 80024d6:	bd08      	pop	{r3, pc}
 80024d8:	20000050 	.word	0x20000050

080024dc <esp32_atlib_fn>:
void esp32_atlib_fn(int ac, char *av[])
{
 80024dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024e0:	460c      	mov	r4, r1
	// DTR RTS  EN  IO0
	//  1   1    1   1
	//  0   0    1   1
	//  1   0    0   1
	//  0   1    1   0 (IO0가 1인 상태에서 reset 풀리게
	if(!strcmp(av[1],"dtr"))
 80024e2:	4955      	ldr	r1, [pc, #340]	; (8002638 <esp32_atlib_fn+0x15c>)
 80024e4:	6860      	ldr	r0, [r4, #4]
 80024e6:	f7fd fe93 	bl	8000210 <strcmp>
 80024ea:	2800      	cmp	r0, #0
 80024ec:	d037      	beq.n	800255e <esp32_atlib_fn+0x82>
		GPIOA->BSRR = (1 << 15) << 0;	 GPIOB->BSRR = (1 << 7) << 16; wait_input();

		printf(" 0   1   1   0\n");
		GPIOA->BSRR = (1 << 15) << 16;	 GPIOB->BSRR = (1 << 7) << 0; wait_input();
	}
	if(!strcmp(av[1],"hreset"))
 80024ee:	4953      	ldr	r1, [pc, #332]	; (800263c <esp32_atlib_fn+0x160>)
 80024f0:	6860      	ldr	r0, [r4, #4]
 80024f2:	f7fd fe8d 	bl	8000210 <strcmp>
 80024f6:	2800      	cmp	r0, #0
 80024f8:	d060      	beq.n	80025bc <esp32_atlib_fn+0xe0>
	 HAL_Delay(1000);
//	 esp32_uart_reinit();

	}
#ifdef ARDUINO_CPP_ATLIB_USE
	if(!strcmp(av[1],"ver"))
 80024fa:	4951      	ldr	r1, [pc, #324]	; (8002640 <esp32_atlib_fn+0x164>)
 80024fc:	6860      	ldr	r0, [r4, #4]
 80024fe:	f7fd fe87 	bl	8000210 <strcmp>
 8002502:	2800      	cmp	r0, #0
 8002504:	d070      	beq.n	80025e8 <esp32_atlib_fn+0x10c>
	{
		char *res = ESP32_getVersion();
		printf("Version=[%s]\n",res);
	}
	if(!strcmp(av[1],"ap"))
 8002506:	494f      	ldr	r1, [pc, #316]	; (8002644 <esp32_atlib_fn+0x168>)
 8002508:	6860      	ldr	r0, [r4, #4]
 800250a:	f7fd fe81 	bl	8000210 <strcmp>
 800250e:	2800      	cmp	r0, #0
 8002510:	d071      	beq.n	80025f6 <esp32_atlib_fn+0x11a>
	{
		char *res = ESP32_apList();
		printf("AP=[%s]\n",res);
	}
#endif
	if(!strcmp(av[1],"cver"))
 8002512:	494d      	ldr	r1, [pc, #308]	; (8002648 <esp32_atlib_fn+0x16c>)
 8002514:	6860      	ldr	r0, [r4, #4]
 8002516:	f7fd fe7b 	bl	8000210 <strcmp>
 800251a:	2800      	cmp	r0, #0
 800251c:	d072      	beq.n	8002604 <esp32_atlib_fn+0x128>
	{
		char *res = ESP32_C_getVersion();
		printf("Version=[%s]\n",res);
	}

	if(!strcmp(av[1],"cap"))
 800251e:	494b      	ldr	r1, [pc, #300]	; (800264c <esp32_atlib_fn+0x170>)
 8002520:	6860      	ldr	r0, [r4, #4]
 8002522:	f7fd fe75 	bl	8000210 <strcmp>
 8002526:	2800      	cmp	r0, #0
 8002528:	d073      	beq.n	8002612 <esp32_atlib_fn+0x136>
	{
		char *res = ESP32_C_getAPList();
		printf("AP=[%s]\n",res);
	}
	if(!strcmp(av[1],"tcpserver"))
 800252a:	4949      	ldr	r1, [pc, #292]	; (8002650 <esp32_atlib_fn+0x174>)
 800252c:	6860      	ldr	r0, [r4, #4]
 800252e:	f7fd fe6f 	bl	8000210 <strcmp>
 8002532:	2800      	cmp	r0, #0
 8002534:	d074      	beq.n	8002620 <esp32_atlib_fn+0x144>
	{
		tcpserver_init();
	}
	if(!strcmp(av[1],"tcpclient"))
 8002536:	4947      	ldr	r1, [pc, #284]	; (8002654 <esp32_atlib_fn+0x178>)
 8002538:	6860      	ldr	r0, [r4, #4]
 800253a:	f7fd fe69 	bl	8000210 <strcmp>
 800253e:	2800      	cmp	r0, #0
 8002540:	d071      	beq.n	8002626 <esp32_atlib_fn+0x14a>
	{
		tcpclient_init();
	}
	if(!strcmp(av[1],"udpclient"))
 8002542:	4945      	ldr	r1, [pc, #276]	; (8002658 <esp32_atlib_fn+0x17c>)
 8002544:	6860      	ldr	r0, [r4, #4]
 8002546:	f7fd fe63 	bl	8000210 <strcmp>
 800254a:	2800      	cmp	r0, #0
 800254c:	d06e      	beq.n	800262c <esp32_atlib_fn+0x150>
	{
		udpclient_init();
	}
	if(!strcmp(av[1],"http"))
 800254e:	4943      	ldr	r1, [pc, #268]	; (800265c <esp32_atlib_fn+0x180>)
 8002550:	6860      	ldr	r0, [r4, #4]
 8002552:	f7fd fe5d 	bl	8000210 <strcmp>
 8002556:	2800      	cmp	r0, #0
 8002558:	d06b      	beq.n	8002632 <esp32_atlib_fn+0x156>
	{
		httpget_init();
	}
}
 800255a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("DTR RTS  EN IO0\n");
 800255e:	4840      	ldr	r0, [pc, #256]	; (8002660 <esp32_atlib_fn+0x184>)
 8002560:	f005 fec0 	bl	80082e4 <puts>
		printf(" 1   1   1   1\n");
 8002564:	483f      	ldr	r0, [pc, #252]	; (8002664 <esp32_atlib_fn+0x188>)
 8002566:	f005 febd 	bl	80082e4 <puts>
		GPIOA->BSRR = (1 << 15) << 0 ;	 GPIOB->BSRR = (1 << 7) << 0 ; wait_input();
 800256a:	4e3f      	ldr	r6, [pc, #252]	; (8002668 <esp32_atlib_fn+0x18c>)
 800256c:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
 8002570:	f8c6 a018 	str.w	sl, [r6, #24]
 8002574:	4d3d      	ldr	r5, [pc, #244]	; (800266c <esp32_atlib_fn+0x190>)
 8002576:	2780      	movs	r7, #128	; 0x80
 8002578:	61af      	str	r7, [r5, #24]
 800257a:	f7ff ff9d 	bl	80024b8 <wait_input>
		printf(" 0   0   1   1\n");
 800257e:	483c      	ldr	r0, [pc, #240]	; (8002670 <esp32_atlib_fn+0x194>)
 8002580:	f005 feb0 	bl	80082e4 <puts>
		GPIOA->BSRR = (1 << 15) << 16;	 GPIOB->BSRR = (1 << 7) << 16; wait_input();
 8002584:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002588:	f8c6 8018 	str.w	r8, [r6, #24]
 800258c:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 8002590:	f8c5 9018 	str.w	r9, [r5, #24]
 8002594:	f7ff ff90 	bl	80024b8 <wait_input>
		printf(" 1   0   0   1\n");
 8002598:	4836      	ldr	r0, [pc, #216]	; (8002674 <esp32_atlib_fn+0x198>)
 800259a:	f005 fea3 	bl	80082e4 <puts>
		GPIOA->BSRR = (1 << 15) << 0;	 GPIOB->BSRR = (1 << 7) << 16; wait_input();
 800259e:	f8c6 a018 	str.w	sl, [r6, #24]
 80025a2:	f8c5 9018 	str.w	r9, [r5, #24]
 80025a6:	f7ff ff87 	bl	80024b8 <wait_input>
		printf(" 0   1   1   0\n");
 80025aa:	4833      	ldr	r0, [pc, #204]	; (8002678 <esp32_atlib_fn+0x19c>)
 80025ac:	f005 fe9a 	bl	80082e4 <puts>
		GPIOA->BSRR = (1 << 15) << 16;	 GPIOB->BSRR = (1 << 7) << 0; wait_input();
 80025b0:	f8c6 8018 	str.w	r8, [r6, #24]
 80025b4:	61af      	str	r7, [r5, #24]
 80025b6:	f7ff ff7f 	bl	80024b8 <wait_input>
 80025ba:	e798      	b.n	80024ee <esp32_atlib_fn+0x12>
	 GPIOA->BSRR = (1 << 15);
 80025bc:	4d2a      	ldr	r5, [pc, #168]	; (8002668 <esp32_atlib_fn+0x18c>)
 80025be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025c2:	61ab      	str	r3, [r5, #24]
	 GPIOB->BSRR = (1 << 7) << 16;
 80025c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025c8:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80025cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025d0:	619a      	str	r2, [r3, #24]
	 HAL_Delay(10);
 80025d2:	200a      	movs	r0, #10
 80025d4:	f001 fa16 	bl	8003a04 <HAL_Delay>
	 GPIOA->BSRR = (1 << 15) << 16;
 80025d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80025dc:	61ab      	str	r3, [r5, #24]
	 HAL_Delay(1000);
 80025de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025e2:	f001 fa0f 	bl	8003a04 <HAL_Delay>
 80025e6:	e788      	b.n	80024fa <esp32_atlib_fn+0x1e>
		char *res = ESP32_getVersion();
 80025e8:	f7ff f802 	bl	80015f0 <ESP32_getVersion>
 80025ec:	4601      	mov	r1, r0
		printf("Version=[%s]\n",res);
 80025ee:	4823      	ldr	r0, [pc, #140]	; (800267c <esp32_atlib_fn+0x1a0>)
 80025f0:	f005 fddc 	bl	80081ac <iprintf>
 80025f4:	e787      	b.n	8002506 <esp32_atlib_fn+0x2a>
		char *res = ESP32_apList();
 80025f6:	f7ff f883 	bl	8001700 <ESP32_apList>
 80025fa:	4601      	mov	r1, r0
		printf("AP=[%s]\n",res);
 80025fc:	4820      	ldr	r0, [pc, #128]	; (8002680 <esp32_atlib_fn+0x1a4>)
 80025fe:	f005 fdd5 	bl	80081ac <iprintf>
 8002602:	e786      	b.n	8002512 <esp32_atlib_fn+0x36>
		char *res = ESP32_C_getVersion();
 8002604:	f7fe fa46 	bl	8000a94 <ESP32_C_getVersion>
 8002608:	4601      	mov	r1, r0
		printf("Version=[%s]\n",res);
 800260a:	481c      	ldr	r0, [pc, #112]	; (800267c <esp32_atlib_fn+0x1a0>)
 800260c:	f005 fdce 	bl	80081ac <iprintf>
 8002610:	e785      	b.n	800251e <esp32_atlib_fn+0x42>
		char *res = ESP32_C_getAPList();
 8002612:	f7fe fb1d 	bl	8000c50 <ESP32_C_getAPList>
 8002616:	4601      	mov	r1, r0
		printf("AP=[%s]\n",res);
 8002618:	4819      	ldr	r0, [pc, #100]	; (8002680 <esp32_atlib_fn+0x1a4>)
 800261a:	f005 fdc7 	bl	80081ac <iprintf>
 800261e:	e784      	b.n	800252a <esp32_atlib_fn+0x4e>
		tcpserver_init();
 8002620:	f7ff fad8 	bl	8001bd4 <tcpserver_init>
 8002624:	e787      	b.n	8002536 <esp32_atlib_fn+0x5a>
		tcpclient_init();
 8002626:	f7ff fa03 	bl	8001a30 <tcpclient_init>
 800262a:	e78a      	b.n	8002542 <esp32_atlib_fn+0x66>
		udpclient_init();
 800262c:	f7ff fbb8 	bl	8001da0 <udpclient_init>
 8002630:	e78d      	b.n	800254e <esp32_atlib_fn+0x72>
		httpget_init();
 8002632:	f7ff f931 	bl	8001898 <httpget_init>
}
 8002636:	e790      	b.n	800255a <esp32_atlib_fn+0x7e>
 8002638:	0800a08c 	.word	0x0800a08c
 800263c:	0800a0e0 	.word	0x0800a0e0
 8002640:	0800a0e8 	.word	0x0800a0e8
 8002644:	0800a0fc 	.word	0x0800a0fc
 8002648:	0800a10c 	.word	0x0800a10c
 800264c:	0800a114 	.word	0x0800a114
 8002650:	0800a118 	.word	0x0800a118
 8002654:	0800a124 	.word	0x0800a124
 8002658:	0800a130 	.word	0x0800a130
 800265c:	0800a13c 	.word	0x0800a13c
 8002660:	0800a090 	.word	0x0800a090
 8002664:	0800a0a0 	.word	0x0800a0a0
 8002668:	40020000 	.word	0x40020000
 800266c:	40020400 	.word	0x40020400
 8002670:	0800a0b0 	.word	0x0800a0b0
 8002674:	0800a0c0 	.word	0x0800a0c0
 8002678:	0800a0d0 	.word	0x0800a0d0
 800267c:	0800a0ec 	.word	0x0800a0ec
 8002680:	0800a100 	.word	0x0800a100

08002684 <esp32_fn>:
void esp32_fn(int ac, char *av[])
{
    uint32_t tick;
    int i;
    char tmp1[100];
    if(ac > 1)
 8002684:	2801      	cmp	r0, #1
 8002686:	dc00      	bgt.n	800268a <esp32_fn+0x6>
 8002688:	4770      	bx	lr
{
 800268a:	b570      	push	{r4, r5, r6, lr}
 800268c:	b09a      	sub	sp, #104	; 0x68
 800268e:	4605      	mov	r5, r0
 8002690:	460e      	mov	r6, r1
    {
    	strcpy(tmp1,av[1]);
 8002692:	6849      	ldr	r1, [r1, #4]
 8002694:	a801      	add	r0, sp, #4
 8002696:	f005 fee3 	bl	8008460 <strcpy>
    	for( i = 0 ; i < ac - 2; i ++) sprintf(tmp1+strlen(tmp1)," %s",av[i+2]);
 800269a:	2400      	movs	r4, #0
 800269c:	e00b      	b.n	80026b6 <esp32_fn+0x32>
 800269e:	a801      	add	r0, sp, #4
 80026a0:	f7fd fdc0 	bl	8000224 <strlen>
 80026a4:	1ca3      	adds	r3, r4, #2
 80026a6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80026aa:	4919      	ldr	r1, [pc, #100]	; (8002710 <esp32_fn+0x8c>)
 80026ac:	ab01      	add	r3, sp, #4
 80026ae:	4418      	add	r0, r3
 80026b0:	f005 fe38 	bl	8008324 <siprintf>
 80026b4:	3401      	adds	r4, #1
 80026b6:	1eab      	subs	r3, r5, #2
 80026b8:	42a3      	cmp	r3, r4
 80026ba:	dcf0      	bgt.n	800269e <esp32_fn+0x1a>
    	sprintf(tmp1+strlen(tmp1),"\r\n");
 80026bc:	ac01      	add	r4, sp, #4
 80026be:	4620      	mov	r0, r4
 80026c0:	f7fd fdb0 	bl	8000224 <strlen>
 80026c4:	1822      	adds	r2, r4, r0
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <esp32_fn+0x90>)
 80026c8:	8819      	ldrh	r1, [r3, #0]
 80026ca:	789b      	ldrb	r3, [r3, #2]
 80026cc:	5221      	strh	r1, [r4, r0]
 80026ce:	7093      	strb	r3, [r2, #2]
//        printf("[ESP32]=[%s]",tmp1);

        HAL_UART_Transmit(&huart3,(uint8_t *)tmp1,strlen(tmp1),1000);
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7fd fda7 	bl	8000224 <strlen>
 80026d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026da:	b282      	uxth	r2, r0
 80026dc:	4621      	mov	r1, r4
 80026de:	480e      	ldr	r0, [pc, #56]	; (8002718 <esp32_fn+0x94>)
 80026e0:	f003 f91f 	bl	8005922 <HAL_UART_Transmit>

        tick = 0;
 80026e4:	2400      	movs	r4, #0
        while(tick < 1000)
 80026e6:	e00e      	b.n	8002706 <esp32_fn+0x82>
        {
            if(is_available(&AT_UART_RX_Q))
            {
                int ch;
                ch = delete_uart_Q(&AT_UART_RX_Q);
 80026e8:	480c      	ldr	r0, [pc, #48]	; (800271c <esp32_fn+0x98>)
 80026ea:	f000 f913 	bl	8002914 <delete_uart_Q>
                printf("%c",ch);
 80026ee:	f005 fd75 	bl	80081dc <putchar>
                tick = 0;
 80026f2:	2400      	movs	r4, #0
            if(is_available(&AT_UART_RX_Q))
 80026f4:	4809      	ldr	r0, [pc, #36]	; (800271c <esp32_fn+0x98>)
 80026f6:	f000 f922 	bl	800293e <is_available>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	d1f4      	bne.n	80026e8 <esp32_fn+0x64>
            }
            else
            {
            	tick ++;
 80026fe:	3401      	adds	r4, #1
            	HAL_Delay(1);
 8002700:	2001      	movs	r0, #1
 8002702:	f001 f97f 	bl	8003a04 <HAL_Delay>
        while(tick < 1000)
 8002706:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800270a:	d3f3      	bcc.n	80026f4 <esp32_fn+0x70>
            }
        }
    }
}
 800270c:	b01a      	add	sp, #104	; 0x68
 800270e:	bd70      	pop	{r4, r5, r6, pc}
 8002710:	0800a144 	.word	0x0800a144
 8002714:	08009d18 	.word	0x08009d18
 8002718:	20001134 	.word	0x20001134
 800271c:	20000020 	.word	0x20000020

08002720 <led_fn>:
#include "main.h"
#include "uart.h"
extern int is_available(uart_rx_queue_t *Q);
extern uart_rx_queue_t stdin_uart;
void led_fn(int ac, char *av[])
{
 8002720:	b530      	push	{r4, r5, lr}
 8002722:	b083      	sub	sp, #12
 8002724:	4604      	mov	r4, r0
 8002726:	460d      	mov	r5, r1
    uint32_t led;
    int i;
    printf("LED..\n");
 8002728:	481b      	ldr	r0, [pc, #108]	; (8002798 <led_fn+0x78>)
 800272a:	f005 fddb 	bl	80082e4 <puts>
    led = 1;
 800272e:	2301      	movs	r3, #1
 8002730:	9301      	str	r3, [sp, #4]
    if(ac == 2)
 8002732:	2c02      	cmp	r4, #2
 8002734:	d001      	beq.n	800273a <led_fn+0x1a>
{
 8002736:	2400      	movs	r4, #0
 8002738:	e026      	b.n	8002788 <led_fn+0x68>
    {
    	sscanf(av[1],"%d",&led);
 800273a:	aa01      	add	r2, sp, #4
 800273c:	4917      	ldr	r1, [pc, #92]	; (800279c <led_fn+0x7c>)
 800273e:	6868      	ldr	r0, [r5, #4]
 8002740:	f005 fe10 	bl	8008364 <siscanf>
    	while(1)
    	{
    	GPIOB->BSRR = 1 << led;
 8002744:	2401      	movs	r4, #1
 8002746:	9b01      	ldr	r3, [sp, #4]
 8002748:	fa04 f303 	lsl.w	r3, r4, r3
 800274c:	4d14      	ldr	r5, [pc, #80]	; (80027a0 <led_fn+0x80>)
 800274e:	61ab      	str	r3, [r5, #24]
    	HAL_Delay(200);
 8002750:	20c8      	movs	r0, #200	; 0xc8
 8002752:	f001 f957 	bl	8003a04 <HAL_Delay>
    	GPIOB->BSRR = (1 << led) << 16;
 8002756:	9b01      	ldr	r3, [sp, #4]
 8002758:	409c      	lsls	r4, r3
 800275a:	0424      	lsls	r4, r4, #16
 800275c:	61ac      	str	r4, [r5, #24]
    	HAL_Delay(200);
 800275e:	20c8      	movs	r0, #200	; 0xc8
 8002760:	f001 f950 	bl	8003a04 <HAL_Delay>
        if(is_available(&stdin_uart)) break;
 8002764:	480f      	ldr	r0, [pc, #60]	; (80027a4 <led_fn+0x84>)
 8002766:	f000 f8ea 	bl	800293e <is_available>
 800276a:	2800      	cmp	r0, #0
 800276c:	d0ea      	beq.n	8002744 <led_fn+0x24>
 800276e:	e7e2      	b.n	8002736 <led_fn+0x16>
    	}
    }
    for( i = 0 ; i < 4 ; i ++, led <<= 1)
    {
            GPIOB->ODR = (led & 0xf);
 8002770:	9b01      	ldr	r3, [sp, #4]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <led_fn+0x80>)
 8002778:	6153      	str	r3, [r2, #20]
            HAL_Delay(200);
 800277a:	20c8      	movs	r0, #200	; 0xc8
 800277c:	f001 f942 	bl	8003a04 <HAL_Delay>
    for( i = 0 ; i < 4 ; i ++, led <<= 1)
 8002780:	3401      	adds	r4, #1
 8002782:	9b01      	ldr	r3, [sp, #4]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	2c03      	cmp	r4, #3
 800278a:	ddf1      	ble.n	8002770 <led_fn+0x50>
    }
    GPIOB->ODR = 0;
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <led_fn+0x80>)
 800278e:	2200      	movs	r2, #0
 8002790:	615a      	str	r2, [r3, #20]
}
 8002792:	b003      	add	sp, #12
 8002794:	bd30      	pop	{r4, r5, pc}
 8002796:	bf00      	nop
 8002798:	0800a148 	.word	0x0800a148
 800279c:	08009b1c 	.word	0x08009b1c
 80027a0:	40020400 	.word	0x40020400
 80027a4:	20000050 	.word	0x20000050

080027a8 <switch_fn>:

void switch_fn(int ac, char *av[])
{
 80027a8:	b508      	push	{r3, lr}
        uint32_t prev,flag = 0;
        prev = HAL_GetTick();
 80027aa:	f001 f925 	bl	80039f8 <HAL_GetTick>
 80027ae:	e007      	b.n	80027c0 <switch_fn+0x18>
        while(1)
        {
        	if((INPUT1_GPIO_Port->IDR & INPUT1_Pin) == 0) LED1_GPIO_Port-> BSRR = LED1_Pin;
        	else LED1_GPIO_Port-> BSRR = LED1_Pin << 16;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <switch_fn+0x3c>)
 80027b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027b6:	619a      	str	r2, [r3, #24]
 80027b8:	e00a      	b.n	80027d0 <switch_fn+0x28>
        	if((INPUT2_GPIO_Port->IDR & INPUT2_Pin) == 0) LED2_GPIO_Port-> BSRR = LED2_Pin;
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <switch_fn+0x3c>)
 80027bc:	2204      	movs	r2, #4
 80027be:	619a      	str	r2, [r3, #24]
        	if((INPUT1_GPIO_Port->IDR & INPUT1_Pin) == 0) LED1_GPIO_Port-> BSRR = LED1_Pin;
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <switch_fn+0x3c>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80027c8:	d1f2      	bne.n	80027b0 <switch_fn+0x8>
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <switch_fn+0x3c>)
 80027cc:	2202      	movs	r2, #2
 80027ce:	619a      	str	r2, [r3, #24]
        	if((INPUT2_GPIO_Port->IDR & INPUT2_Pin) == 0) LED2_GPIO_Port-> BSRR = LED2_Pin;
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <switch_fn+0x40>)
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f013 0f10 	tst.w	r3, #16
 80027d8:	d0ef      	beq.n	80027ba <switch_fn+0x12>
        	else  LED2_GPIO_Port-> BSRR = LED2_Pin << 16;
 80027da:	4b02      	ldr	r3, [pc, #8]	; (80027e4 <switch_fn+0x3c>)
 80027dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80027e0:	619a      	str	r2, [r3, #24]
 80027e2:	e7ed      	b.n	80027c0 <switch_fn+0x18>
 80027e4:	40020400 	.word	0x40020400
 80027e8:	40020800 	.word	0x40020800

080027ec <rs485_fn>:
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart4;
static uint8_t tmp1[128],tmp4[128];
void rs485_fn(int ac, char *av[])
{
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	4604      	mov	r4, r0
 80027f0:	460d      	mov	r5, r1
    uint32_t led;
    int i;
    printf("RS485..\n");
 80027f2:	482a      	ldr	r0, [pc, #168]	; (800289c <rs485_fn+0xb0>)
 80027f4:	f005 fd76 	bl	80082e4 <puts>
    if(ac == 3 && !strcmp("tx",av[1]))
 80027f8:	2c03      	cmp	r4, #3
 80027fa:	d14a      	bne.n	8002892 <rs485_fn+0xa6>
 80027fc:	6869      	ldr	r1, [r5, #4]
 80027fe:	4828      	ldr	r0, [pc, #160]	; (80028a0 <rs485_fn+0xb4>)
 8002800:	f7fd fd06 	bl	8000210 <strcmp>
 8002804:	2800      	cmp	r0, #0
 8002806:	d144      	bne.n	8002892 <rs485_fn+0xa6>
    {
    	if(av[2][0] == '1') // Uart1 tx
 8002808:	68ab      	ldr	r3, [r5, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b31      	cmp	r3, #49	; 0x31
 800280e:	d020      	beq.n	8002852 <rs485_fn+0x66>
            HAL_Delay(1);
            UART1_TXEN_GPIO_Port->BSRR =  UART1_TXEN_Pin << 16;
		}
		else // Uart4 tx
		{
			printf("Tx uart4\n");
 8002810:	4824      	ldr	r0, [pc, #144]	; (80028a4 <rs485_fn+0xb8>)
 8002812:	f005 fd67 	bl	80082e4 <puts>
			sprintf(tmp4,"MSG=[Uart 4 to Uart 1]\n");
 8002816:	4e24      	ldr	r6, [pc, #144]	; (80028a8 <rs485_fn+0xbc>)
 8002818:	4634      	mov	r4, r6
 800281a:	4d24      	ldr	r5, [pc, #144]	; (80028ac <rs485_fn+0xc0>)
 800281c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800281e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002820:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002824:	e884 0003 	stmia.w	r4, {r0, r1}
            UART4_TXEN_GPIO_Port->BSRR =  UART4_TXEN_Pin;
 8002828:	4c21      	ldr	r4, [pc, #132]	; (80028b0 <rs485_fn+0xc4>)
 800282a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800282e:	61a3      	str	r3, [r4, #24]
            HAL_UART_Transmit(&huart4,(uint8_t *)tmp4,strlen(tmp4),1000);
 8002830:	4630      	mov	r0, r6
 8002832:	f7fd fcf7 	bl	8000224 <strlen>
 8002836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800283a:	b282      	uxth	r2, r0
 800283c:	4631      	mov	r1, r6
 800283e:	481d      	ldr	r0, [pc, #116]	; (80028b4 <rs485_fn+0xc8>)
 8002840:	f003 f86f 	bl	8005922 <HAL_UART_Transmit>
            HAL_Delay(1);
 8002844:	2001      	movs	r0, #1
 8002846:	f001 f8dd 	bl	8003a04 <HAL_Delay>
            UART4_TXEN_GPIO_Port->BSRR =  UART4_TXEN_Pin << 16;
 800284a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800284e:	61a3      	str	r3, [r4, #24]
 8002850:	e022      	b.n	8002898 <rs485_fn+0xac>
			printf("Tx uart1\n");
 8002852:	4819      	ldr	r0, [pc, #100]	; (80028b8 <rs485_fn+0xcc>)
 8002854:	f005 fd46 	bl	80082e4 <puts>
			sprintf(tmp1,"MSG=[Uart 1 to Uart 4]\n");
 8002858:	4e18      	ldr	r6, [pc, #96]	; (80028bc <rs485_fn+0xd0>)
 800285a:	4634      	mov	r4, r6
 800285c:	4d18      	ldr	r5, [pc, #96]	; (80028c0 <rs485_fn+0xd4>)
 800285e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002862:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002866:	e884 0003 	stmia.w	r4, {r0, r1}
            UART1_TXEN_GPIO_Port->BSRR =  UART1_TXEN_Pin;
 800286a:	4c11      	ldr	r4, [pc, #68]	; (80028b0 <rs485_fn+0xc4>)
 800286c:	2320      	movs	r3, #32
 800286e:	61a3      	str	r3, [r4, #24]
            HAL_UART_Transmit(&huart1,(uint8_t *)tmp1,strlen(tmp1),1000);
 8002870:	4630      	mov	r0, r6
 8002872:	f7fd fcd7 	bl	8000224 <strlen>
 8002876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287a:	b282      	uxth	r2, r0
 800287c:	4631      	mov	r1, r6
 800287e:	4811      	ldr	r0, [pc, #68]	; (80028c4 <rs485_fn+0xd8>)
 8002880:	f003 f84f 	bl	8005922 <HAL_UART_Transmit>
            HAL_Delay(1);
 8002884:	2001      	movs	r0, #1
 8002886:	f001 f8bd 	bl	8003a04 <HAL_Delay>
            UART1_TXEN_GPIO_Port->BSRR =  UART1_TXEN_Pin << 16;
 800288a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800288e:	61a3      	str	r3, [r4, #24]
 8002890:	e002      	b.n	8002898 <rs485_fn+0xac>
		}
    }
    else
    {
    	printf("Usage : rs485 tx [1/3]\n");
 8002892:	480d      	ldr	r0, [pc, #52]	; (80028c8 <rs485_fn+0xdc>)
 8002894:	f005 fd26 	bl	80082e4 <puts>
    }
}
 8002898:	bd70      	pop	{r4, r5, r6, pc}
 800289a:	bf00      	nop
 800289c:	0800a150 	.word	0x0800a150
 80028a0:	08009f60 	.word	0x08009f60
 80028a4:	0800a17c 	.word	0x0800a17c
 80028a8:	2000105c 	.word	0x2000105c
 80028ac:	0800a188 	.word	0x0800a188
 80028b0:	40020800 	.word	0x40020800
 80028b4:	20003d04 	.word	0x20003d04
 80028b8:	0800a158 	.word	0x0800a158
 80028bc:	20000fdc 	.word	0x20000fdc
 80028c0:	0800a164 	.word	0x0800a164
 80028c4:	20003c7c 	.word	0x20003c7c
 80028c8:	0800a1a0 	.word	0x0800a1a0

080028cc <insert_uart_Q>:
		.data = esp32_q_buf,
		.size = ESP32_UART_RX_Q_SZ
};

int insert_uart_Q(uart_rx_queue_t *Q, uint8_t ch)
{
 80028cc:	b430      	push	{r4, r5}
        if((Q->wr + 1) % Q->size == Q->rd)
 80028ce:	6885      	ldr	r5, [r0, #8]
 80028d0:	1c6c      	adds	r4, r5, #1
 80028d2:	6842      	ldr	r2, [r0, #4]
 80028d4:	fbb4 f3f2 	udiv	r3, r4, r2
 80028d8:	fb02 4313 	mls	r3, r2, r3, r4
 80028dc:	68c2      	ldr	r2, [r0, #12]
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00c      	beq.n	80028fc <insert_uart_Q+0x30>
        {
                return -1; // Full
        }
        Q->data[Q->wr] = ch;
 80028e2:	6803      	ldr	r3, [r0, #0]
 80028e4:	5559      	strb	r1, [r3, r5]
        Q->wr = (Q->wr + 1) % Q->size;
 80028e6:	6883      	ldr	r3, [r0, #8]
 80028e8:	3301      	adds	r3, #1
 80028ea:	6841      	ldr	r1, [r0, #4]
 80028ec:	fbb3 f2f1 	udiv	r2, r3, r1
 80028f0:	fb01 3312 	mls	r3, r1, r2, r3
 80028f4:	6083      	str	r3, [r0, #8]
        return 0;
 80028f6:	2000      	movs	r0, #0
}
 80028f8:	bc30      	pop	{r4, r5}
 80028fa:	4770      	bx	lr
                return -1; // Full
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002900:	e7fa      	b.n	80028f8 <insert_uart_Q+0x2c>
	...

08002904 <insert_uart_AT_Q>:

int insert_uart_AT_Q(uint8_t ch)
{
 8002904:	b508      	push	{r3, lr}
 8002906:	4601      	mov	r1, r0
	return insert_uart_Q(&esp32_uart3, ch);
 8002908:	4801      	ldr	r0, [pc, #4]	; (8002910 <insert_uart_AT_Q+0xc>)
 800290a:	f7ff ffdf 	bl	80028cc <insert_uart_Q>
}
 800290e:	bd08      	pop	{r3, pc}
 8002910:	20000020 	.word	0x20000020

08002914 <delete_uart_Q>:

int delete_uart_Q(uart_rx_queue_t *Q)
{
        int ch;
        if(Q->wr == Q->rd) return -1;
 8002914:	6881      	ldr	r1, [r0, #8]
 8002916:	68c2      	ldr	r2, [r0, #12]
 8002918:	4291      	cmp	r1, r2
 800291a:	d00d      	beq.n	8002938 <delete_uart_Q+0x24>
{
 800291c:	b410      	push	{r4}
 800291e:	4603      	mov	r3, r0
        ch = Q->data[Q->rd];
 8002920:	6801      	ldr	r1, [r0, #0]
 8002922:	5c88      	ldrb	r0, [r1, r2]
        Q->rd = (Q->rd + 1) % Q->size;
 8002924:	3201      	adds	r2, #1
 8002926:	685c      	ldr	r4, [r3, #4]
 8002928:	fbb2 f1f4 	udiv	r1, r2, r4
 800292c:	fb04 2211 	mls	r2, r4, r1, r2
 8002930:	60da      	str	r2, [r3, #12]
        return ch;
}
 8002932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002936:	4770      	bx	lr
        if(Q->wr == Q->rd) return -1;
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
}
 800293c:	4770      	bx	lr

0800293e <is_available>:

int is_available(uart_rx_queue_t *Q)
{
        return (Q->wr != Q->rd);
 800293e:	6882      	ldr	r2, [r0, #8]
 8002940:	68c0      	ldr	r0, [r0, #12]
}
 8002942:	1a10      	subs	r0, r2, r0
 8002944:	bf18      	it	ne
 8002946:	2001      	movne	r0, #1
 8002948:	4770      	bx	lr

0800294a <uart_rx_ready_IT>:

void uart_rx_ready_IT(UART_HandleTypeDef *huart,uint8_t *buf)
{
 800294a:	b508      	push	{r3, lr}
         HAL_UART_Receive_IT(huart, buf , 1);
 800294c:	2201      	movs	r2, #1
 800294e:	f003 fa38 	bl	8005dc2 <HAL_UART_Receive_IT>
}
 8002952:	bd08      	pop	{r3, pc}

08002954 <_write>:

#include <stdio.h>
int _write(int file, char *data, int len)
{
 8002954:	b510      	push	{r4, lr}
 8002956:	4614      	mov	r4, r2
    int bytes_written;

    HAL_UART_Transmit(&huart2,(uint8_t *)data, len,1000);
 8002958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295c:	b292      	uxth	r2, r2
 800295e:	4802      	ldr	r0, [pc, #8]	; (8002968 <_write+0x14>)
 8002960:	f002 ffdf 	bl	8005922 <HAL_UART_Transmit>

    bytes_written = len;
    return bytes_written;
}
 8002964:	4620      	mov	r0, r4
 8002966:	bd10      	pop	{r4, pc}
 8002968:	20003da0 	.word	0x20003da0

0800296c <my_putchar>:

void my_putchar(char c)
{
 800296c:	b500      	push	{lr}
 800296e:	b083      	sub	sp, #12
 8002970:	f88d 0007 	strb.w	r0, [sp, #7]
        _write(1,&c,1);
 8002974:	2201      	movs	r2, #1
 8002976:	f10d 0107 	add.w	r1, sp, #7
 800297a:	4610      	mov	r0, r2
 800297c:	f7ff ffea 	bl	8002954 <_write>
}
 8002980:	b003      	add	sp, #12
 8002982:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002988 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002988:	b570      	push	{r4, r5, r6, lr}
 800298a:	4604      	mov	r4, r0
        if(huart == &huart1)
 800298c:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <HAL_UART_RxCpltCallback+0x60>)
 800298e:	4298      	cmp	r0, r3
 8002990:	d006      	beq.n	80029a0 <HAL_UART_RxCpltCallback+0x18>
        {
            rx_flag1 = 1;
            insert_uart_Q(&rs485_uart1,rxBuff1[0]);
            HAL_UART_Receive_IT(&huart1, rxBuff1 , 1);
        }
        if(huart == &huart2)
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <HAL_UART_RxCpltCallback+0x64>)
 8002994:	429c      	cmp	r4, r3
 8002996:	d011      	beq.n	80029bc <HAL_UART_RxCpltCallback+0x34>
        	volatile unsigned int i;
            insert_uart_Q(&rs485_uart3,rxBuff3[0]);
            HAL_UART_Receive_IT(&huart3, rxBuff3 , 1);
        }
#endif
        if(huart == &huart4)
 8002998:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_UART_RxCpltCallback+0x68>)
 800299a:	429c      	cmp	r4, r3
 800299c:	d019      	beq.n	80029d2 <HAL_UART_RxCpltCallback+0x4a>
        {
        	volatile unsigned int i;
            insert_uart_Q(&rs485_uart4,rxBuff4[0]);
            HAL_UART_Receive_IT(&huart4, rxBuff4 , 1);
        }
}
 800299e:	bd70      	pop	{r4, r5, r6, pc}
            rx_flag1 = 1;
 80029a0:	2601      	movs	r6, #1
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_UART_RxCpltCallback+0x6c>)
 80029a4:	601e      	str	r6, [r3, #0]
            insert_uart_Q(&rs485_uart1,rxBuff1[0]);
 80029a6:	4d14      	ldr	r5, [pc, #80]	; (80029f8 <HAL_UART_RxCpltCallback+0x70>)
 80029a8:	7829      	ldrb	r1, [r5, #0]
 80029aa:	4814      	ldr	r0, [pc, #80]	; (80029fc <HAL_UART_RxCpltCallback+0x74>)
 80029ac:	f7ff ff8e 	bl	80028cc <insert_uart_Q>
            HAL_UART_Receive_IT(&huart1, rxBuff1 , 1);
 80029b0:	4632      	mov	r2, r6
 80029b2:	4629      	mov	r1, r5
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <HAL_UART_RxCpltCallback+0x60>)
 80029b6:	f003 fa04 	bl	8005dc2 <HAL_UART_Receive_IT>
 80029ba:	e7ea      	b.n	8002992 <HAL_UART_RxCpltCallback+0xa>
                insert_uart_Q(&stdin_uart,rxBuff2[0]);
 80029bc:	4d10      	ldr	r5, [pc, #64]	; (8002a00 <HAL_UART_RxCpltCallback+0x78>)
 80029be:	7829      	ldrb	r1, [r5, #0]
 80029c0:	4810      	ldr	r0, [pc, #64]	; (8002a04 <HAL_UART_RxCpltCallback+0x7c>)
 80029c2:	f7ff ff83 	bl	80028cc <insert_uart_Q>
                HAL_UART_Receive_IT(&huart2, rxBuff2 , 1);
 80029c6:	2201      	movs	r2, #1
 80029c8:	4629      	mov	r1, r5
 80029ca:	4808      	ldr	r0, [pc, #32]	; (80029ec <HAL_UART_RxCpltCallback+0x64>)
 80029cc:	f003 f9f9 	bl	8005dc2 <HAL_UART_Receive_IT>
 80029d0:	e7e2      	b.n	8002998 <HAL_UART_RxCpltCallback+0x10>
            insert_uart_Q(&rs485_uart4,rxBuff4[0]);
 80029d2:	4c0d      	ldr	r4, [pc, #52]	; (8002a08 <HAL_UART_RxCpltCallback+0x80>)
 80029d4:	7821      	ldrb	r1, [r4, #0]
 80029d6:	480d      	ldr	r0, [pc, #52]	; (8002a0c <HAL_UART_RxCpltCallback+0x84>)
 80029d8:	f7ff ff78 	bl	80028cc <insert_uart_Q>
            HAL_UART_Receive_IT(&huart4, rxBuff4 , 1);
 80029dc:	2201      	movs	r2, #1
 80029de:	4621      	mov	r1, r4
 80029e0:	4803      	ldr	r0, [pc, #12]	; (80029f0 <HAL_UART_RxCpltCallback+0x68>)
 80029e2:	f003 f9ee 	bl	8005dc2 <HAL_UART_Receive_IT>
}
 80029e6:	e7da      	b.n	800299e <HAL_UART_RxCpltCallback+0x16>
 80029e8:	20003c7c 	.word	0x20003c7c
 80029ec:	20003da0 	.word	0x20003da0
 80029f0:	20003d04 	.word	0x20003d04
 80029f4:	20002bfc 	.word	0x20002bfc
 80029f8:	20001f68 	.word	0x20001f68
 80029fc:	20000030 	.word	0x20000030
 8002a00:	20001f70 	.word	0x20001f70
 8002a04:	20000050 	.word	0x20000050
 8002a08:	20002bf4 	.word	0x20002bf4
 8002a0c:	20000040 	.word	0x20000040

08002a10 <my_ip_conflict>:

/************************************
 * @ brief Call back for ip Conflict
 ************************************/
void my_ip_conflict(void)
{
 8002a10:	b508      	push	{r3, lr}
#ifdef _MAIN_DEBUG_
	printf("CONFLICT IP from DHCP\r\n");
 8002a12:	4802      	ldr	r0, [pc, #8]	; (8002a1c <my_ip_conflict+0xc>)
 8002a14:	f005 fc66 	bl	80082e4 <puts>
#endif
   //halt or reset or any...
   while(1); // this example is halt.
 8002a18:	e7fe      	b.n	8002a18 <my_ip_conflict+0x8>
 8002a1a:	bf00      	nop
 8002a1c:	0800a1b8 	.word	0x0800a1b8

08002a20 <Net_Conf>:
{
 8002a20:	b508      	push	{r3, lr}
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8002a22:	4902      	ldr	r1, [pc, #8]	; (8002a2c <Net_Conf+0xc>)
 8002a24:	2000      	movs	r0, #0
 8002a26:	f004 f9dc 	bl	8006de2 <ctlnetwork>
}
 8002a2a:	bd08      	pop	{r3, pc}
 8002a2c:	20000060 	.word	0x20000060

08002a30 <Display_Net_Conf>:
{
 8002a30:	b510      	push	{r4, lr}
 8002a32:	b086      	sub	sp, #24
	uint8_t tmpstr[6] = {0,};
 8002a34:	2300      	movs	r3, #0
 8002a36:	9304      	str	r3, [sp, #16]
 8002a38:	f8ad 3014 	strh.w	r3, [sp, #20]
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8002a3c:	4c1f      	ldr	r4, [pc, #124]	; (8002abc <Display_Net_Conf+0x8c>)
 8002a3e:	4621      	mov	r1, r4
 8002a40:	2001      	movs	r0, #1
 8002a42:	f004 f9ce 	bl	8006de2 <ctlnetwork>
	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8002a46:	a904      	add	r1, sp, #16
 8002a48:	2008      	movs	r0, #8
 8002a4a:	f004 f89d 	bl	8006b88 <ctlwizchip>
	if(gWIZNETINFO.dhcp == NETINFO_DHCP) printf("\r\n===== %s NET CONF : DHCP =====\r\n",(char*)tmpstr);
 8002a4e:	7da3      	ldrb	r3, [r4, #22]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d02d      	beq.n	8002ab0 <Display_Net_Conf+0x80>
		else printf("\r\n===== %s NET CONF : Static =====\r\n",(char*)tmpstr);
 8002a54:	a904      	add	r1, sp, #16
 8002a56:	481a      	ldr	r0, [pc, #104]	; (8002ac0 <Display_Net_Conf+0x90>)
 8002a58:	f005 fba8 	bl	80081ac <iprintf>
	printf(" MAC : %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 8002a5c:	4c17      	ldr	r4, [pc, #92]	; (8002abc <Display_Net_Conf+0x8c>)
 8002a5e:	78e3      	ldrb	r3, [r4, #3]
 8002a60:	7922      	ldrb	r2, [r4, #4]
 8002a62:	7961      	ldrb	r1, [r4, #5]
 8002a64:	9102      	str	r1, [sp, #8]
 8002a66:	9201      	str	r2, [sp, #4]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	78a3      	ldrb	r3, [r4, #2]
 8002a6c:	7862      	ldrb	r2, [r4, #1]
 8002a6e:	7821      	ldrb	r1, [r4, #0]
 8002a70:	4814      	ldr	r0, [pc, #80]	; (8002ac4 <Display_Net_Conf+0x94>)
 8002a72:	f005 fb9b 	bl	80081ac <iprintf>
	printf(" IP : %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 8002a76:	7a63      	ldrb	r3, [r4, #9]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	7a23      	ldrb	r3, [r4, #8]
 8002a7c:	79e2      	ldrb	r2, [r4, #7]
 8002a7e:	79a1      	ldrb	r1, [r4, #6]
 8002a80:	4811      	ldr	r0, [pc, #68]	; (8002ac8 <Display_Net_Conf+0x98>)
 8002a82:	f005 fb93 	bl	80081ac <iprintf>
	printf(" GW : %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 8002a86:	7c63      	ldrb	r3, [r4, #17]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	7c23      	ldrb	r3, [r4, #16]
 8002a8c:	7be2      	ldrb	r2, [r4, #15]
 8002a8e:	7ba1      	ldrb	r1, [r4, #14]
 8002a90:	480e      	ldr	r0, [pc, #56]	; (8002acc <Display_Net_Conf+0x9c>)
 8002a92:	f005 fb8b 	bl	80081ac <iprintf>
	printf(" SN : %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 8002a96:	7b63      	ldrb	r3, [r4, #13]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	7b23      	ldrb	r3, [r4, #12]
 8002a9c:	7ae2      	ldrb	r2, [r4, #11]
 8002a9e:	7aa1      	ldrb	r1, [r4, #10]
 8002aa0:	480b      	ldr	r0, [pc, #44]	; (8002ad0 <Display_Net_Conf+0xa0>)
 8002aa2:	f005 fb83 	bl	80081ac <iprintf>
	printf("=======================================\r\n");
 8002aa6:	480b      	ldr	r0, [pc, #44]	; (8002ad4 <Display_Net_Conf+0xa4>)
 8002aa8:	f005 fc1c 	bl	80082e4 <puts>
}
 8002aac:	b006      	add	sp, #24
 8002aae:	bd10      	pop	{r4, pc}
	if(gWIZNETINFO.dhcp == NETINFO_DHCP) printf("\r\n===== %s NET CONF : DHCP =====\r\n",(char*)tmpstr);
 8002ab0:	a904      	add	r1, sp, #16
 8002ab2:	4809      	ldr	r0, [pc, #36]	; (8002ad8 <Display_Net_Conf+0xa8>)
 8002ab4:	f005 fb7a 	bl	80081ac <iprintf>
 8002ab8:	e7d0      	b.n	8002a5c <Display_Net_Conf+0x2c>
 8002aba:	bf00      	nop
 8002abc:	20000060 	.word	0x20000060
 8002ac0:	0800a1f4 	.word	0x0800a1f4
 8002ac4:	0800a21c 	.word	0x0800a21c
 8002ac8:	0800a244 	.word	0x0800a244
 8002acc:	0800a258 	.word	0x0800a258
 8002ad0:	0800a26c 	.word	0x0800a26c
 8002ad4:	0800a280 	.word	0x0800a280
 8002ad8:	0800a1d0 	.word	0x0800a1d0

08002adc <my_ip_assign>:
{
 8002adc:	b510      	push	{r4, lr}
   getIPfromDHCP(gWIZNETINFO.ip);
 8002ade:	4c10      	ldr	r4, [pc, #64]	; (8002b20 <my_ip_assign+0x44>)
 8002ae0:	1da0      	adds	r0, r4, #6
 8002ae2:	f004 fccb 	bl	800747c <getIPfromDHCP>
   getGWfromDHCP(gWIZNETINFO.gw);
 8002ae6:	f104 000e 	add.w	r0, r4, #14
 8002aea:	f004 fcd3 	bl	8007494 <getGWfromDHCP>
   getSNfromDHCP(gWIZNETINFO.sn);
 8002aee:	f104 000a 	add.w	r0, r4, #10
 8002af2:	f004 fcdb 	bl	80074ac <getSNfromDHCP>
   getDNSfromDHCP(gWIZNETINFO.dns);
 8002af6:	f104 0012 	add.w	r0, r4, #18
 8002afa:	f004 fce3 	bl	80074c4 <getDNSfromDHCP>
   gWIZNETINFO.dhcp = NETINFO_DHCP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	75a3      	strb	r3, [r4, #22]
   Net_Conf();      // apply from DHCP
 8002b02:	f7ff ff8d 	bl	8002a20 <Net_Conf>
   Display_Net_Conf();
 8002b06:	f7ff ff93 	bl	8002a30 <Display_Net_Conf>
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());
 8002b0a:	f004 fce7 	bl	80074dc <getDHCPLeasetime>
 8002b0e:	4601      	mov	r1, r0
 8002b10:	4804      	ldr	r0, [pc, #16]	; (8002b24 <my_ip_assign+0x48>)
 8002b12:	f005 fb4b 	bl	80081ac <iprintf>
   printf("\r\n");
 8002b16:	4804      	ldr	r0, [pc, #16]	; (8002b28 <my_ip_assign+0x4c>)
 8002b18:	f005 fbe4 	bl	80082e4 <puts>
}
 8002b1c:	bd10      	pop	{r4, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000060 	.word	0x20000060
 8002b24:	0800a2ac 	.word	0x0800a2ac
 8002b28:	0800a2cc 	.word	0x0800a2cc

08002b2c <wiz_task>:
}
#define STATE_DHCP_LEASED 3
extern int8_t   dhcp_state;
void wiz_task()
{
 8002b2c:	b500      	push	{lr}
 8002b2e:	b083      	sub	sp, #12
	static uint32_t prev_tick = 0;
	volatile uint32_t cur_tick;
	cur_tick = HAL_GetTick();
 8002b30:	f000 ff62 	bl	80039f8 <HAL_GetTick>
 8002b34:	9001      	str	r0, [sp, #4]
	if(dhcp_state == STATE_DHCP_LEASED)
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <wiz_task+0x50>)
 8002b38:	f993 3000 	ldrsb.w	r3, [r3]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d012      	beq.n	8002b66 <wiz_task+0x3a>
	{
		if(cur_tick - prev_tick < 100) return; // 100 mili dhcp polling
	}
	else if(cur_tick - prev_tick < 10) return; // 10 mili dhcp polling
 8002b40:	9b01      	ldr	r3, [sp, #4]
 8002b42:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <wiz_task+0x54>)
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	2b09      	cmp	r3, #9
 8002b4a:	d909      	bls.n	8002b60 <wiz_task+0x34>
	prev_tick = cur_tick;
 8002b4c:	9a01      	ldr	r2, [sp, #4]
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <wiz_task+0x54>)
 8002b50:	601a      	str	r2, [r3, #0]
	if(wiz_started)
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <wiz_task+0x58>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	b11b      	cbz	r3, 8002b60 <wiz_task+0x34>
	{
		int ret;
		if(gWIZNETINFO.dhcp == NETINFO_DHCP)
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <wiz_task+0x5c>)
 8002b5a:	7d9b      	ldrb	r3, [r3, #22]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d009      	beq.n	8002b74 <wiz_task+0x48>
			ret = DHCP_run();
	}
}
 8002b60:	b003      	add	sp, #12
 8002b62:	f85d fb04 	ldr.w	pc, [sp], #4
		if(cur_tick - prev_tick < 100) return; // 100 mili dhcp polling
 8002b66:	9b01      	ldr	r3, [sp, #4]
 8002b68:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <wiz_task+0x54>)
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	2b63      	cmp	r3, #99	; 0x63
 8002b70:	d8ec      	bhi.n	8002b4c <wiz_task+0x20>
 8002b72:	e7f5      	b.n	8002b60 <wiz_task+0x34>
			ret = DHCP_run();
 8002b74:	f004 ff50 	bl	8007a18 <DHCP_run>
 8002b78:	e7f2      	b.n	8002b60 <wiz_task+0x34>
 8002b7a:	bf00      	nop
 8002b7c:	20001125 	.word	0x20001125
 8002b80:	200010dc 	.word	0x200010dc
 8002b84:	200010e0 	.word	0x200010e0
 8002b88:	20000060 	.word	0x20000060

08002b8c <wiz_fn>:

void wiz_fn(int ac, char *av[])
{
 8002b8c:	b530      	push	{r4, r5, lr}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	4605      	mov	r5, r0
 8002b92:	460c      	mov	r4, r1
	uint8_t fifo_sz[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8002b94:	4b4d      	ldr	r3, [pc, #308]	; (8002ccc <wiz_fn+0x140>)
 8002b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b98:	f10d 0c18 	add.w	ip, sp, #24
 8002b9c:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
	uint8_t temp;
	if(ac >= 2)
 8002ba0:	2d01      	cmp	r5, #1
 8002ba2:	dd3c      	ble.n	8002c1e <wiz_fn+0x92>
	{
		if(!strcmp(av[1],"reset")) {
 8002ba4:	6864      	ldr	r4, [r4, #4]
 8002ba6:	494a      	ldr	r1, [pc, #296]	; (8002cd0 <wiz_fn+0x144>)
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f7fd fb31 	bl	8000210 <strcmp>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d02e      	beq.n	8002c10 <wiz_fn+0x84>
			if(ctlwizchip(CW_RESET_WIZCHIP, (void *)0) == -1)
			{
				printf("Ethernet reset failed\n");
			}
		}
		else if(!strcmp(av[1],"init"))  {
 8002bb2:	4948      	ldr	r1, [pc, #288]	; (8002cd4 <wiz_fn+0x148>)
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f7fd fb2b 	bl	8000210 <strcmp>
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d035      	beq.n	8002c2a <wiz_fn+0x9e>
				wiz_started = 1;

				//dhcp_loop();
			}
		}
		else if(!strcmp(av[1],"hreset"))
 8002bbe:	4946      	ldr	r1, [pc, #280]	; (8002cd8 <wiz_fn+0x14c>)
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f7fd fb25 	bl	8000210 <strcmp>
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d04f      	beq.n	8002c6a <wiz_fn+0xde>
		{
			LAN_RST_GPIO_Port->BSRR = LAN_RST_Pin << 16;
			HAL_Delay(200);
			LAN_RST_GPIO_Port->BSRR = LAN_RST_Pin << 0;
		}
		else if(!strcmp(av[1],"version"))
 8002bca:	4944      	ldr	r1, [pc, #272]	; (8002cdc <wiz_fn+0x150>)
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f7fd fb1f 	bl	8000210 <strcmp>
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d053      	beq.n	8002c7e <wiz_fn+0xf2>
		{
			ctlwizchip(CW_RESET_PHY, (void *)&temp);
			printf("PHYSTATUS=%x\n",temp);
		}
#endif
		else if(!strcmp(av[1],"stat"))
 8002bd6:	4942      	ldr	r1, [pc, #264]	; (8002ce0 <wiz_fn+0x154>)
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7fd fb19 	bl	8000210 <strcmp>
 8002bde:	2800      	cmp	r0, #0
 8002be0:	d056      	beq.n	8002c90 <wiz_fn+0x104>
		{
			ctlwizchip(CW_GET_PHYSTATUS, (void *)&temp);
			printf("PHYSTATUS=%x\n",temp);
		}
		else if(!strcmp(av[1],"lstat"))
 8002be2:	4940      	ldr	r1, [pc, #256]	; (8002ce4 <wiz_fn+0x158>)
 8002be4:	4620      	mov	r0, r4
 8002be6:	f7fd fb13 	bl	8000210 <strcmp>
 8002bea:	2800      	cmp	r0, #0
 8002bec:	d05b      	beq.n	8002ca6 <wiz_fn+0x11a>
			else
			{
				printf("Link status = %d\n",temp);
			}
		}
		else if(!strcmp(av[1],"udp_loop"))
 8002bee:	493e      	ldr	r1, [pc, #248]	; (8002ce8 <wiz_fn+0x15c>)
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f7fd fb0d 	bl	8000210 <strcmp>
 8002bf6:	b990      	cbnz	r0, 8002c1e <wiz_fn+0x92>
		{
				while(1){
					loopback_udps(SOCK_UDPS, gdata, PORT_UDPS);
 8002bf8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002bfc:	493b      	ldr	r1, [pc, #236]	; (8002cec <wiz_fn+0x160>)
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f003 f8fc 	bl	8005dfc <loopback_udps>
			        if(is_available(&stdin_uart)) break;
 8002c04:	483a      	ldr	r0, [pc, #232]	; (8002cf0 <wiz_fn+0x164>)
 8002c06:	f7ff fe9a 	bl	800293e <is_available>
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d0f4      	beq.n	8002bf8 <wiz_fn+0x6c>
 8002c0e:	e006      	b.n	8002c1e <wiz_fn+0x92>
			if(ctlwizchip(CW_RESET_WIZCHIP, (void *)0) == -1)
 8002c10:	2100      	movs	r1, #0
 8002c12:	4608      	mov	r0, r1
 8002c14:	f003 ffb8 	bl	8006b88 <ctlwizchip>
 8002c18:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c1c:	d001      	beq.n	8002c22 <wiz_fn+0x96>
				}
		}
	}
}
 8002c1e:	b007      	add	sp, #28
 8002c20:	bd30      	pop	{r4, r5, pc}
				printf("Ethernet reset failed\n");
 8002c22:	4834      	ldr	r0, [pc, #208]	; (8002cf4 <wiz_fn+0x168>)
 8002c24:	f005 fb5e 	bl	80082e4 <puts>
 8002c28:	e7f9      	b.n	8002c1e <wiz_fn+0x92>
			if(ctlwizchip(CW_INIT_WIZCHIP,fifo_sz ) == -1)
 8002c2a:	a902      	add	r1, sp, #8
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f003 ffab 	bl	8006b88 <ctlwizchip>
 8002c32:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c36:	d00a      	beq.n	8002c4e <wiz_fn+0xc2>
				wizchip_setnetinfo(&gWIZNETINFO);
 8002c38:	4c2f      	ldr	r4, [pc, #188]	; (8002cf8 <wiz_fn+0x16c>)
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f004 f834 	bl	8006ca8 <wizchip_setnetinfo>
				if(gWIZNETINFO.dhcp == NETINFO_DHCP)
 8002c40:	7da3      	ldrb	r3, [r4, #22]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d007      	beq.n	8002c56 <wiz_fn+0xca>
				wiz_started = 1;
 8002c46:	4b2d      	ldr	r3, [pc, #180]	; (8002cfc <wiz_fn+0x170>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e7e7      	b.n	8002c1e <wiz_fn+0x92>
				printf("Ethernet Init fail\n");
 8002c4e:	482c      	ldr	r0, [pc, #176]	; (8002d00 <wiz_fn+0x174>)
 8002c50:	f005 fb48 	bl	80082e4 <puts>
 8002c54:	e7e3      	b.n	8002c1e <wiz_fn+0x92>
					DHCP_init(SOCK_DHCP, dhcpData);
 8002c56:	492b      	ldr	r1, [pc, #172]	; (8002d04 <wiz_fn+0x178>)
 8002c58:	2002      	movs	r0, #2
 8002c5a:	f004 fbb3 	bl	80073c4 <DHCP_init>
					reg_dhcp_cbfunc(my_ip_assign, my_ip_assign, my_ip_conflict);
 8002c5e:	482a      	ldr	r0, [pc, #168]	; (8002d08 <wiz_fn+0x17c>)
 8002c60:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <wiz_fn+0x180>)
 8002c62:	4601      	mov	r1, r0
 8002c64:	f004 f926 	bl	8006eb4 <reg_dhcp_cbfunc>
 8002c68:	e7ed      	b.n	8002c46 <wiz_fn+0xba>
			LAN_RST_GPIO_Port->BSRR = LAN_RST_Pin << 16;
 8002c6a:	4c29      	ldr	r4, [pc, #164]	; (8002d10 <wiz_fn+0x184>)
 8002c6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c70:	61a3      	str	r3, [r4, #24]
			HAL_Delay(200);
 8002c72:	20c8      	movs	r0, #200	; 0xc8
 8002c74:	f000 fec6 	bl	8003a04 <HAL_Delay>
			LAN_RST_GPIO_Port->BSRR = LAN_RST_Pin << 0;
 8002c78:	2310      	movs	r3, #16
 8002c7a:	61a3      	str	r3, [r4, #24]
 8002c7c:	e7cf      	b.n	8002c1e <wiz_fn+0x92>
			ret = getVERSIONR();
 8002c7e:	f44f 5064 	mov.w	r0, #14592	; 0x3900
 8002c82:	f003 f92d 	bl	8005ee0 <WIZCHIP_READ>
 8002c86:	4601      	mov	r1, r0
			printf("ret = %x\n",ret);
 8002c88:	4822      	ldr	r0, [pc, #136]	; (8002d14 <wiz_fn+0x188>)
 8002c8a:	f005 fa8f 	bl	80081ac <iprintf>
 8002c8e:	e7c6      	b.n	8002c1e <wiz_fn+0x92>
			ctlwizchip(CW_GET_PHYSTATUS, (void *)&temp);
 8002c90:	f10d 0107 	add.w	r1, sp, #7
 8002c94:	200c      	movs	r0, #12
 8002c96:	f003 ff77 	bl	8006b88 <ctlwizchip>
			printf("PHYSTATUS=%x\n",temp);
 8002c9a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002c9e:	481e      	ldr	r0, [pc, #120]	; (8002d18 <wiz_fn+0x18c>)
 8002ca0:	f005 fa84 	bl	80081ac <iprintf>
 8002ca4:	e7bb      	b.n	8002c1e <wiz_fn+0x92>
			if(ctlwizchip(CW_GET_PHYLINK, (void *)&temp) == -1)
 8002ca6:	f10d 0107 	add.w	r1, sp, #7
 8002caa:	200f      	movs	r0, #15
 8002cac:	f003 ff6c 	bl	8006b88 <ctlwizchip>
 8002cb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002cb4:	d005      	beq.n	8002cc2 <wiz_fn+0x136>
				printf("Link status = %d\n",temp);
 8002cb6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002cba:	4818      	ldr	r0, [pc, #96]	; (8002d1c <wiz_fn+0x190>)
 8002cbc:	f005 fa76 	bl	80081ac <iprintf>
 8002cc0:	e7ad      	b.n	8002c1e <wiz_fn+0x92>
				printf("Unknown link status\n");
 8002cc2:	4817      	ldr	r0, [pc, #92]	; (8002d20 <wiz_fn+0x194>)
 8002cc4:	f005 fb0e 	bl	80082e4 <puts>
 8002cc8:	e7a9      	b.n	8002c1e <wiz_fn+0x92>
 8002cca:	bf00      	nop
 8002ccc:	08009af0 	.word	0x08009af0
 8002cd0:	0800a2d0 	.word	0x0800a2d0
 8002cd4:	0800a2f0 	.word	0x0800a2f0
 8002cd8:	0800a0e0 	.word	0x0800a0e0
 8002cdc:	0800a30c 	.word	0x0800a30c
 8002ce0:	0800a320 	.word	0x0800a320
 8002ce4:	0800a338 	.word	0x0800a338
 8002ce8:	0800a368 	.word	0x0800a368
 8002cec:	20002c00 	.word	0x20002c00
 8002cf0:	20000050 	.word	0x20000050
 8002cf4:	0800a2d8 	.word	0x0800a2d8
 8002cf8:	20000060 	.word	0x20000060
 8002cfc:	200010e0 	.word	0x200010e0
 8002d00:	0800a2f8 	.word	0x0800a2f8
 8002d04:	20003400 	.word	0x20003400
 8002d08:	08002add 	.word	0x08002add
 8002d0c:	08002a11 	.word	0x08002a11
 8002d10:	40020000 	.word	0x40020000
 8002d14:	0800a314 	.word	0x0800a314
 8002d18:	0800a328 	.word	0x0800a328
 8002d1c:	0800a354 	.word	0x0800a354
 8002d20:	0800a340 	.word	0x0800a340

08002d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d28:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2a:	2400      	movs	r4, #0
 8002d2c:	9405      	str	r4, [sp, #20]
 8002d2e:	9406      	str	r4, [sp, #24]
 8002d30:	9407      	str	r4, [sp, #28]
 8002d32:	9408      	str	r4, [sp, #32]
 8002d34:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d36:	9400      	str	r4, [sp, #0]
 8002d38:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <MX_GPIO_Init+0x18c>)
 8002d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d3c:	f042 0204 	orr.w	r2, r2, #4
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
 8002d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d44:	f002 0204 	and.w	r2, r2, #4
 8002d48:	9200      	str	r2, [sp, #0]
 8002d4a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d4c:	9401      	str	r4, [sp, #4]
 8002d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d54:	631a      	str	r2, [r3, #48]	; 0x30
 8002d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d58:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002d5c:	9201      	str	r2, [sp, #4]
 8002d5e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d60:	9402      	str	r4, [sp, #8]
 8002d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d64:	f042 0201 	orr.w	r2, r2, #1
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
 8002d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d6c:	f002 0201 	and.w	r2, r2, #1
 8002d70:	9202      	str	r2, [sp, #8]
 8002d72:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d74:	9403      	str	r4, [sp, #12]
 8002d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d78:	f042 0202 	orr.w	r2, r2, #2
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d80:	f002 0202 	and.w	r2, r2, #2
 8002d84:	9203      	str	r2, [sp, #12]
 8002d86:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d88:	9404      	str	r4, [sp, #16]
 8002d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8c:	f042 0208 	orr.w	r2, r2, #8
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	9304      	str	r3, [sp, #16]
 8002d9a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8002d9c:	4f45      	ldr	r7, [pc, #276]	; (8002eb4 <MX_GPIO_Init+0x190>)
 8002d9e:	4622      	mov	r2, r4
 8002da0:	f241 112f 	movw	r1, #4399	; 0x112f
 8002da4:	4638      	mov	r0, r7
 8002da6:	f001 fbdb 	bl	8004560 <HAL_GPIO_WritePin>
                          |UART1_TXEN_Pin|UART4_TXEN_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LAN_RST_Pin|LAN_CS_Pin, GPIO_PIN_SET);
 8002daa:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8002ebc <MX_GPIO_Init+0x198>
 8002dae:	2201      	movs	r2, #1
 8002db0:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002db4:	4640      	mov	r0, r8
 8002db6:	f001 fbd3 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|ESP32_DN_RTS_Pin, GPIO_PIN_RESET);
 8002dba:	4e3f      	ldr	r6, [pc, #252]	; (8002eb8 <MX_GPIO_Init+0x194>)
 8002dbc:	4622      	mov	r2, r4
 8002dbe:	2186      	movs	r1, #134	; 0x86
 8002dc0:	4630      	mov	r0, r6
 8002dc2:	f001 fbcd 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_DN_DTR_GPIO_Port, ESP32_DN_DTR_Pin, GPIO_PIN_RESET);
 8002dc6:	4622      	mov	r2, r4
 8002dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dcc:	4640      	mov	r0, r8
 8002dce:	f001 fbc7 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8002dd2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8002ec0 <MX_GPIO_Init+0x19c>
 8002dd6:	4622      	mov	r2, r4
 8002dd8:	2104      	movs	r1, #4
 8002dda:	4648      	mov	r0, r9
 8002ddc:	f001 fbc0 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8002de0:	2201      	movs	r2, #1
 8002de2:	2120      	movs	r1, #32
 8002de4:	4630      	mov	r0, r6
 8002de6:	f001 fbbb 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002dea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002df0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002df4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002df6:	2501      	movs	r5, #1
 8002df8:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfa:	a905      	add	r1, sp, #20
 8002dfc:	4638      	mov	r0, r7
 8002dfe:	f001 facb 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin
                           UART1_TXEN_Pin UART4_TXEN_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8002e02:	f241 132f 	movw	r3, #4399	; 0x112f
 8002e06:	9305      	str	r3, [sp, #20]
                          |UART1_TXEN_Pin|UART4_TXEN_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e08:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e0e:	a905      	add	r1, sp, #20
 8002e10:	4638      	mov	r0, r7
 8002e12:	f001 fac1 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAN_RST_Pin LAN_CS_Pin ESP32_DN_DTR_Pin */
  GPIO_InitStruct.Pin = LAN_RST_Pin|LAN_CS_Pin|ESP32_DN_DTR_Pin;
 8002e16:	f248 1310 	movw	r3, #33040	; 0x8110
 8002e1a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e20:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e22:	a905      	add	r1, sp, #20
 8002e24:	4640      	mov	r0, r8
 8002e26:	f001 fab7 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT2_Pin */
  GPIO_InitStruct.Pin = INPUT2_Pin;
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e2e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e30:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(INPUT2_GPIO_Port, &GPIO_InitStruct);
 8002e32:	a905      	add	r1, sp, #20
 8002e34:	4638      	mov	r0, r7
 8002e36:	f001 faaf 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin SPI3_CS_Pin ESP32_DN_RTS_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|SPI3_CS_Pin|ESP32_DN_RTS_Pin;
 8002e3a:	23a6      	movs	r3, #166	; 0xa6
 8002e3c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e3e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e44:	a905      	add	r1, sp, #20
 8002e46:	4630      	mov	r0, r6
 8002e48:	f001 faa6 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT1_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin;
 8002e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e50:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e52:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e54:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002e56:	a905      	add	r1, sp, #20
 8002e58:	4630      	mov	r0, r6
 8002e5a:	f001 fa9d 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e62:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	f04f 0802 	mov.w	r8, #2
 8002e68:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6e:	2703      	movs	r7, #3
 8002e70:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e72:	2305      	movs	r3, #5
 8002e74:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e76:	a905      	add	r1, sp, #20
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f001 fa8d 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8002e7e:	2304      	movs	r3, #4
 8002e80:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e82:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8002e88:	a905      	add	r1, sp, #20
 8002e8a:	4648      	mov	r0, r9
 8002e8c:	f001 fa84 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002e90:	2318      	movs	r3, #24
 8002e92:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e9c:	2306      	movs	r3, #6
 8002e9e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea0:	a905      	add	r1, sp, #20
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	f001 fa78 	bl	8004398 <HAL_GPIO_Init>

}
 8002ea8:	b00b      	add	sp, #44	; 0x2c
 8002eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020800 	.word	0x40020800
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020c00 	.word	0x40020c00

08002ec4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <Error_Handler+0x2>

08002ec8 <MX_USART3_UART_Init>:
{
 8002ec8:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8002eca:	480b      	ldr	r0, [pc, #44]	; (8002ef8 <MX_USART3_UART_Init+0x30>)
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <MX_USART3_UART_Init+0x34>)
 8002ece:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8002ed0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002ed4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002eda:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002edc:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ede:	220c      	movs	r2, #12
 8002ee0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002ee2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002ee6:	6182      	str	r2, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002eea:	f002 fceb 	bl	80058c4 <HAL_UART_Init>
 8002eee:	b900      	cbnz	r0, 8002ef2 <MX_USART3_UART_Init+0x2a>
}
 8002ef0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002ef2:	f7ff ffe7 	bl	8002ec4 <Error_Handler>
 8002ef6:	bf00      	nop
 8002ef8:	20001134 	.word	0x20001134
 8002efc:	40004800 	.word	0x40004800

08002f00 <MX_USART2_UART_Init>:
{
 8002f00:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8002f02:	480a      	ldr	r0, [pc, #40]	; (8002f2c <MX_USART2_UART_Init+0x2c>)
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <MX_USART2_UART_Init+0x30>)
 8002f06:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002f08:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f0c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f12:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f14:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f16:	220c      	movs	r2, #12
 8002f18:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f1c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f1e:	f002 fcd1 	bl	80058c4 <HAL_UART_Init>
 8002f22:	b900      	cbnz	r0, 8002f26 <MX_USART2_UART_Init+0x26>
}
 8002f24:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002f26:	f7ff ffcd 	bl	8002ec4 <Error_Handler>
 8002f2a:	bf00      	nop
 8002f2c:	20003da0 	.word	0x20003da0
 8002f30:	40004400 	.word	0x40004400

08002f34 <MX_CAN1_Init>:
{
 8002f34:	b508      	push	{r3, lr}
  hcan1.Instance = CAN1;
 8002f36:	480c      	ldr	r0, [pc, #48]	; (8002f68 <MX_CAN1_Init+0x34>)
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <MX_CAN1_Init+0x38>)
 8002f3a:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 5;
 8002f3c:	2305      	movs	r3, #5
 8002f3e:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f44:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8002f46:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002f4a:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002f4c:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002f4e:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002f50:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002f52:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002f54:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002f56:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002f58:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002f5a:	f000 fd67 	bl	8003a2c <HAL_CAN_Init>
 8002f5e:	b900      	cbnz	r0, 8002f62 <MX_CAN1_Init+0x2e>
}
 8002f60:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002f62:	f7ff ffaf 	bl	8002ec4 <Error_Handler>
 8002f66:	bf00      	nop
 8002f68:	20003de4 	.word	0x20003de4
 8002f6c:	40006400 	.word	0x40006400

08002f70 <MX_CAN2_Init>:
{
 8002f70:	b508      	push	{r3, lr}
  hcan2.Instance = CAN2;
 8002f72:	480c      	ldr	r0, [pc, #48]	; (8002fa4 <MX_CAN2_Init+0x34>)
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <MX_CAN2_Init+0x38>)
 8002f76:	6003      	str	r3, [r0, #0]
  hcan2.Init.Prescaler = 5;
 8002f78:	2305      	movs	r3, #5
 8002f7a:	6043      	str	r3, [r0, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f80:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 8002f82:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002f86:	6102      	str	r2, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002f88:	6143      	str	r3, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002f8a:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002f8c:	7643      	strb	r3, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002f8e:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002f90:	76c3      	strb	r3, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002f92:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002f94:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002f96:	f000 fd49 	bl	8003a2c <HAL_CAN_Init>
 8002f9a:	b900      	cbnz	r0, 8002f9e <MX_CAN2_Init+0x2e>
}
 8002f9c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002f9e:	f7ff ff91 	bl	8002ec4 <Error_Handler>
 8002fa2:	bf00      	nop
 8002fa4:	20003c54 	.word	0x20003c54
 8002fa8:	40006800 	.word	0x40006800

08002fac <MX_I2C1_Init>:
{
 8002fac:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8002fae:	480a      	ldr	r0, [pc, #40]	; (8002fd8 <MX_I2C1_Init+0x2c>)
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <MX_I2C1_Init+0x30>)
 8002fb2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <MX_I2C1_Init+0x34>)
 8002fb6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fbc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fc2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fc4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fc6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fc8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fca:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fcc:	f001 face 	bl	800456c <HAL_I2C_Init>
 8002fd0:	b900      	cbnz	r0, 8002fd4 <MX_I2C1_Init+0x28>
}
 8002fd2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002fd4:	f7ff ff76 	bl	8002ec4 <Error_Handler>
 8002fd8:	20003c00 	.word	0x20003c00
 8002fdc:	40005400 	.word	0x40005400
 8002fe0:	000186a0 	.word	0x000186a0

08002fe4 <MX_SPI1_Init>:
{
 8002fe4:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8002fe6:	480d      	ldr	r0, [pc, #52]	; (800301c <MX_SPI1_Init+0x38>)
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <MX_SPI1_Init+0x3c>)
 8002fea:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fec:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002ff0:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ff6:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ff8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ffa:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003000:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003002:	2210      	movs	r2, #16
 8003004:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003006:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003008:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800300a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800300c:	230a      	movs	r3, #10
 800300e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003010:	f002 f81e 	bl	8005050 <HAL_SPI_Init>
 8003014:	b900      	cbnz	r0, 8003018 <MX_SPI1_Init+0x34>
}
 8003016:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003018:	f7ff ff54 	bl	8002ec4 <Error_Handler>
 800301c:	20003d48 	.word	0x20003d48
 8003020:	40013000 	.word	0x40013000

08003024 <MX_USART1_UART_Init>:
{
 8003024:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8003026:	480a      	ldr	r0, [pc, #40]	; (8003050 <MX_USART1_UART_Init+0x2c>)
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <MX_USART1_UART_Init+0x30>)
 800302a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800302c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003030:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003032:	2300      	movs	r3, #0
 8003034:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003036:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003038:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800303a:	220c      	movs	r2, #12
 800303c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003040:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003042:	f002 fc3f 	bl	80058c4 <HAL_UART_Init>
 8003046:	b900      	cbnz	r0, 800304a <MX_USART1_UART_Init+0x26>
}
 8003048:	bd08      	pop	{r3, pc}
    Error_Handler();
 800304a:	f7ff ff3b 	bl	8002ec4 <Error_Handler>
 800304e:	bf00      	nop
 8003050:	20003c7c 	.word	0x20003c7c
 8003054:	40011000 	.word	0x40011000

08003058 <MX_USART6_UART_Init>:
{
 8003058:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 800305a:	480a      	ldr	r0, [pc, #40]	; (8003084 <MX_USART6_UART_Init+0x2c>)
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <MX_USART6_UART_Init+0x30>)
 800305e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8003060:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003064:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003066:	2300      	movs	r3, #0
 8003068:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800306a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800306c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800306e:	220c      	movs	r2, #12
 8003070:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003072:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003074:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003076:	f002 fc25 	bl	80058c4 <HAL_UART_Init>
 800307a:	b900      	cbnz	r0, 800307e <MX_USART6_UART_Init+0x26>
}
 800307c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800307e:	f7ff ff21 	bl	8002ec4 <Error_Handler>
 8003082:	bf00      	nop
 8003084:	20003cc0 	.word	0x20003cc0
 8003088:	40011400 	.word	0x40011400

0800308c <MX_UART4_Init>:
{
 800308c:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 800308e:	480a      	ldr	r0, [pc, #40]	; (80030b8 <MX_UART4_Init+0x2c>)
 8003090:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <MX_UART4_Init+0x30>)
 8003092:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8003094:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003098:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800309a:	2300      	movs	r3, #0
 800309c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800309e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80030a0:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80030a2:	220c      	movs	r2, #12
 80030a4:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030a6:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030aa:	f002 fc0b 	bl	80058c4 <HAL_UART_Init>
 80030ae:	b900      	cbnz	r0, 80030b2 <MX_UART4_Init+0x26>
}
 80030b0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80030b2:	f7ff ff07 	bl	8002ec4 <Error_Handler>
 80030b6:	bf00      	nop
 80030b8:	20003d04 	.word	0x20003d04
 80030bc:	40004c00 	.word	0x40004c00

080030c0 <SystemClock_Config>:
{
 80030c0:	b500      	push	{lr}
 80030c2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030c4:	2234      	movs	r2, #52	; 0x34
 80030c6:	2100      	movs	r1, #0
 80030c8:	a807      	add	r0, sp, #28
 80030ca:	f004 ffbd 	bl	8008048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030ce:	2300      	movs	r3, #0
 80030d0:	9302      	str	r3, [sp, #8]
 80030d2:	9303      	str	r3, [sp, #12]
 80030d4:	9304      	str	r3, [sp, #16]
 80030d6:	9305      	str	r3, [sp, #20]
 80030d8:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	4a20      	ldr	r2, [pc, #128]	; (8003160 <SystemClock_Config+0xa0>)
 80030de:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80030e0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80030e4:	6411      	str	r1, [r2, #64]	; 0x40
 80030e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030e8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80030ec:	9200      	str	r2, [sp, #0]
 80030ee:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <SystemClock_Config+0xa4>)
 80030f4:	6813      	ldr	r3, [r2, #0]
 80030f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	6813      	ldr	r3, [r2, #0]
 8003102:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800310a:	2301      	movs	r3, #1
 800310c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800310e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003112:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003114:	2302      	movs	r3, #2
 8003116:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003118:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800311c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800311e:	2208      	movs	r2, #8
 8003120:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8003122:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003126:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003128:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800312a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800312c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800312e:	a807      	add	r0, sp, #28
 8003130:	f001 fc8c 	bl	8004a4c <HAL_RCC_OscConfig>
 8003134:	b980      	cbnz	r0, 8003158 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003136:	230f      	movs	r3, #15
 8003138:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800313a:	2102      	movs	r1, #2
 800313c:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003146:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003148:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800314a:	a802      	add	r0, sp, #8
 800314c:	f001 faec 	bl	8004728 <HAL_RCC_ClockConfig>
 8003150:	b920      	cbnz	r0, 800315c <SystemClock_Config+0x9c>
}
 8003152:	b015      	add	sp, #84	; 0x54
 8003154:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003158:	f7ff feb4 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 800315c:	f7ff feb2 	bl	8002ec4 <Error_Handler>
 8003160:	40023800 	.word	0x40023800
 8003164:	40007000 	.word	0x40007000

08003168 <main>:
{
 8003168:	b510      	push	{r4, lr}
  HAL_Init();
 800316a:	f000 fc1f 	bl	80039ac <HAL_Init>
  SystemClock_Config();
 800316e:	f7ff ffa7 	bl	80030c0 <SystemClock_Config>
  MX_GPIO_Init();
 8003172:	f7ff fdd7 	bl	8002d24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003176:	f7ff fec3 	bl	8002f00 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800317a:	f7ff fedb 	bl	8002f34 <MX_CAN1_Init>
  MX_CAN2_Init();
 800317e:	f7ff fef7 	bl	8002f70 <MX_CAN2_Init>
  MX_I2C1_Init();
 8003182:	f7ff ff13 	bl	8002fac <MX_I2C1_Init>
  MX_SPI1_Init();
 8003186:	f7ff ff2d 	bl	8002fe4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800318a:	f7ff ff4b 	bl	8003024 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800318e:	f7ff fe9b 	bl	8002ec8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8003192:	f7ff ff61 	bl	8003058 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8003196:	f7ff ff79 	bl	800308c <MX_UART4_Init>
  uart_rx_ready_IT(&huart2,rxBuff2);
 800319a:	4942      	ldr	r1, [pc, #264]	; (80032a4 <main+0x13c>)
 800319c:	4842      	ldr	r0, [pc, #264]	; (80032a8 <main+0x140>)
 800319e:	f7ff fbd4 	bl	800294a <uart_rx_ready_IT>
  uart_rx_ready_IT(&huart1,rxBuff1);
 80031a2:	4942      	ldr	r1, [pc, #264]	; (80032ac <main+0x144>)
 80031a4:	4842      	ldr	r0, [pc, #264]	; (80032b0 <main+0x148>)
 80031a6:	f7ff fbd0 	bl	800294a <uart_rx_ready_IT>
  uart_rx_ready_IT(&huart3,rxBuff3);
 80031aa:	4942      	ldr	r1, [pc, #264]	; (80032b4 <main+0x14c>)
 80031ac:	4842      	ldr	r0, [pc, #264]	; (80032b8 <main+0x150>)
 80031ae:	f7ff fbcc 	bl	800294a <uart_rx_ready_IT>
  uart_rx_ready_IT(&huart4,rxBuff4);
 80031b2:	4942      	ldr	r1, [pc, #264]	; (80032bc <main+0x154>)
 80031b4:	4842      	ldr	r0, [pc, #264]	; (80032c0 <main+0x158>)
 80031b6:	f7ff fbc8 	bl	800294a <uart_rx_ready_IT>
  can_start(1);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f7fe ff88 	bl	80020d0 <can_start>
  can_start(2);
 80031c0:	2002      	movs	r0, #2
 80031c2:	f7fe ff85 	bl	80020d0 <can_start>
  printf("Hi~. Welcome to IOT board for NUCLEO !\n");
 80031c6:	483f      	ldr	r0, [pc, #252]	; (80032c4 <main+0x15c>)
 80031c8:	f005 f88c 	bl	80082e4 <puts>
  ESP8266_ESP8266();
 80031cc:	f7fd fb00 	bl	80007d0 <ESP8266_ESP8266>
 80031d0:	e04d      	b.n	800326e <main+0x106>
		  can1_rx_flag = 0;
 80031d2:	2400      	movs	r4, #0
 80031d4:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <main+0x160>)
 80031d6:	601c      	str	r4, [r3, #0]
		  printf("CAN1 rx : "); for( i = 0 ; i < 8 ; i ++) printf("%02x",rxDataCan1[i]);
 80031d8:	483c      	ldr	r0, [pc, #240]	; (80032cc <main+0x164>)
 80031da:	f004 ffe7 	bl	80081ac <iprintf>
 80031de:	e005      	b.n	80031ec <main+0x84>
 80031e0:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <main+0x168>)
 80031e2:	5d19      	ldrb	r1, [r3, r4]
 80031e4:	483b      	ldr	r0, [pc, #236]	; (80032d4 <main+0x16c>)
 80031e6:	f004 ffe1 	bl	80081ac <iprintf>
 80031ea:	3401      	adds	r4, #1
 80031ec:	2c07      	cmp	r4, #7
 80031ee:	ddf7      	ble.n	80031e0 <main+0x78>
		  printf("\n");
 80031f0:	200a      	movs	r0, #10
 80031f2:	f004 fff3 	bl	80081dc <putchar>
 80031f6:	e03e      	b.n	8003276 <main+0x10e>
		  can2_rx_flag = 0;
 80031f8:	2400      	movs	r4, #0
 80031fa:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <main+0x170>)
 80031fc:	601c      	str	r4, [r3, #0]
		  printf("CAN2 rx : "); for( i = 0 ; i < 8 ; i ++) printf("%02x",rxDataCan2[i]);
 80031fe:	4837      	ldr	r0, [pc, #220]	; (80032dc <main+0x174>)
 8003200:	f004 ffd4 	bl	80081ac <iprintf>
 8003204:	e005      	b.n	8003212 <main+0xaa>
 8003206:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <main+0x178>)
 8003208:	5d19      	ldrb	r1, [r3, r4]
 800320a:	4832      	ldr	r0, [pc, #200]	; (80032d4 <main+0x16c>)
 800320c:	f004 ffce 	bl	80081ac <iprintf>
 8003210:	3401      	adds	r4, #1
 8003212:	2c07      	cmp	r4, #7
 8003214:	ddf7      	ble.n	8003206 <main+0x9e>
		  printf("\n");
 8003216:	200a      	movs	r0, #10
 8003218:	f004 ffe0 	bl	80081dc <putchar>
 800321c:	e02f      	b.n	800327e <main+0x116>
              ch = delete_uart_Q(&stdin_uart);
 800321e:	4831      	ldr	r0, [pc, #196]	; (80032e4 <main+0x17c>)
 8003220:	f7ff fb78 	bl	8002914 <delete_uart_Q>
              do_cmd(ch);
 8003224:	b2c0      	uxtb	r0, r0
 8003226:	f7ff f8b9 	bl	800239c <do_cmd>
 800322a:	e02d      	b.n	8003288 <main+0x120>
    	  printf("RS485 uart1 RX\n");
 800322c:	482e      	ldr	r0, [pc, #184]	; (80032e8 <main+0x180>)
 800322e:	f005 f859 	bl	80082e4 <puts>
    	  while(is_available(&rs485_uart1))
 8003232:	e004      	b.n	800323e <main+0xd6>
              ch = delete_uart_Q(&rs485_uart1);
 8003234:	482d      	ldr	r0, [pc, #180]	; (80032ec <main+0x184>)
 8003236:	f7ff fb6d 	bl	8002914 <delete_uart_Q>
              printf("%c",ch);
 800323a:	f004 ffcf 	bl	80081dc <putchar>
    	  while(is_available(&rs485_uart1))
 800323e:	482b      	ldr	r0, [pc, #172]	; (80032ec <main+0x184>)
 8003240:	f7ff fb7d 	bl	800293e <is_available>
 8003244:	2800      	cmp	r0, #0
 8003246:	d1f5      	bne.n	8003234 <main+0xcc>
    	  printf("\n");
 8003248:	200a      	movs	r0, #10
 800324a:	f004 ffc7 	bl	80081dc <putchar>
 800324e:	e020      	b.n	8003292 <main+0x12a>
              ch = delete_uart_Q(&rs485_uart4);
 8003250:	4827      	ldr	r0, [pc, #156]	; (80032f0 <main+0x188>)
 8003252:	f7ff fb5f 	bl	8002914 <delete_uart_Q>
              printf("%c",ch);
 8003256:	f004 ffc1 	bl	80081dc <putchar>
    	  while(is_available(&rs485_uart4))
 800325a:	4825      	ldr	r0, [pc, #148]	; (80032f0 <main+0x188>)
 800325c:	f7ff fb6f 	bl	800293e <is_available>
 8003260:	2800      	cmp	r0, #0
 8003262:	d1f5      	bne.n	8003250 <main+0xe8>
    	  printf("\n");
 8003264:	200a      	movs	r0, #10
 8003266:	f004 ffb9 	bl	80081dc <putchar>
      wiz_task();
 800326a:	f7ff fc5f 	bl	8002b2c <wiz_task>
	  if(can1_rx_flag)
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <main+0x160>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1ad      	bne.n	80031d2 <main+0x6a>
	  if(can2_rx_flag)
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <main+0x170>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1bc      	bne.n	80031f8 <main+0x90>
      if(is_available(&stdin_uart))
 800327e:	4819      	ldr	r0, [pc, #100]	; (80032e4 <main+0x17c>)
 8003280:	f7ff fb5d 	bl	800293e <is_available>
 8003284:	2800      	cmp	r0, #0
 8003286:	d1ca      	bne.n	800321e <main+0xb6>
      if(is_available(&rs485_uart1))
 8003288:	4818      	ldr	r0, [pc, #96]	; (80032ec <main+0x184>)
 800328a:	f7ff fb58 	bl	800293e <is_available>
 800328e:	2800      	cmp	r0, #0
 8003290:	d1cc      	bne.n	800322c <main+0xc4>
      if(is_available(&rs485_uart4))
 8003292:	4817      	ldr	r0, [pc, #92]	; (80032f0 <main+0x188>)
 8003294:	f7ff fb53 	bl	800293e <is_available>
 8003298:	2800      	cmp	r0, #0
 800329a:	d0e6      	beq.n	800326a <main+0x102>
    	  printf("RS485 uart3 RX\n");
 800329c:	4815      	ldr	r0, [pc, #84]	; (80032f4 <main+0x18c>)
 800329e:	f005 f821 	bl	80082e4 <puts>
    	  while(is_available(&rs485_uart4))
 80032a2:	e7da      	b.n	800325a <main+0xf2>
 80032a4:	20001f70 	.word	0x20001f70
 80032a8:	20003da0 	.word	0x20003da0
 80032ac:	20001f68 	.word	0x20001f68
 80032b0:	20003c7c 	.word	0x20003c7c
 80032b4:	20001f6c 	.word	0x20001f6c
 80032b8:	20001134 	.word	0x20001134
 80032bc:	20002bf4 	.word	0x20002bf4
 80032c0:	20003d04 	.word	0x20003d04
 80032c4:	0800a374 	.word	0x0800a374
 80032c8:	20000e6c 	.word	0x20000e6c
 80032cc:	0800a39c 	.word	0x0800a39c
 80032d0:	20001da0 	.word	0x20001da0
 80032d4:	0800a3a8 	.word	0x0800a3a8
 80032d8:	20000e70 	.word	0x20000e70
 80032dc:	0800a3b0 	.word	0x0800a3b0
 80032e0:	20001d98 	.word	0x20001d98
 80032e4:	20000050 	.word	0x20000050
 80032e8:	0800a3bc 	.word	0x0800a3bc
 80032ec:	20000030 	.word	0x20000030
 80032f0:	20000040 	.word	0x20000040
 80032f4:	0800a3cc 	.word	0x0800a3cc

080032f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032f8:	b500      	push	{lr}
 80032fa:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fc:	2100      	movs	r1, #0
 80032fe:	9100      	str	r1, [sp, #0]
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_MspInit+0x3c>)
 8003302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
 800330a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003310:	9200      	str	r2, [sp, #0]
 8003312:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003314:	9101      	str	r1, [sp, #4]
 8003316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003318:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003328:	2007      	movs	r0, #7
 800332a:	f000 ff6d 	bl	8004208 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800332e:	b003      	add	sp, #12
 8003330:	f85d fb04 	ldr.w	pc, [sp], #4
 8003334:	40023800 	.word	0x40023800

08003338 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003338:	b510      	push	{r4, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	2300      	movs	r3, #0
 800333e:	9305      	str	r3, [sp, #20]
 8003340:	9306      	str	r3, [sp, #24]
 8003342:	9307      	str	r3, [sp, #28]
 8003344:	9308      	str	r3, [sp, #32]
 8003346:	9309      	str	r3, [sp, #36]	; 0x24
  if(hcan->Instance==CAN1)
 8003348:	6803      	ldr	r3, [r0, #0]
 800334a:	4a48      	ldr	r2, [pc, #288]	; (800346c <HAL_CAN_MspInit+0x134>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_CAN_MspInit+0x22>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(hcan->Instance==CAN2)
 8003350:	4a47      	ldr	r2, [pc, #284]	; (8003470 <HAL_CAN_MspInit+0x138>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d03f      	beq.n	80033d6 <HAL_CAN_MspInit+0x9e>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003356:	b00a      	add	sp, #40	; 0x28
 8003358:	bd10      	pop	{r4, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 800335a:	4a46      	ldr	r2, [pc, #280]	; (8003474 <HAL_CAN_MspInit+0x13c>)
 800335c:	6813      	ldr	r3, [r2, #0]
 800335e:	3301      	adds	r3, #1
 8003360:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003362:	2b01      	cmp	r3, #1
 8003364:	d02a      	beq.n	80033bc <HAL_CAN_MspInit+0x84>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003366:	2400      	movs	r4, #0
 8003368:	9401      	str	r4, [sp, #4]
 800336a:	4b43      	ldr	r3, [pc, #268]	; (8003478 <HAL_CAN_MspInit+0x140>)
 800336c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800337e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003382:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003384:	2302      	movs	r3, #2
 8003386:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338a:	2303      	movs	r3, #3
 800338c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800338e:	2309      	movs	r3, #9
 8003390:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003392:	a905      	add	r1, sp, #20
 8003394:	4839      	ldr	r0, [pc, #228]	; (800347c <HAL_CAN_MspInit+0x144>)
 8003396:	f000 ffff 	bl	8004398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800339a:	4622      	mov	r2, r4
 800339c:	4621      	mov	r1, r4
 800339e:	2014      	movs	r0, #20
 80033a0:	f000 ff44 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80033a4:	2014      	movs	r0, #20
 80033a6:	f000 ff75 	bl	8004294 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80033aa:	4622      	mov	r2, r4
 80033ac:	4621      	mov	r1, r4
 80033ae:	2015      	movs	r0, #21
 80033b0:	f000 ff3c 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80033b4:	2015      	movs	r0, #21
 80033b6:	f000 ff6d 	bl	8004294 <HAL_NVIC_EnableIRQ>
 80033ba:	e7cc      	b.n	8003356 <HAL_CAN_MspInit+0x1e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80033bc:	2300      	movs	r3, #0
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <HAL_CAN_MspInit+0x140>)
 80033c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	9b00      	ldr	r3, [sp, #0]
 80033d4:	e7c7      	b.n	8003366 <HAL_CAN_MspInit+0x2e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	9302      	str	r3, [sp, #8]
 80033da:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_CAN_MspInit+0x140>)
 80033dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ea:	9302      	str	r3, [sp, #8]
 80033ec:	9b02      	ldr	r3, [sp, #8]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80033ee:	4a21      	ldr	r2, [pc, #132]	; (8003474 <HAL_CAN_MspInit+0x13c>)
 80033f0:	6813      	ldr	r3, [r2, #0]
 80033f2:	3301      	adds	r3, #1
 80033f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d02a      	beq.n	8003450 <HAL_CAN_MspInit+0x118>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	2400      	movs	r4, #0
 80033fc:	9404      	str	r4, [sp, #16]
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_CAN_MspInit+0x140>)
 8003400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003402:	f042 0202 	orr.w	r2, r2, #2
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	9304      	str	r3, [sp, #16]
 8003410:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8003412:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003416:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	2302      	movs	r3, #2
 800341a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341e:	2303      	movs	r3, #3
 8003420:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003422:	2309      	movs	r3, #9
 8003424:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003426:	a905      	add	r1, sp, #20
 8003428:	4815      	ldr	r0, [pc, #84]	; (8003480 <HAL_CAN_MspInit+0x148>)
 800342a:	f000 ffb5 	bl	8004398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800342e:	4622      	mov	r2, r4
 8003430:	4621      	mov	r1, r4
 8003432:	2040      	movs	r0, #64	; 0x40
 8003434:	f000 fefa 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003438:	2040      	movs	r0, #64	; 0x40
 800343a:	f000 ff2b 	bl	8004294 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800343e:	4622      	mov	r2, r4
 8003440:	4621      	mov	r1, r4
 8003442:	2041      	movs	r0, #65	; 0x41
 8003444:	f000 fef2 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003448:	2041      	movs	r0, #65	; 0x41
 800344a:	f000 ff23 	bl	8004294 <HAL_NVIC_EnableIRQ>
}
 800344e:	e782      	b.n	8003356 <HAL_CAN_MspInit+0x1e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003450:	2300      	movs	r3, #0
 8003452:	9303      	str	r3, [sp, #12]
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_CAN_MspInit+0x140>)
 8003456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003458:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	9303      	str	r3, [sp, #12]
 8003466:	9b03      	ldr	r3, [sp, #12]
 8003468:	e7c7      	b.n	80033fa <HAL_CAN_MspInit+0xc2>
 800346a:	bf00      	nop
 800346c:	40006400 	.word	0x40006400
 8003470:	40006800 	.word	0x40006800
 8003474:	200010e4 	.word	0x200010e4
 8003478:	40023800 	.word	0x40023800
 800347c:	40020000 	.word	0x40020000
 8003480:	40020400 	.word	0x40020400

08003484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003484:	b530      	push	{r4, r5, lr}
 8003486:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	2300      	movs	r3, #0
 800348a:	9303      	str	r3, [sp, #12]
 800348c:	9304      	str	r3, [sp, #16]
 800348e:	9305      	str	r3, [sp, #20]
 8003490:	9306      	str	r3, [sp, #24]
 8003492:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8003494:	6802      	ldr	r2, [r0, #0]
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <HAL_I2C_MspInit+0x68>)
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800349c:	b009      	add	sp, #36	; 0x24
 800349e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a0:	2500      	movs	r5, #0
 80034a2:	9501      	str	r5, [sp, #4]
 80034a4:	4c12      	ldr	r4, [pc, #72]	; (80034f0 <HAL_I2C_MspInit+0x6c>)
 80034a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034a8:	f043 0302 	orr.w	r3, r3, #2
 80034ac:	6323      	str	r3, [r4, #48]	; 0x30
 80034ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034be:	2312      	movs	r3, #18
 80034c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c2:	2301      	movs	r3, #1
 80034c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c6:	2303      	movs	r3, #3
 80034c8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034ca:	2304      	movs	r3, #4
 80034cc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ce:	a903      	add	r1, sp, #12
 80034d0:	4808      	ldr	r0, [pc, #32]	; (80034f4 <HAL_I2C_MspInit+0x70>)
 80034d2:	f000 ff61 	bl	8004398 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034d6:	9502      	str	r5, [sp, #8]
 80034d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034de:	6423      	str	r3, [r4, #64]	; 0x40
 80034e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e6:	9302      	str	r3, [sp, #8]
 80034e8:	9b02      	ldr	r3, [sp, #8]
}
 80034ea:	e7d7      	b.n	800349c <HAL_I2C_MspInit+0x18>
 80034ec:	40005400 	.word	0x40005400
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020400 	.word	0x40020400

080034f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034f8:	b500      	push	{lr}
 80034fa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fc:	2300      	movs	r3, #0
 80034fe:	9303      	str	r3, [sp, #12]
 8003500:	9304      	str	r3, [sp, #16]
 8003502:	9305      	str	r3, [sp, #20]
 8003504:	9306      	str	r3, [sp, #24]
 8003506:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8003508:	6802      	ldr	r2, [r0, #0]
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_SPI_MspInit+0x68>)
 800350c:	429a      	cmp	r2, r3
 800350e:	d002      	beq.n	8003516 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003510:	b009      	add	sp, #36	; 0x24
 8003512:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003516:	2200      	movs	r2, #0
 8003518:	9201      	str	r2, [sp, #4]
 800351a:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800351e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003520:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003524:	6459      	str	r1, [r3, #68]	; 0x44
 8003526:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003528:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 800352c:	9101      	str	r1, [sp, #4]
 800352e:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003530:	9202      	str	r2, [sp, #8]
 8003532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003534:	f041 0101 	orr.w	r1, r1, #1
 8003538:	6319      	str	r1, [r3, #48]	; 0x30
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	9302      	str	r3, [sp, #8]
 8003542:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003544:	23e0      	movs	r3, #224	; 0xe0
 8003546:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354e:	2303      	movs	r3, #3
 8003550:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003552:	2305      	movs	r3, #5
 8003554:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003556:	a903      	add	r1, sp, #12
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <HAL_SPI_MspInit+0x6c>)
 800355a:	f000 ff1d 	bl	8004398 <HAL_GPIO_Init>
}
 800355e:	e7d7      	b.n	8003510 <HAL_SPI_MspInit+0x18>
 8003560:	40013000 	.word	0x40013000
 8003564:	40020000 	.word	0x40020000

08003568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356a:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	2300      	movs	r3, #0
 800356e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003570:	930c      	str	r3, [sp, #48]	; 0x30
 8003572:	930d      	str	r3, [sp, #52]	; 0x34
 8003574:	930e      	str	r3, [sp, #56]	; 0x38
 8003576:	930f      	str	r3, [sp, #60]	; 0x3c
  if(huart->Instance==UART4)
 8003578:	6803      	ldr	r3, [r0, #0]
 800357a:	4a7f      	ldr	r2, [pc, #508]	; (8003778 <HAL_UART_MspInit+0x210>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00f      	beq.n	80035a0 <HAL_UART_MspInit+0x38>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 8003580:	4a7e      	ldr	r2, [pc, #504]	; (800377c <HAL_UART_MspInit+0x214>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d038      	beq.n	80035f8 <HAL_UART_MspInit+0x90>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8003586:	4a7e      	ldr	r2, [pc, #504]	; (8003780 <HAL_UART_MspInit+0x218>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d062      	beq.n	8003652 <HAL_UART_MspInit+0xea>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800358c:	4a7d      	ldr	r2, [pc, #500]	; (8003784 <HAL_UART_MspInit+0x21c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	f000 808b 	beq.w	80036aa <HAL_UART_MspInit+0x142>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8003594:	4a7c      	ldr	r2, [pc, #496]	; (8003788 <HAL_UART_MspInit+0x220>)
 8003596:	4293      	cmp	r3, r2
 8003598:	f000 80c9 	beq.w	800372e <HAL_UART_MspInit+0x1c6>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800359c:	b011      	add	sp, #68	; 0x44
 800359e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_UART4_CLK_ENABLE();
 80035a0:	2400      	movs	r4, #0
 80035a2:	9400      	str	r4, [sp, #0]
 80035a4:	4b79      	ldr	r3, [pc, #484]	; (800378c <HAL_UART_MspInit+0x224>)
 80035a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40
 80035ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80035b4:	9200      	str	r2, [sp, #0]
 80035b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b8:	9401      	str	r4, [sp, #4]
 80035ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035cc:	2303      	movs	r3, #3
 80035ce:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d0:	2202      	movs	r2, #2
 80035d2:	920c      	str	r2, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035d4:	2201      	movs	r2, #1
 80035d6:	920d      	str	r2, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d8:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035da:	2308      	movs	r3, #8
 80035dc:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035de:	a90b      	add	r1, sp, #44	; 0x2c
 80035e0:	486b      	ldr	r0, [pc, #428]	; (8003790 <HAL_UART_MspInit+0x228>)
 80035e2:	f000 fed9 	bl	8004398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80035e6:	4622      	mov	r2, r4
 80035e8:	4621      	mov	r1, r4
 80035ea:	2034      	movs	r0, #52	; 0x34
 80035ec:	f000 fe1e 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80035f0:	2034      	movs	r0, #52	; 0x34
 80035f2:	f000 fe4f 	bl	8004294 <HAL_NVIC_EnableIRQ>
 80035f6:	e7d1      	b.n	800359c <HAL_UART_MspInit+0x34>
    __HAL_RCC_USART1_CLK_ENABLE();
 80035f8:	2400      	movs	r4, #0
 80035fa:	9402      	str	r4, [sp, #8]
 80035fc:	4b63      	ldr	r3, [pc, #396]	; (800378c <HAL_UART_MspInit+0x224>)
 80035fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003600:	f042 0210 	orr.w	r2, r2, #16
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
 8003606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003608:	f002 0210 	and.w	r2, r2, #16
 800360c:	9202      	str	r2, [sp, #8]
 800360e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003610:	9403      	str	r4, [sp, #12]
 8003612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003614:	f042 0201 	orr.w	r2, r2, #1
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	9303      	str	r3, [sp, #12]
 8003622:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003624:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003628:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003630:	2303      	movs	r3, #3
 8003632:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003634:	2307      	movs	r3, #7
 8003636:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	a90b      	add	r1, sp, #44	; 0x2c
 800363a:	4855      	ldr	r0, [pc, #340]	; (8003790 <HAL_UART_MspInit+0x228>)
 800363c:	f000 feac 	bl	8004398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003640:	4622      	mov	r2, r4
 8003642:	4621      	mov	r1, r4
 8003644:	2025      	movs	r0, #37	; 0x25
 8003646:	f000 fdf1 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800364a:	2025      	movs	r0, #37	; 0x25
 800364c:	f000 fe22 	bl	8004294 <HAL_NVIC_EnableIRQ>
 8003650:	e7a4      	b.n	800359c <HAL_UART_MspInit+0x34>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003652:	2400      	movs	r4, #0
 8003654:	9404      	str	r4, [sp, #16]
 8003656:	4b4d      	ldr	r3, [pc, #308]	; (800378c <HAL_UART_MspInit+0x224>)
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
 8003660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003662:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003666:	9204      	str	r2, [sp, #16]
 8003668:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366a:	9405      	str	r4, [sp, #20]
 800366c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	9305      	str	r3, [sp, #20]
 800367c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800367e:	230c      	movs	r3, #12
 8003680:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2302      	movs	r3, #2
 8003684:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003688:	2303      	movs	r3, #3
 800368a:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800368c:	2307      	movs	r3, #7
 800368e:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003690:	a90b      	add	r1, sp, #44	; 0x2c
 8003692:	483f      	ldr	r0, [pc, #252]	; (8003790 <HAL_UART_MspInit+0x228>)
 8003694:	f000 fe80 	bl	8004398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003698:	4622      	mov	r2, r4
 800369a:	4621      	mov	r1, r4
 800369c:	2026      	movs	r0, #38	; 0x26
 800369e:	f000 fdc5 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036a2:	2026      	movs	r0, #38	; 0x26
 80036a4:	f000 fdf6 	bl	8004294 <HAL_NVIC_EnableIRQ>
 80036a8:	e778      	b.n	800359c <HAL_UART_MspInit+0x34>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036aa:	2400      	movs	r4, #0
 80036ac:	9406      	str	r4, [sp, #24]
 80036ae:	4b37      	ldr	r3, [pc, #220]	; (800378c <HAL_UART_MspInit+0x224>)
 80036b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
 80036b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ba:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80036be:	9206      	str	r2, [sp, #24]
 80036c0:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c2:	9407      	str	r4, [sp, #28]
 80036c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c6:	f042 0202 	orr.w	r2, r2, #2
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
 80036cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ce:	f002 0202 	and.w	r2, r2, #2
 80036d2:	9207      	str	r2, [sp, #28]
 80036d4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d6:	9408      	str	r4, [sp, #32]
 80036d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036da:	f042 0204 	orr.w	r2, r2, #4
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	9308      	str	r3, [sp, #32]
 80036e8:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80036ea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80036ee:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2702      	movs	r7, #2
 80036f2:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f6:	2603      	movs	r6, #3
 80036f8:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036fa:	2507      	movs	r5, #7
 80036fc:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fe:	a90b      	add	r1, sp, #44	; 0x2c
 8003700:	4824      	ldr	r0, [pc, #144]	; (8003794 <HAL_UART_MspInit+0x22c>)
 8003702:	f000 fe49 	bl	8004398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003706:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800370a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370c:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003710:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003712:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003714:	a90b      	add	r1, sp, #44	; 0x2c
 8003716:	4820      	ldr	r0, [pc, #128]	; (8003798 <HAL_UART_MspInit+0x230>)
 8003718:	f000 fe3e 	bl	8004398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800371c:	4622      	mov	r2, r4
 800371e:	4621      	mov	r1, r4
 8003720:	2027      	movs	r0, #39	; 0x27
 8003722:	f000 fd83 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003726:	2027      	movs	r0, #39	; 0x27
 8003728:	f000 fdb4 	bl	8004294 <HAL_NVIC_EnableIRQ>
 800372c:	e736      	b.n	800359c <HAL_UART_MspInit+0x34>
    __HAL_RCC_USART6_CLK_ENABLE();
 800372e:	2200      	movs	r2, #0
 8003730:	9209      	str	r2, [sp, #36]	; 0x24
 8003732:	4b16      	ldr	r3, [pc, #88]	; (800378c <HAL_UART_MspInit+0x224>)
 8003734:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003736:	f041 0120 	orr.w	r1, r1, #32
 800373a:	6459      	str	r1, [r3, #68]	; 0x44
 800373c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800373e:	f001 0120 	and.w	r1, r1, #32
 8003742:	9109      	str	r1, [sp, #36]	; 0x24
 8003744:	9909      	ldr	r1, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003746:	920a      	str	r2, [sp, #40]	; 0x28
 8003748:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800374a:	f041 0104 	orr.w	r1, r1, #4
 800374e:	6319      	str	r1, [r3, #48]	; 0x30
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	930a      	str	r3, [sp, #40]	; 0x28
 8003758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800375a:	23c0      	movs	r3, #192	; 0xc0
 800375c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375e:	2302      	movs	r3, #2
 8003760:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	920d      	str	r2, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003764:	2303      	movs	r3, #3
 8003766:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003768:	2308      	movs	r3, #8
 800376a:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800376c:	a90b      	add	r1, sp, #44	; 0x2c
 800376e:	480a      	ldr	r0, [pc, #40]	; (8003798 <HAL_UART_MspInit+0x230>)
 8003770:	f000 fe12 	bl	8004398 <HAL_GPIO_Init>
}
 8003774:	e712      	b.n	800359c <HAL_UART_MspInit+0x34>
 8003776:	bf00      	nop
 8003778:	40004c00 	.word	0x40004c00
 800377c:	40011000 	.word	0x40011000
 8003780:	40004400 	.word	0x40004400
 8003784:	40004800 	.word	0x40004800
 8003788:	40011400 	.word	0x40011400
 800378c:	40023800 	.word	0x40023800
 8003790:	40020000 	.word	0x40020000
 8003794:	40020400 	.word	0x40020400
 8003798:	40020800 	.word	0x40020800

0800379c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800379c:	e7fe      	b.n	800379c <NMI_Handler>

0800379e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800379e:	e7fe      	b.n	800379e <HardFault_Handler>

080037a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037a0:	e7fe      	b.n	80037a0 <MemManage_Handler>

080037a2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037a2:	e7fe      	b.n	80037a2 <BusFault_Handler>

080037a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037a4:	e7fe      	b.n	80037a4 <UsageFault_Handler>

080037a6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037a6:	4770      	bx	lr

080037a8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037a8:	4770      	bx	lr

080037aa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037aa:	4770      	bx	lr

080037ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037ae:	f000 f917 	bl	80039e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b2:	bd08      	pop	{r3, pc}

080037b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80037b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80037b6:	4802      	ldr	r0, [pc, #8]	; (80037c0 <CAN1_RX0_IRQHandler+0xc>)
 80037b8:	f000 fc01 	bl	8003fbe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80037bc:	bd08      	pop	{r3, pc}
 80037be:	bf00      	nop
 80037c0:	20003de4 	.word	0x20003de4

080037c4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80037c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80037c6:	4802      	ldr	r0, [pc, #8]	; (80037d0 <CAN1_RX1_IRQHandler+0xc>)
 80037c8:	f000 fbf9 	bl	8003fbe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80037cc:	bd08      	pop	{r3, pc}
 80037ce:	bf00      	nop
 80037d0:	20003de4 	.word	0x20003de4

080037d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037d6:	4802      	ldr	r0, [pc, #8]	; (80037e0 <USART1_IRQHandler+0xc>)
 80037d8:	f002 f998 	bl	8005b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037dc:	bd08      	pop	{r3, pc}
 80037de:	bf00      	nop
 80037e0:	20003c7c 	.word	0x20003c7c

080037e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037e6:	4802      	ldr	r0, [pc, #8]	; (80037f0 <USART2_IRQHandler+0xc>)
 80037e8:	f002 f990 	bl	8005b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037ec:	bd08      	pop	{r3, pc}
 80037ee:	bf00      	nop
 80037f0:	20003da0 	.word	0x20003da0

080037f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80037f4:	b500      	push	{lr}
 80037f6:	b083      	sub	sp, #12
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern int insert_uart_AT_Q(uint8_t ch);
	uint32_t isrflags   = READ_REG(huart3.Instance->SR);
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <USART3_IRQHandler+0x50>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
	uint32_t cr1its     = READ_REG(huart3.Instance->CR1);
 80037fe:	68d9      	ldr	r1, [r3, #12]
	uint32_t cr3its     = READ_REG(huart3.Instance->CR3);
 8003800:	6958      	ldr	r0, [r3, #20]
	uint32_t errorflags;
	/* If no error occurs */
	errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
	if (errorflags == RESET)
 8003802:	f012 0f0f 	tst.w	r2, #15
 8003806:	d10a      	bne.n	800381e <USART3_IRQHandler+0x2a>
	{
	   /* UART in mode Receiver ---------------------------------------------------*/
	     if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003808:	f012 0f20 	tst.w	r2, #32
 800380c:	d013      	beq.n	8003836 <USART3_IRQHandler+0x42>
 800380e:	f011 0f20 	tst.w	r1, #32
 8003812:	d010      	beq.n	8003836 <USART3_IRQHandler+0x42>
	     {
	    	 insert_uart_AT_Q(READ_REG(huart3.Instance->DR));
 8003814:	6858      	ldr	r0, [r3, #4]
 8003816:	b2c0      	uxtb	r0, r0
 8003818:	f7ff f874 	bl	8002904 <insert_uart_AT_Q>
	          return;
 800381c:	e00e      	b.n	800383c <USART3_IRQHandler+0x48>
	     }
	}
	else
	{
		volatile uint8_t tmp;
		tmp = huart3.Instance->DR;
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f88d 2007 	strb.w	r2, [sp, #7]
		tmp = huart3.Instance->DR;
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	f88d 2007 	strb.w	r2, [sp, #7]
		tmp = huart3.Instance->DR;
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f88d 3007 	strb.w	r3, [sp, #7]
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003836:	4803      	ldr	r0, [pc, #12]	; (8003844 <USART3_IRQHandler+0x50>)
 8003838:	f002 f968 	bl	8005b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800383c:	b003      	add	sp, #12
 800383e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003842:	bf00      	nop
 8003844:	20001134 	.word	0x20001134

08003848 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003848:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800384a:	4802      	ldr	r0, [pc, #8]	; (8003854 <UART4_IRQHandler+0xc>)
 800384c:	f002 f95e 	bl	8005b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003850:	bd08      	pop	{r3, pc}
 8003852:	bf00      	nop
 8003854:	20003d04 	.word	0x20003d04

08003858 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003858:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800385a:	4802      	ldr	r0, [pc, #8]	; (8003864 <CAN2_RX0_IRQHandler+0xc>)
 800385c:	f000 fbaf 	bl	8003fbe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003860:	bd08      	pop	{r3, pc}
 8003862:	bf00      	nop
 8003864:	20003c54 	.word	0x20003c54

08003868 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8003868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800386a:	4802      	ldr	r0, [pc, #8]	; (8003874 <CAN2_RX1_IRQHandler+0xc>)
 800386c:	f000 fba7 	bl	8003fbe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8003870:	bd08      	pop	{r3, pc}
 8003872:	bf00      	nop
 8003874:	20003c54 	.word	0x20003c54

08003878 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	460c      	mov	r4, r1
 800387c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800387e:	2500      	movs	r5, #0
 8003880:	42b5      	cmp	r5, r6
 8003882:	da07      	bge.n	8003894 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8003884:	f3af 8000 	nop.w
 8003888:	4621      	mov	r1, r4
 800388a:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800388e:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8003890:	460c      	mov	r4, r1
 8003892:	e7f5      	b.n	8003880 <_read+0x8>
	}

return len;
}
 8003894:	4630      	mov	r0, r6
 8003896:	bd70      	pop	{r4, r5, r6, pc}

08003898 <_close>:
}

int _close(int file)
{
	return -1;
}
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	4770      	bx	lr

0800389e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800389e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038a2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80038a4:	2000      	movs	r0, #0
 80038a6:	4770      	bx	lr

080038a8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80038a8:	2001      	movs	r0, #1
 80038aa:	4770      	bx	lr

080038ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80038ac:	2000      	movs	r0, #0
 80038ae:	4770      	bx	lr

080038b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b0:	b510      	push	{r4, lr}
 80038b2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b4:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <_sbrk+0x38>)
 80038b6:	490d      	ldr	r1, [pc, #52]	; (80038ec <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038b8:	480d      	ldr	r0, [pc, #52]	; (80038f0 <_sbrk+0x40>)
 80038ba:	6800      	ldr	r0, [r0, #0]
 80038bc:	b140      	cbz	r0, 80038d0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038be:	480c      	ldr	r0, [pc, #48]	; (80038f0 <_sbrk+0x40>)
 80038c0:	6800      	ldr	r0, [r0, #0]
 80038c2:	4403      	add	r3, r0
 80038c4:	1a52      	subs	r2, r2, r1
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d806      	bhi.n	80038d8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80038ca:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <_sbrk+0x40>)
 80038cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80038ce:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80038d0:	4807      	ldr	r0, [pc, #28]	; (80038f0 <_sbrk+0x40>)
 80038d2:	4c08      	ldr	r4, [pc, #32]	; (80038f4 <_sbrk+0x44>)
 80038d4:	6004      	str	r4, [r0, #0]
 80038d6:	e7f2      	b.n	80038be <_sbrk+0xe>
    errno = ENOMEM;
 80038d8:	f004 f98e 	bl	8007bf8 <__errno>
 80038dc:	230c      	movs	r3, #12
 80038de:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	e7f3      	b.n	80038ce <_sbrk+0x1e>
 80038e6:	bf00      	nop
 80038e8:	20020000 	.word	0x20020000
 80038ec:	00000400 	.word	0x00000400
 80038f0:	200010e8 	.word	0x200010e8
 80038f4:	20003e38 	.word	0x20003e38

080038f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038f8:	4a03      	ldr	r2, [pc, #12]	; (8003908 <SystemInit+0x10>)
 80038fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003902:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003906:	4770      	bx	lr
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800390c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003944 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003910:	480d      	ldr	r0, [pc, #52]	; (8003948 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003912:	490e      	ldr	r1, [pc, #56]	; (800394c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003914:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003918:	e002      	b.n	8003920 <LoopCopyDataInit>

0800391a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800391a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800391c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800391e:	3304      	adds	r3, #4

08003920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003924:	d3f9      	bcc.n	800391a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003926:	4a0b      	ldr	r2, [pc, #44]	; (8003954 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003928:	4c0b      	ldr	r4, [pc, #44]	; (8003958 <LoopFillZerobss+0x26>)
  movs r3, #0
 800392a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800392c:	e001      	b.n	8003932 <LoopFillZerobss>

0800392e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800392e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003930:	3204      	adds	r2, #4

08003932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003934:	d3fb      	bcc.n	800392e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003936:	f7ff ffdf 	bl	80038f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800393a:	f004 fb2d 	bl	8007f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800393e:	f7ff fc13 	bl	8003168 <main>
  bx  lr    
 8003942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800394c:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8003950:	0800a65c 	.word	0x0800a65c
  ldr r2, =_sbss
 8003954:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8003958:	20003e38 	.word	0x20003e38

0800395c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800395c:	e7fe      	b.n	800395c <ADC_IRQHandler>
	...

08003960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_InitTick+0x40>)
 8003966:	7818      	ldrb	r0, [r3, #0]
 8003968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800396c:	fbb3 f3f0 	udiv	r3, r3, r0
 8003970:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <HAL_InitTick+0x44>)
 8003972:	6810      	ldr	r0, [r2, #0]
 8003974:	fbb0 f0f3 	udiv	r0, r0, r3
 8003978:	f000 fc9a 	bl	80042b0 <HAL_SYSTICK_Config>
 800397c:	b968      	cbnz	r0, 800399a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800397e:	2c0f      	cmp	r4, #15
 8003980:	d901      	bls.n	8003986 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8003982:	2001      	movs	r0, #1
 8003984:	e00a      	b.n	800399c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003986:	2200      	movs	r2, #0
 8003988:	4621      	mov	r1, r4
 800398a:	f04f 30ff 	mov.w	r0, #4294967295
 800398e:	f000 fc4d 	bl	800422c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_InitTick+0x48>)
 8003994:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003996:	2000      	movs	r0, #0
 8003998:	e000      	b.n	800399c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800399a:	2001      	movs	r0, #1
}
 800399c:	bd10      	pop	{r4, pc}
 800399e:	bf00      	nop
 80039a0:	2000007c 	.word	0x2000007c
 80039a4:	20000078 	.word	0x20000078
 80039a8:	20000080 	.word	0x20000080

080039ac <HAL_Init>:
{
 80039ac:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_Init+0x30>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039be:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039c6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039c8:	2003      	movs	r0, #3
 80039ca:	f000 fc1d 	bl	8004208 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ce:	2000      	movs	r0, #0
 80039d0:	f7ff ffc6 	bl	8003960 <HAL_InitTick>
  HAL_MspInit();
 80039d4:	f7ff fc90 	bl	80032f8 <HAL_MspInit>
}
 80039d8:	2000      	movs	r0, #0
 80039da:	bd08      	pop	{r3, pc}
 80039dc:	40023c00 	.word	0x40023c00

080039e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80039e0:	4a03      	ldr	r2, [pc, #12]	; (80039f0 <HAL_IncTick+0x10>)
 80039e2:	6811      	ldr	r1, [r2, #0]
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_IncTick+0x14>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	440b      	add	r3, r1
 80039ea:	6013      	str	r3, [r2, #0]
}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20003e0c 	.word	0x20003e0c
 80039f4:	2000007c 	.word	0x2000007c

080039f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80039f8:	4b01      	ldr	r3, [pc, #4]	; (8003a00 <HAL_GetTick+0x8>)
 80039fa:	6818      	ldr	r0, [r3, #0]
}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20003e0c 	.word	0x20003e0c

08003a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003a08:	f7ff fff6 	bl	80039f8 <HAL_GetTick>
 8003a0c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a0e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003a12:	d002      	beq.n	8003a1a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <HAL_Delay+0x24>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a1a:	f7ff ffed 	bl	80039f8 <HAL_GetTick>
 8003a1e:	1b40      	subs	r0, r0, r5
 8003a20:	42a0      	cmp	r0, r4
 8003a22:	d3fa      	bcc.n	8003a1a <HAL_Delay+0x16>
  {
  }
}
 8003a24:	bd38      	pop	{r3, r4, r5, pc}
 8003a26:	bf00      	nop
 8003a28:	2000007c 	.word	0x2000007c

08003a2c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	f000 80a1 	beq.w	8003b74 <HAL_CAN_Init+0x148>
{
 8003a32:	b538      	push	{r3, r4, r5, lr}
 8003a34:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a36:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003a3a:	b1d3      	cbz	r3, 8003a72 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a3c:	6822      	ldr	r2, [r4, #0]
 8003a3e:	6813      	ldr	r3, [r2, #0]
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a46:	f7ff ffd7 	bl	80039f8 <HAL_GetTick>
 8003a4a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	f012 0f01 	tst.w	r2, #1
 8003a54:	d110      	bne.n	8003a78 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a56:	f7ff ffcf 	bl	80039f8 <HAL_GetTick>
 8003a5a:	1b40      	subs	r0, r0, r5
 8003a5c:	280a      	cmp	r0, #10
 8003a5e:	d9f5      	bls.n	8003a4c <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a66:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a68:	2305      	movs	r3, #5
 8003a6a:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8003a6e:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8003a70:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8003a72:	f7ff fc61 	bl	8003338 <HAL_CAN_MspInit>
 8003a76:	e7e1      	b.n	8003a3c <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	f022 0202 	bic.w	r2, r2, #2
 8003a7e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003a80:	f7ff ffba 	bl	80039f8 <HAL_GetTick>
 8003a84:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	f012 0f02 	tst.w	r2, #2
 8003a8e:	d00d      	beq.n	8003aac <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a90:	f7ff ffb2 	bl	80039f8 <HAL_GetTick>
 8003a94:	1b40      	subs	r0, r0, r5
 8003a96:	280a      	cmp	r0, #10
 8003a98:	d9f5      	bls.n	8003a86 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa0:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003aa2:	2305      	movs	r3, #5
 8003aa4:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	e7e1      	b.n	8003a70 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003aac:	7e22      	ldrb	r2, [r4, #24]
 8003aae:	2a01      	cmp	r2, #1
 8003ab0:	d03d      	beq.n	8003b2e <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ab8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8003aba:	7e63      	ldrb	r3, [r4, #25]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d03b      	beq.n	8003b38 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ac0:	6822      	ldr	r2, [r4, #0]
 8003ac2:	6813      	ldr	r3, [r2, #0]
 8003ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003aca:	7ea3      	ldrb	r3, [r4, #26]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d039      	beq.n	8003b44 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ad0:	6822      	ldr	r2, [r4, #0]
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	f023 0320 	bic.w	r3, r3, #32
 8003ad8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ada:	7ee3      	ldrb	r3, [r4, #27]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d037      	beq.n	8003b50 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ae0:	6822      	ldr	r2, [r4, #0]
 8003ae2:	6813      	ldr	r3, [r2, #0]
 8003ae4:	f043 0310 	orr.w	r3, r3, #16
 8003ae8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003aea:	7f23      	ldrb	r3, [r4, #28]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d035      	beq.n	8003b5c <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	6813      	ldr	r3, [r2, #0]
 8003af4:	f023 0308 	bic.w	r3, r3, #8
 8003af8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003afa:	7f63      	ldrb	r3, [r4, #29]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d033      	beq.n	8003b68 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b00:	6822      	ldr	r2, [r4, #0]
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	f023 0304 	bic.w	r3, r3, #4
 8003b08:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b0a:	68a3      	ldr	r3, [r4, #8]
 8003b0c:	68e2      	ldr	r2, [r4, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	6922      	ldr	r2, [r4, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	6962      	ldr	r2, [r4, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	6862      	ldr	r2, [r4, #4]
 8003b1a:	3a01      	subs	r2, #1
 8003b1c:	6821      	ldr	r1, [r4, #0]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b22:	2000      	movs	r0, #0
 8003b24:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8003b2c:	e7a0      	b.n	8003a70 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e7c0      	b.n	8003aba <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b38:	6822      	ldr	r2, [r4, #0]
 8003b3a:	6813      	ldr	r3, [r2, #0]
 8003b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e7c2      	b.n	8003aca <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	f043 0320 	orr.w	r3, r3, #32
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e7c4      	b.n	8003ada <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b50:	6822      	ldr	r2, [r4, #0]
 8003b52:	6813      	ldr	r3, [r2, #0]
 8003b54:	f023 0310 	bic.w	r3, r3, #16
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e7c6      	b.n	8003aea <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b5c:	6822      	ldr	r2, [r4, #0]
 8003b5e:	6813      	ldr	r3, [r2, #0]
 8003b60:	f043 0308 	orr.w	r3, r3, #8
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e7c8      	b.n	8003afa <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b68:	6822      	ldr	r2, [r4, #0]
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	f043 0304 	orr.w	r3, r3, #4
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e7ca      	b.n	8003b0a <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8003b74:	2001      	movs	r0, #1
}
 8003b76:	4770      	bx	lr

08003b78 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b78:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d905      	bls.n	8003b90 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003b86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b8a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003b8c:	2001      	movs	r0, #1
  }
}
 8003b8e:	4770      	bx	lr
{
 8003b90:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b92:	4b44      	ldr	r3, [pc, #272]	; (8003ca4 <HAL_CAN_ConfigFilter+0x12c>)
 8003b94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003ba0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003ba4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003ba8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003bac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003bb0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8003bb2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003bb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003bba:	694a      	ldr	r2, [r1, #20]
 8003bbc:	f002 021f 	and.w	r2, r2, #31
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003bc6:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 8003bca:	43d4      	mvns	r4, r2
 8003bcc:	ea20 0002 	bic.w	r0, r0, r2
 8003bd0:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003bd4:	69cb      	ldr	r3, [r1, #28]
 8003bd6:	b9b3      	cbnz	r3, 8003c06 <HAL_CAN_ConfigFilter+0x8e>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003bd8:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <HAL_CAN_ConfigFilter+0x12c>)
 8003bda:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8003bde:	4020      	ands	r0, r4
 8003be0:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003be4:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003be6:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003be8:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bea:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bee:	3048      	adds	r0, #72	; 0x48
 8003bf0:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bf4:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003bf6:	8808      	ldrh	r0, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bf8:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bfe:	3548      	adds	r5, #72	; 0x48
 8003c00:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003c04:	6058      	str	r0, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003c06:	69cb      	ldr	r3, [r1, #28]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d01d      	beq.n	8003c48 <HAL_CAN_ConfigFilter+0xd0>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003c0c:	698b      	ldr	r3, [r1, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d132      	bne.n	8003c78 <HAL_CAN_ConfigFilter+0x100>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003c12:	4824      	ldr	r0, [pc, #144]	; (8003ca4 <HAL_CAN_ConfigFilter+0x12c>)
 8003c14:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003c18:	4023      	ands	r3, r4
 8003c1a:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003c1e:	690b      	ldr	r3, [r1, #16]
 8003c20:	bb8b      	cbnz	r3, 8003c86 <HAL_CAN_ConfigFilter+0x10e>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <HAL_CAN_ConfigFilter+0x12c>)
 8003c24:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003c28:	4004      	ands	r4, r0
 8003c2a:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003c2e:	6a0b      	ldr	r3, [r1, #32]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d02f      	beq.n	8003c94 <HAL_CAN_ConfigFilter+0x11c>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c34:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <HAL_CAN_ConfigFilter+0x12c>)
 8003c36:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8003c42:	2000      	movs	r0, #0
}
 8003c44:	bc70      	pop	{r4, r5, r6}
 8003c46:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003c48:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <HAL_CAN_ConfigFilter+0x12c>)
 8003c4a:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8003c4e:	4310      	orrs	r0, r2
 8003c50:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c54:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c56:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c58:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c5a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c5e:	3048      	adds	r0, #72	; 0x48
 8003c60:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c64:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003c66:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c68:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c6e:	3548      	adds	r5, #72	; 0x48
 8003c70:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003c74:	6058      	str	r0, [r3, #4]
 8003c76:	e7c9      	b.n	8003c0c <HAL_CAN_ConfigFilter+0x94>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c78:	480a      	ldr	r0, [pc, #40]	; (8003ca4 <HAL_CAN_ConfigFilter+0x12c>)
 8003c7a:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 8003c84:	e7cb      	b.n	8003c1e <HAL_CAN_ConfigFilter+0xa6>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c86:	4807      	ldr	r0, [pc, #28]	; (8003ca4 <HAL_CAN_ConfigFilter+0x12c>)
 8003c88:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 8003c92:	e7cc      	b.n	8003c2e <HAL_CAN_ConfigFilter+0xb6>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003c94:	4903      	ldr	r1, [pc, #12]	; (8003ca4 <HAL_CAN_ConfigFilter+0x12c>)
 8003c96:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
 8003ca0:	e7c8      	b.n	8003c34 <HAL_CAN_ConfigFilter+0xbc>
 8003ca2:	bf00      	nop
 8003ca4:	40006400 	.word	0x40006400

08003ca8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003cac:	f890 5020 	ldrb.w	r5, [r0, #32]
 8003cb0:	b2ed      	uxtb	r5, r5
 8003cb2:	2d01      	cmp	r5, #1
 8003cb4:	d006      	beq.n	8003cc4 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003cb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cbc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003cbe:	2501      	movs	r5, #1
  }
}
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003cca:	6802      	ldr	r2, [r0, #0]
 8003ccc:	6813      	ldr	r3, [r2, #0]
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003cd4:	f7ff fe90 	bl	80039f8 <HAL_GetTick>
 8003cd8:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f013 0f01 	tst.w	r3, #1
 8003ce2:	d00c      	beq.n	8003cfe <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ce4:	f7ff fe88 	bl	80039f8 <HAL_GetTick>
 8003ce8:	1b83      	subs	r3, r0, r6
 8003cea:	2b0a      	cmp	r3, #10
 8003cec:	d9f5      	bls.n	8003cda <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf4:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003cf6:	2305      	movs	r3, #5
 8003cf8:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8003cfc:	e7e0      	b.n	8003cc0 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003cfe:	2500      	movs	r5, #0
 8003d00:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8003d02:	e7dd      	b.n	8003cc0 <HAL_CAN_Start+0x18>

08003d04 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003d04:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d06:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003d0a:	6805      	ldr	r5, [r0, #0]
 8003d0c:	68ad      	ldr	r5, [r5, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d0e:	3c01      	subs	r4, #1
 8003d10:	b2e4      	uxtb	r4, r4
 8003d12:	2c01      	cmp	r4, #1
 8003d14:	d865      	bhi.n	8003de2 <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d16:	f015 5fe0 	tst.w	r5, #469762048	; 0x1c000000
 8003d1a:	d05c      	beq.n	8003dd6 <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003d1c:	f3c5 6401 	ubfx	r4, r5, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003d20:	2c02      	cmp	r4, #2
 8003d22:	d905      	bls.n	8003d30 <HAL_CAN_AddTxMessage+0x2c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003d24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d2a:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	e05d      	b.n	8003dec <HAL_CAN_AddTxMessage+0xe8>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003d30:	2501      	movs	r5, #1
 8003d32:	40a5      	lsls	r5, r4
 8003d34:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003d36:	688b      	ldr	r3, [r1, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d139      	bne.n	8003db0 <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d3c:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 8003d3e:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d40:	6805      	ldr	r5, [r0, #0]
 8003d42:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 8003d46:	f104 0318 	add.w	r3, r4, #24
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	50ee      	str	r6, [r5, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003d4e:	6803      	ldr	r3, [r0, #0]
 8003d50:	690d      	ldr	r5, [r1, #16]
 8003d52:	f104 0618 	add.w	r6, r4, #24
 8003d56:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8003d5a:	605d      	str	r5, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003d5c:	7d0b      	ldrb	r3, [r1, #20]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d031      	beq.n	8003dc6 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003d62:	79d1      	ldrb	r1, [r2, #7]
 8003d64:	7993      	ldrb	r3, [r2, #6]
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003d6c:	7951      	ldrb	r1, [r2, #5]
 8003d6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d72:	7915      	ldrb	r5, [r2, #4]
 8003d74:	6801      	ldr	r1, [r0, #0]
 8003d76:	432b      	orrs	r3, r5
 8003d78:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8003d7c:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d80:	78d1      	ldrb	r1, [r2, #3]
 8003d82:	7893      	ldrb	r3, [r2, #2]
 8003d84:	041b      	lsls	r3, r3, #16
 8003d86:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003d8a:	7851      	ldrb	r1, [r2, #1]
 8003d8c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d90:	7811      	ldrb	r1, [r2, #0]
 8003d92:	6802      	ldr	r2, [r0, #0]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003d9a:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003d9e:	6802      	ldr	r2, [r0, #0]
 8003da0:	3418      	adds	r4, #24
 8003da2:	0124      	lsls	r4, r4, #4
 8003da4:	5913      	ldr	r3, [r2, r4]
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	5113      	str	r3, [r2, r4]

      /* Return function status */
      return HAL_OK;
 8003dac:	2000      	movs	r0, #0
 8003dae:	e01d      	b.n	8003dec <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003db0:	684d      	ldr	r5, [r1, #4]
 8003db2:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
                                                           pHeader->RTR);
 8003db6:	68cd      	ldr	r5, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003db8:	6806      	ldr	r6, [r0, #0]
                                                           pHeader->IDE |
 8003dba:	432b      	orrs	r3, r5
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003dbc:	f104 0518 	add.w	r5, r4, #24
 8003dc0:	012d      	lsls	r5, r5, #4
 8003dc2:	5173      	str	r3, [r6, r5]
 8003dc4:	e7c3      	b.n	8003d4e <HAL_CAN_AddTxMessage+0x4a>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003dc6:	6803      	ldr	r3, [r0, #0]
 8003dc8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8003dcc:	6859      	ldr	r1, [r3, #4]
 8003dce:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003dd2:	6059      	str	r1, [r3, #4]
 8003dd4:	e7c5      	b.n	8003d62 <HAL_CAN_AddTxMessage+0x5e>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003dd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ddc:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 8003dde:	2001      	movs	r0, #1
 8003de0:	e004      	b.n	8003dec <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003de2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003de8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003dea:	2001      	movs	r0, #1
  }
}
 8003dec:	bc70      	pop	{r4, r5, r6}
 8003dee:	4770      	bx	lr

08003df0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003df0:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d901      	bls.n	8003e00 <HAL_CAN_GetTxMailboxesFreeLevel+0x10>
  uint32_t freelevel = 0U;
 8003dfc:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8003dfe:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003e00:	6803      	ldr	r3, [r0, #0]
 8003e02:	6898      	ldr	r0, [r3, #8]
 8003e04:	f010 6080 	ands.w	r0, r0, #67108864	; 0x4000000
 8003e08:	d000      	beq.n	8003e0c <HAL_CAN_GetTxMailboxesFreeLevel+0x1c>
      freelevel++;
 8003e0a:	2001      	movs	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 8003e12:	d000      	beq.n	8003e16 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
      freelevel++;
 8003e14:	3001      	adds	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003e1c:	d0ef      	beq.n	8003dfe <HAL_CAN_GetTxMailboxesFreeLevel+0xe>
      freelevel++;
 8003e1e:	3001      	adds	r0, #1
 8003e20:	4770      	bx	lr

08003e22 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003e22:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e24:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e28:	3c01      	subs	r4, #1
 8003e2a:	b2e4      	uxtb	r4, r4
 8003e2c:	2c01      	cmp	r4, #1
 8003e2e:	f200 8091 	bhi.w	8003f54 <HAL_CAN_GetRxMessage+0x132>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e32:	b951      	cbnz	r1, 8003e4a <HAL_CAN_GetRxMessage+0x28>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003e34:	6804      	ldr	r4, [r0, #0]
 8003e36:	68e4      	ldr	r4, [r4, #12]
 8003e38:	f014 0f03 	tst.w	r4, #3
 8003e3c:	d110      	bne.n	8003e60 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e44:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8003e46:	2001      	movs	r0, #1
 8003e48:	e089      	b.n	8003f5e <HAL_CAN_GetRxMessage+0x13c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003e4a:	6804      	ldr	r4, [r0, #0]
 8003e4c:	6924      	ldr	r4, [r4, #16]
 8003e4e:	f014 0f03 	tst.w	r4, #3
 8003e52:	d105      	bne.n	8003e60 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e5a:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	e07e      	b.n	8003f5e <HAL_CAN_GetRxMessage+0x13c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003e60:	6805      	ldr	r5, [r0, #0]
 8003e62:	f101 041b 	add.w	r4, r1, #27
 8003e66:	0124      	lsls	r4, r4, #4
 8003e68:	592c      	ldr	r4, [r5, r4]
 8003e6a:	f004 0404 	and.w	r4, r4, #4
 8003e6e:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003e70:	2c00      	cmp	r4, #0
 8003e72:	d161      	bne.n	8003f38 <HAL_CAN_GetRxMessage+0x116>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003e74:	6805      	ldr	r5, [r0, #0]
 8003e76:	f101 041b 	add.w	r4, r1, #27
 8003e7a:	0124      	lsls	r4, r4, #4
 8003e7c:	592c      	ldr	r4, [r5, r4]
 8003e7e:	0d64      	lsrs	r4, r4, #21
 8003e80:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003e82:	6805      	ldr	r5, [r0, #0]
 8003e84:	f101 041b 	add.w	r4, r1, #27
 8003e88:	0124      	lsls	r4, r4, #4
 8003e8a:	592d      	ldr	r5, [r5, r4]
 8003e8c:	f005 0502 	and.w	r5, r5, #2
 8003e90:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003e92:	6805      	ldr	r5, [r0, #0]
 8003e94:	4425      	add	r5, r4
 8003e96:	686d      	ldr	r5, [r5, #4]
 8003e98:	f005 050f 	and.w	r5, r5, #15
 8003e9c:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003e9e:	6805      	ldr	r5, [r0, #0]
 8003ea0:	4425      	add	r5, r4
 8003ea2:	686d      	ldr	r5, [r5, #4]
 8003ea4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8003ea8:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003eaa:	6805      	ldr	r5, [r0, #0]
 8003eac:	442c      	add	r4, r5
 8003eae:	6864      	ldr	r4, [r4, #4]
 8003eb0:	0c24      	lsrs	r4, r4, #16
 8003eb2:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003eb4:	6802      	ldr	r2, [r0, #0]
 8003eb6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003eba:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003ebe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003ec0:	6802      	ldr	r2, [r0, #0]
 8003ec2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003ec6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003eca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ece:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003ed0:	6802      	ldr	r2, [r0, #0]
 8003ed2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003ed6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003eda:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8003ede:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003ee0:	6802      	ldr	r2, [r0, #0]
 8003ee2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003ee6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003eea:	0e12      	lsrs	r2, r2, #24
 8003eec:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003eee:	6802      	ldr	r2, [r0, #0]
 8003ef0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003ef4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003ef8:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003efa:	6802      	ldr	r2, [r0, #0]
 8003efc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003f00:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003f04:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f08:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003f0a:	6802      	ldr	r2, [r0, #0]
 8003f0c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003f10:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003f14:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8003f18:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003f1a:	6802      	ldr	r2, [r0, #0]
 8003f1c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003f20:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003f24:	0e12      	lsrs	r2, r2, #24
 8003f26:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f28:	b971      	cbnz	r1, 8003f48 <HAL_CAN_GetRxMessage+0x126>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003f2a:	6802      	ldr	r2, [r0, #0]
 8003f2c:	68d3      	ldr	r3, [r2, #12]
 8003f2e:	f043 0320 	orr.w	r3, r3, #32
 8003f32:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8003f34:	2000      	movs	r0, #0
 8003f36:	e012      	b.n	8003f5e <HAL_CAN_GetRxMessage+0x13c>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003f38:	6805      	ldr	r5, [r0, #0]
 8003f3a:	f101 041b 	add.w	r4, r1, #27
 8003f3e:	0124      	lsls	r4, r4, #4
 8003f40:	592c      	ldr	r4, [r5, r4]
 8003f42:	08e4      	lsrs	r4, r4, #3
 8003f44:	6054      	str	r4, [r2, #4]
 8003f46:	e79c      	b.n	8003e82 <HAL_CAN_GetRxMessage+0x60>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003f48:	6802      	ldr	r2, [r0, #0]
 8003f4a:	6913      	ldr	r3, [r2, #16]
 8003f4c:	f043 0320 	orr.w	r3, r3, #32
 8003f50:	6113      	str	r3, [r2, #16]
 8003f52:	e7ef      	b.n	8003f34 <HAL_CAN_GetRxMessage+0x112>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f5a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003f5c:	2001      	movs	r0, #1
  }
}
 8003f5e:	bc30      	pop	{r4, r5}
 8003f60:	4770      	bx	lr

08003f62 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f62:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d901      	bls.n	8003f72 <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 8003f6e:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 8003f70:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0)
 8003f72:	b921      	cbnz	r1, 8003f7e <HAL_CAN_GetRxFifoFillLevel+0x1c>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003f74:	6803      	ldr	r3, [r0, #0]
 8003f76:	68d8      	ldr	r0, [r3, #12]
 8003f78:	f000 0003 	and.w	r0, r0, #3
 8003f7c:	4770      	bx	lr
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003f7e:	6803      	ldr	r3, [r0, #0]
 8003f80:	6918      	ldr	r0, [r3, #16]
 8003f82:	f000 0003 	and.w	r0, r0, #3
 8003f86:	4770      	bx	lr

08003f88 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f88:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d905      	bls.n	8003fa0 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f9a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003f9c:	2001      	movs	r0, #1
  }
}
 8003f9e:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003fa0:	6802      	ldr	r2, [r0, #0]
 8003fa2:	6953      	ldr	r3, [r2, #20]
 8003fa4:	4319      	orrs	r1, r3
 8003fa6:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8003fa8:	2000      	movs	r0, #0
 8003faa:	4770      	bx	lr

08003fac <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003fac:	4770      	bx	lr

08003fae <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003fb8:	4770      	bx	lr

08003fba <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003fba:	4770      	bx	lr

08003fbc <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003fbc:	4770      	bx	lr

08003fbe <HAL_CAN_IRQHandler>:
{
 8003fbe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc2:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003fc4:	6803      	ldr	r3, [r0, #0]
 8003fc6:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003fc8:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003fcc:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003fce:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003fd2:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003fd6:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003fda:	f014 0601 	ands.w	r6, r4, #1
 8003fde:	d03b      	beq.n	8004058 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003fe0:	f017 0601 	ands.w	r6, r7, #1
 8003fe4:	d016      	beq.n	8004014 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003fea:	f017 0f02 	tst.w	r7, #2
 8003fee:	d108      	bne.n	8004002 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003ff0:	f017 0f04 	tst.w	r7, #4
 8003ff4:	d10c      	bne.n	8004010 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003ff6:	f017 0608 	ands.w	r6, r7, #8
 8003ffa:	d006      	beq.n	800400a <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003ffc:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8004000:	e008      	b.n	8004014 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004002:	f7fe f8f5 	bl	80021f0 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004006:	2600      	movs	r6, #0
 8004008:	e004      	b.n	8004014 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800400a:	f7ff ffcf 	bl	8003fac <HAL_CAN_TxMailbox0AbortCallback>
 800400e:	e001      	b.n	8004014 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004010:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004014:	f417 7f80 	tst.w	r7, #256	; 0x100
 8004018:	d00d      	beq.n	8004036 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800401a:	682b      	ldr	r3, [r5, #0]
 800401c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004020:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004022:	f417 7f00 	tst.w	r7, #512	; 0x200
 8004026:	f040 8086 	bne.w	8004136 <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800402a:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800402e:	f000 8086 	beq.w	800413e <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004032:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004036:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800403a:	d00d      	beq.n	8004058 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004042:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004044:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004048:	f040 8083 	bne.w	8004152 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800404c:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 8004050:	f000 8083 	beq.w	800415a <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004054:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004058:	f014 0f08 	tst.w	r4, #8
 800405c:	d007      	beq.n	800406e <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800405e:	f01b 0f10 	tst.w	fp, #16
 8004062:	d004      	beq.n	800406e <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004064:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	2210      	movs	r2, #16
 800406c:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800406e:	f014 0f04 	tst.w	r4, #4
 8004072:	d002      	beq.n	800407a <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004074:	f01b 0f08 	tst.w	fp, #8
 8004078:	d179      	bne.n	800416e <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800407a:	f014 0f02 	tst.w	r4, #2
 800407e:	d004      	beq.n	800408a <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f013 0f03 	tst.w	r3, #3
 8004088:	d178      	bne.n	800417c <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800408a:	f014 0f40 	tst.w	r4, #64	; 0x40
 800408e:	d007      	beq.n	80040a0 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004090:	f01a 0f10 	tst.w	sl, #16
 8004094:	d004      	beq.n	80040a0 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004096:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800409a:	682b      	ldr	r3, [r5, #0]
 800409c:	2210      	movs	r2, #16
 800409e:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80040a0:	f014 0f20 	tst.w	r4, #32
 80040a4:	d002      	beq.n	80040ac <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80040a6:	f01a 0f08 	tst.w	sl, #8
 80040aa:	d16b      	bne.n	8004184 <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80040ac:	f014 0f10 	tst.w	r4, #16
 80040b0:	d004      	beq.n	80040bc <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80040b2:	682b      	ldr	r3, [r5, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f013 0f03 	tst.w	r3, #3
 80040ba:	d16a      	bne.n	8004192 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80040bc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80040c0:	d002      	beq.n	80040c8 <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80040c2:	f018 0f10 	tst.w	r8, #16
 80040c6:	d168      	bne.n	800419a <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80040c8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80040cc:	d002      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80040ce:	f018 0f08 	tst.w	r8, #8
 80040d2:	d169      	bne.n	80041a8 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80040d4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80040d8:	d07a      	beq.n	80041d0 <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80040da:	f018 0f04 	tst.w	r8, #4
 80040de:	d074      	beq.n	80041ca <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80040e0:	f414 7f80 	tst.w	r4, #256	; 0x100
 80040e4:	d004      	beq.n	80040f0 <HAL_CAN_IRQHandler+0x132>
 80040e6:	f019 0f01 	tst.w	r9, #1
 80040ea:	d001      	beq.n	80040f0 <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 80040ec:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80040f0:	f414 7f00 	tst.w	r4, #512	; 0x200
 80040f4:	d004      	beq.n	8004100 <HAL_CAN_IRQHandler+0x142>
 80040f6:	f019 0f02 	tst.w	r9, #2
 80040fa:	d001      	beq.n	8004100 <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 80040fc:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004100:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8004104:	d004      	beq.n	8004110 <HAL_CAN_IRQHandler+0x152>
 8004106:	f019 0f04 	tst.w	r9, #4
 800410a:	d001      	beq.n	8004110 <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 800410c:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004110:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8004114:	d059      	beq.n	80041ca <HAL_CAN_IRQHandler+0x20c>
 8004116:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 800411a:	d056      	beq.n	80041ca <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 800411c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8004120:	d065      	beq.n	80041ee <HAL_CAN_IRQHandler+0x230>
 8004122:	d858      	bhi.n	80041d6 <HAL_CAN_IRQHandler+0x218>
 8004124:	f1b9 0f20 	cmp.w	r9, #32
 8004128:	d05e      	beq.n	80041e8 <HAL_CAN_IRQHandler+0x22a>
 800412a:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 800412e:	d142      	bne.n	80041b6 <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004130:	f046 0620 	orr.w	r6, r6, #32
            break;
 8004134:	e044      	b.n	80041c0 <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004136:	4628      	mov	r0, r5
 8004138:	f7fe f862 	bl	8002200 <HAL_CAN_TxMailbox1CompleteCallback>
 800413c:	e77b      	b.n	8004036 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800413e:	f417 6f00 	tst.w	r7, #2048	; 0x800
 8004142:	d002      	beq.n	800414a <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004144:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8004148:	e775      	b.n	8004036 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800414a:	4628      	mov	r0, r5
 800414c:	f7ff ff2f 	bl	8003fae <HAL_CAN_TxMailbox1AbortCallback>
 8004150:	e771      	b.n	8004036 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004152:	4628      	mov	r0, r5
 8004154:	f7fe f85c 	bl	8002210 <HAL_CAN_TxMailbox2CompleteCallback>
 8004158:	e77e      	b.n	8004058 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800415a:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 800415e:	d002      	beq.n	8004166 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004160:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8004164:	e778      	b.n	8004058 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004166:	4628      	mov	r0, r5
 8004168:	f7ff ff22 	bl	8003fb0 <HAL_CAN_TxMailbox2AbortCallback>
 800416c:	e774      	b.n	8004058 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800416e:	682b      	ldr	r3, [r5, #0]
 8004170:	2208      	movs	r2, #8
 8004172:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004174:	4628      	mov	r0, r5
 8004176:	f7ff ff1c 	bl	8003fb2 <HAL_CAN_RxFifo0FullCallback>
 800417a:	e77e      	b.n	800407a <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800417c:	4628      	mov	r0, r5
 800417e:	f7fe f84f 	bl	8002220 <HAL_CAN_RxFifo0MsgPendingCallback>
 8004182:	e782      	b.n	800408a <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	2208      	movs	r2, #8
 8004188:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800418a:	4628      	mov	r0, r5
 800418c:	f7ff ff13 	bl	8003fb6 <HAL_CAN_RxFifo1FullCallback>
 8004190:	e78c      	b.n	80040ac <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004192:	4628      	mov	r0, r5
 8004194:	f7ff ff0e 	bl	8003fb4 <HAL_CAN_RxFifo1MsgPendingCallback>
 8004198:	e790      	b.n	80040bc <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800419a:	682b      	ldr	r3, [r5, #0]
 800419c:	2210      	movs	r2, #16
 800419e:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80041a0:	4628      	mov	r0, r5
 80041a2:	f7ff ff09 	bl	8003fb8 <HAL_CAN_SleepCallback>
 80041a6:	e78f      	b.n	80040c8 <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	2208      	movs	r2, #8
 80041ac:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80041ae:	4628      	mov	r0, r5
 80041b0:	f7ff ff03 	bl	8003fba <HAL_CAN_WakeUpFromRxMsgCallback>
 80041b4:	e78e      	b.n	80040d4 <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 80041b6:	f1b9 0f10 	cmp.w	r9, #16
 80041ba:	d101      	bne.n	80041c0 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 80041bc:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80041c0:	682a      	ldr	r2, [r5, #0]
 80041c2:	6993      	ldr	r3, [r2, #24]
 80041c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c8:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80041ca:	682b      	ldr	r3, [r5, #0]
 80041cc:	2204      	movs	r2, #4
 80041ce:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80041d0:	b99e      	cbnz	r6, 80041fa <HAL_CAN_IRQHandler+0x23c>
}
 80041d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 80041d6:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 80041da:	d00b      	beq.n	80041f4 <HAL_CAN_IRQHandler+0x236>
 80041dc:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 80041e0:	d1ee      	bne.n	80041c0 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 80041e2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 80041e6:	e7eb      	b.n	80041c0 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 80041e8:	f046 0610 	orr.w	r6, r6, #16
            break;
 80041ec:	e7e8      	b.n	80041c0 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 80041ee:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80041f2:	e7e5      	b.n	80041c0 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 80041f4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 80041f8:	e7e2      	b.n	80041c0 <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 80041fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80041fc:	431e      	orrs	r6, r3
 80041fe:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8004200:	4628      	mov	r0, r5
 8004202:	f7ff fedb 	bl	8003fbc <HAL_CAN_ErrorCallback>
}
 8004206:	e7e4      	b.n	80041d2 <HAL_CAN_IRQHandler+0x214>

08004208 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004208:	4a07      	ldr	r2, [pc, #28]	; (8004228 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800420a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800420c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004214:	0200      	lsls	r0, r0, #8
 8004216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800421a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800421c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004224:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004226:	4770      	bx	lr
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800422c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800422e:	4b17      	ldr	r3, [pc, #92]	; (800428c <HAL_NVIC_SetPriority+0x60>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004236:	f1c3 0407 	rsb	r4, r3, #7
 800423a:	2c04      	cmp	r4, #4
 800423c:	bf28      	it	cs
 800423e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004240:	1d1d      	adds	r5, r3, #4
 8004242:	2d06      	cmp	r5, #6
 8004244:	d918      	bls.n	8004278 <HAL_NVIC_SetPriority+0x4c>
 8004246:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004248:	f04f 35ff 	mov.w	r5, #4294967295
 800424c:	fa05 f404 	lsl.w	r4, r5, r4
 8004250:	ea21 0104 	bic.w	r1, r1, r4
 8004254:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004256:	fa05 f303 	lsl.w	r3, r5, r3
 800425a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800425e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004260:	2800      	cmp	r0, #0
 8004262:	db0b      	blt.n	800427c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004264:	0109      	lsls	r1, r1, #4
 8004266:	b2c9      	uxtb	r1, r1
 8004268:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800426c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004270:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004274:	bc30      	pop	{r4, r5}
 8004276:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004278:	2300      	movs	r3, #0
 800427a:	e7e5      	b.n	8004248 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427c:	f000 000f 	and.w	r0, r0, #15
 8004280:	0109      	lsls	r1, r1, #4
 8004282:	b2c9      	uxtb	r1, r1
 8004284:	4b02      	ldr	r3, [pc, #8]	; (8004290 <HAL_NVIC_SetPriority+0x64>)
 8004286:	5419      	strb	r1, [r3, r0]
 8004288:	e7f4      	b.n	8004274 <HAL_NVIC_SetPriority+0x48>
 800428a:	bf00      	nop
 800428c:	e000ed00 	.word	0xe000ed00
 8004290:	e000ed14 	.word	0xe000ed14

08004294 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004294:	2800      	cmp	r0, #0
 8004296:	db07      	blt.n	80042a8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004298:	f000 021f 	and.w	r2, r0, #31
 800429c:	0940      	lsrs	r0, r0, #5
 800429e:	2301      	movs	r3, #1
 80042a0:	4093      	lsls	r3, r2
 80042a2:	4a02      	ldr	r2, [pc, #8]	; (80042ac <HAL_NVIC_EnableIRQ+0x18>)
 80042a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	e000e100 	.word	0xe000e100

080042b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042b0:	3801      	subs	r0, #1
 80042b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80042b6:	d20a      	bcs.n	80042ce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_SYSTICK_Config+0x24>)
 80042ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042bc:	4a06      	ldr	r2, [pc, #24]	; (80042d8 <HAL_SYSTICK_Config+0x28>)
 80042be:	21f0      	movs	r1, #240	; 0xf0
 80042c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042c4:	2000      	movs	r0, #0
 80042c6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042c8:	2207      	movs	r2, #7
 80042ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80042ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	e000e010 	.word	0xe000e010
 80042d8:	e000ed00 	.word	0xe000ed00

080042dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042e0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 80042e2:	f7ff fb89 	bl	80039f8 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042e6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d006      	beq.n	80042fe <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f4:	2300      	movs	r3, #0
 80042f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 80042fa:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 80042fc:	bd70      	pop	{r4, r5, r6, pc}
 80042fe:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004300:	6822      	ldr	r2, [r4, #0]
 8004302:	6813      	ldr	r3, [r2, #0]
 8004304:	f023 0316 	bic.w	r3, r3, #22
 8004308:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	6953      	ldr	r3, [r2, #20]
 800430e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004312:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004314:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004316:	b1e3      	cbz	r3, 8004352 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004318:	6822      	ldr	r2, [r4, #0]
 800431a:	6813      	ldr	r3, [r2, #0]
 800431c:	f023 0308 	bic.w	r3, r3, #8
 8004320:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	6813      	ldr	r3, [r2, #0]
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f013 0f01 	tst.w	r3, #1
 8004334:	d011      	beq.n	800435a <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004336:	f7ff fb5f 	bl	80039f8 <HAL_GetTick>
 800433a:	1b43      	subs	r3, r0, r5
 800433c:	2b05      	cmp	r3, #5
 800433e:	d9f5      	bls.n	800432c <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004340:	2320      	movs	r3, #32
 8004342:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004344:	2003      	movs	r0, #3
 8004346:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800434a:	2300      	movs	r3, #0
 800434c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004350:	e7d4      	b.n	80042fc <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004352:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1df      	bne.n	8004318 <HAL_DMA_Abort+0x3c>
 8004358:	e7e3      	b.n	8004322 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800435a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800435c:	233f      	movs	r3, #63	; 0x3f
 800435e:	4093      	lsls	r3, r2
 8004360:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004362:	2301      	movs	r3, #1
 8004364:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004368:	2000      	movs	r0, #0
 800436a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 800436e:	e7c5      	b.n	80042fc <HAL_DMA_Abort+0x20>

08004370 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004370:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d003      	beq.n	8004382 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800437e:	2001      	movs	r0, #1
 8004380:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004382:	2305      	movs	r3, #5
 8004384:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004388:	6802      	ldr	r2, [r0, #0]
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004392:	2000      	movs	r0, #0
}
 8004394:	4770      	bx	lr
	...

08004398 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004398:	2300      	movs	r3, #0
 800439a:	2b0f      	cmp	r3, #15
 800439c:	f200 80d7 	bhi.w	800454e <HAL_GPIO_Init+0x1b6>
{
 80043a0:	b4f0      	push	{r4, r5, r6, r7}
 80043a2:	b082      	sub	sp, #8
 80043a4:	e05d      	b.n	8004462 <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043a6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043a8:	005f      	lsls	r7, r3, #1
 80043aa:	2403      	movs	r4, #3
 80043ac:	40bc      	lsls	r4, r7
 80043ae:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043b2:	68cc      	ldr	r4, [r1, #12]
 80043b4:	40bc      	lsls	r4, r7
 80043b6:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80043b8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ba:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043bc:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043c0:	684c      	ldr	r4, [r1, #4]
 80043c2:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80043c6:	409a      	lsls	r2, r3
 80043c8:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80043ca:	6042      	str	r2, [r0, #4]
 80043cc:	e057      	b.n	800447e <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043ce:	08dc      	lsrs	r4, r3, #3
 80043d0:	3408      	adds	r4, #8
 80043d2:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043d6:	f003 0207 	and.w	r2, r3, #7
 80043da:	0096      	lsls	r6, r2, #2
 80043dc:	220f      	movs	r2, #15
 80043de:	40b2      	lsls	r2, r6
 80043e0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043e4:	690a      	ldr	r2, [r1, #16]
 80043e6:	40b2      	lsls	r2, r6
 80043e8:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 80043ea:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80043ee:	e05a      	b.n	80044a6 <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043f0:	2206      	movs	r2, #6
 80043f2:	e000      	b.n	80043f6 <HAL_GPIO_Init+0x5e>
 80043f4:	2200      	movs	r2, #0
 80043f6:	40b2      	lsls	r2, r6
 80043f8:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043fa:	3402      	adds	r4, #2
 80043fc:	4e54      	ldr	r6, [pc, #336]	; (8004550 <HAL_GPIO_Init+0x1b8>)
 80043fe:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004402:	4a54      	ldr	r2, [pc, #336]	; (8004554 <HAL_GPIO_Init+0x1bc>)
 8004404:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004406:	43ea      	mvns	r2, r5
 8004408:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800440c:	684f      	ldr	r7, [r1, #4]
 800440e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8004412:	d001      	beq.n	8004418 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8004414:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8004418:	4c4e      	ldr	r4, [pc, #312]	; (8004554 <HAL_GPIO_Init+0x1bc>)
 800441a:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800441c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800441e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004422:	684f      	ldr	r7, [r1, #4]
 8004424:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004428:	d001      	beq.n	800442e <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 800442a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800442e:	4c49      	ldr	r4, [pc, #292]	; (8004554 <HAL_GPIO_Init+0x1bc>)
 8004430:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004432:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8004434:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004438:	684f      	ldr	r7, [r1, #4]
 800443a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800443e:	d001      	beq.n	8004444 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8004440:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8004444:	4c43      	ldr	r4, [pc, #268]	; (8004554 <HAL_GPIO_Init+0x1bc>)
 8004446:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8004448:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800444a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800444c:	684e      	ldr	r6, [r1, #4]
 800444e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8004452:	d001      	beq.n	8004458 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8004454:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8004458:	4c3e      	ldr	r4, [pc, #248]	; (8004554 <HAL_GPIO_Init+0x1bc>)
 800445a:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800445c:	3301      	adds	r3, #1
 800445e:	2b0f      	cmp	r3, #15
 8004460:	d872      	bhi.n	8004548 <HAL_GPIO_Init+0x1b0>
    ioposition = 0x01U << position;
 8004462:	2201      	movs	r2, #1
 8004464:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004466:	680c      	ldr	r4, [r1, #0]
 8004468:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 800446c:	ea32 0404 	bics.w	r4, r2, r4
 8004470:	d1f4      	bne.n	800445c <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004472:	684c      	ldr	r4, [r1, #4]
 8004474:	f004 0403 	and.w	r4, r4, #3
 8004478:	3c01      	subs	r4, #1
 800447a:	2c01      	cmp	r4, #1
 800447c:	d993      	bls.n	80043a6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800447e:	684a      	ldr	r2, [r1, #4]
 8004480:	f002 0203 	and.w	r2, r2, #3
 8004484:	2a03      	cmp	r2, #3
 8004486:	d009      	beq.n	800449c <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8004488:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800448a:	005e      	lsls	r6, r3, #1
 800448c:	2203      	movs	r2, #3
 800448e:	40b2      	lsls	r2, r6
 8004490:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004494:	688a      	ldr	r2, [r1, #8]
 8004496:	40b2      	lsls	r2, r6
 8004498:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800449a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800449c:	684a      	ldr	r2, [r1, #4]
 800449e:	f002 0203 	and.w	r2, r2, #3
 80044a2:	2a02      	cmp	r2, #2
 80044a4:	d093      	beq.n	80043ce <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80044a6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044a8:	005e      	lsls	r6, r3, #1
 80044aa:	2203      	movs	r2, #3
 80044ac:	40b2      	lsls	r2, r6
 80044ae:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044b2:	684a      	ldr	r2, [r1, #4]
 80044b4:	f002 0203 	and.w	r2, r2, #3
 80044b8:	40b2      	lsls	r2, r6
 80044ba:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80044bc:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044be:	684a      	ldr	r2, [r1, #4]
 80044c0:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80044c4:	d0ca      	beq.n	800445c <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c6:	2200      	movs	r2, #0
 80044c8:	9201      	str	r2, [sp, #4]
 80044ca:	4a23      	ldr	r2, [pc, #140]	; (8004558 <HAL_GPIO_Init+0x1c0>)
 80044cc:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80044ce:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80044d2:	6454      	str	r4, [r2, #68]	; 0x44
 80044d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80044da:	9201      	str	r2, [sp, #4]
 80044dc:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80044de:	089c      	lsrs	r4, r3, #2
 80044e0:	1ca6      	adds	r6, r4, #2
 80044e2:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <HAL_GPIO_Init+0x1b8>)
 80044e4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044e8:	f003 0203 	and.w	r2, r3, #3
 80044ec:	0096      	lsls	r6, r2, #2
 80044ee:	220f      	movs	r2, #15
 80044f0:	40b2      	lsls	r2, r6
 80044f2:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044f6:	4a19      	ldr	r2, [pc, #100]	; (800455c <HAL_GPIO_Init+0x1c4>)
 80044f8:	4290      	cmp	r0, r2
 80044fa:	f43f af7b 	beq.w	80043f4 <HAL_GPIO_Init+0x5c>
 80044fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004502:	4290      	cmp	r0, r2
 8004504:	d016      	beq.n	8004534 <HAL_GPIO_Init+0x19c>
 8004506:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800450a:	4290      	cmp	r0, r2
 800450c:	d014      	beq.n	8004538 <HAL_GPIO_Init+0x1a0>
 800450e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004512:	4290      	cmp	r0, r2
 8004514:	d012      	beq.n	800453c <HAL_GPIO_Init+0x1a4>
 8004516:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800451a:	4290      	cmp	r0, r2
 800451c:	d010      	beq.n	8004540 <HAL_GPIO_Init+0x1a8>
 800451e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004522:	4290      	cmp	r0, r2
 8004524:	d00e      	beq.n	8004544 <HAL_GPIO_Init+0x1ac>
 8004526:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800452a:	4290      	cmp	r0, r2
 800452c:	f43f af60 	beq.w	80043f0 <HAL_GPIO_Init+0x58>
 8004530:	2207      	movs	r2, #7
 8004532:	e760      	b.n	80043f6 <HAL_GPIO_Init+0x5e>
 8004534:	2201      	movs	r2, #1
 8004536:	e75e      	b.n	80043f6 <HAL_GPIO_Init+0x5e>
 8004538:	2202      	movs	r2, #2
 800453a:	e75c      	b.n	80043f6 <HAL_GPIO_Init+0x5e>
 800453c:	2203      	movs	r2, #3
 800453e:	e75a      	b.n	80043f6 <HAL_GPIO_Init+0x5e>
 8004540:	2204      	movs	r2, #4
 8004542:	e758      	b.n	80043f6 <HAL_GPIO_Init+0x5e>
 8004544:	2205      	movs	r2, #5
 8004546:	e756      	b.n	80043f6 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8004548:	b002      	add	sp, #8
 800454a:	bcf0      	pop	{r4, r5, r6, r7}
 800454c:	4770      	bx	lr
 800454e:	4770      	bx	lr
 8004550:	40013800 	.word	0x40013800
 8004554:	40013c00 	.word	0x40013c00
 8004558:	40023800 	.word	0x40023800
 800455c:	40020000 	.word	0x40020000

08004560 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004560:	b10a      	cbz	r2, 8004566 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004562:	6181      	str	r1, [r0, #24]
 8004564:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004566:	0409      	lsls	r1, r1, #16
 8004568:	6181      	str	r1, [r0, #24]
  }
}
 800456a:	4770      	bx	lr

0800456c <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800456c:	2800      	cmp	r0, #0
 800456e:	f000 80cc 	beq.w	800470a <HAL_I2C_Init+0x19e>
{
 8004572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004574:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004576:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800457a:	2b00      	cmp	r3, #0
 800457c:	d077      	beq.n	800466e <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800457e:	2324      	movs	r3, #36	; 0x24
 8004580:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004584:	6822      	ldr	r2, [r4, #0]
 8004586:	6813      	ldr	r3, [r2, #0]
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800458e:	6822      	ldr	r2, [r4, #0]
 8004590:	6813      	ldr	r3, [r2, #0]
 8004592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004596:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004598:	6822      	ldr	r2, [r4, #0]
 800459a:	6813      	ldr	r3, [r2, #0]
 800459c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045a0:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045a2:	f000 f977 	bl	8004894 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	4b5a      	ldr	r3, [pc, #360]	; (8004714 <HAL_I2C_Init+0x1a8>)
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d864      	bhi.n	8004678 <HAL_I2C_Init+0x10c>
 80045ae:	4b5a      	ldr	r3, [pc, #360]	; (8004718 <HAL_I2C_Init+0x1ac>)
 80045b0:	4298      	cmp	r0, r3
 80045b2:	bf8c      	ite	hi
 80045b4:	2300      	movhi	r3, #0
 80045b6:	2301      	movls	r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f040 80a8 	bne.w	800470e <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045be:	4d57      	ldr	r5, [pc, #348]	; (800471c <HAL_I2C_Init+0x1b0>)
 80045c0:	fba5 3500 	umull	r3, r5, r5, r0
 80045c4:	0caf      	lsrs	r7, r5, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045c6:	6826      	ldr	r6, [r4, #0]
 80045c8:	6871      	ldr	r1, [r6, #4]
 80045ca:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80045ce:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80045d2:	6071      	str	r1, [r6, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045d4:	6821      	ldr	r1, [r4, #0]
 80045d6:	6a0b      	ldr	r3, [r1, #32]
 80045d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045dc:	6865      	ldr	r5, [r4, #4]
 80045de:	4a4d      	ldr	r2, [pc, #308]	; (8004714 <HAL_I2C_Init+0x1a8>)
 80045e0:	4295      	cmp	r5, r2
 80045e2:	d84f      	bhi.n	8004684 <HAL_I2C_Init+0x118>
 80045e4:	1c7a      	adds	r2, r7, #1
 80045e6:	4313      	orrs	r3, r2
 80045e8:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045ea:	6825      	ldr	r5, [r4, #0]
 80045ec:	69e9      	ldr	r1, [r5, #28]
 80045ee:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80045f2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80045f6:	6863      	ldr	r3, [r4, #4]
 80045f8:	4a46      	ldr	r2, [pc, #280]	; (8004714 <HAL_I2C_Init+0x1a8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d84c      	bhi.n	8004698 <HAL_I2C_Init+0x12c>
 80045fe:	3801      	subs	r0, #1
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	fbb0 f0f3 	udiv	r0, r0, r3
 8004606:	3001      	adds	r0, #1
 8004608:	f640 73fc 	movw	r3, #4092	; 0xffc
 800460c:	4218      	tst	r0, r3
 800460e:	d078      	beq.n	8004702 <HAL_I2C_Init+0x196>
 8004610:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8004614:	430b      	orrs	r3, r1
 8004616:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004618:	6821      	ldr	r1, [r4, #0]
 800461a:	680b      	ldr	r3, [r1, #0]
 800461c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004620:	69e2      	ldr	r2, [r4, #28]
 8004622:	6a20      	ldr	r0, [r4, #32]
 8004624:	4302      	orrs	r2, r0
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800462a:	6821      	ldr	r1, [r4, #0]
 800462c:	688b      	ldr	r3, [r1, #8]
 800462e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004636:	6922      	ldr	r2, [r4, #16]
 8004638:	68e0      	ldr	r0, [r4, #12]
 800463a:	4302      	orrs	r2, r0
 800463c:	4313      	orrs	r3, r2
 800463e:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004640:	6821      	ldr	r1, [r4, #0]
 8004642:	68cb      	ldr	r3, [r1, #12]
 8004644:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004648:	6962      	ldr	r2, [r4, #20]
 800464a:	69a0      	ldr	r0, [r4, #24]
 800464c:	4302      	orrs	r2, r0
 800464e:	4313      	orrs	r3, r2
 8004650:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	6813      	ldr	r3, [r2, #0]
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465c:	2000      	movs	r0, #0
 800465e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004660:	2320      	movs	r3, #32
 8004662:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004666:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004668:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 800466c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800466e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004672:	f7fe ff07 	bl	8003484 <HAL_I2C_MspInit>
 8004676:	e782      	b.n	800457e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004678:	4b29      	ldr	r3, [pc, #164]	; (8004720 <HAL_I2C_Init+0x1b4>)
 800467a:	4298      	cmp	r0, r3
 800467c:	bf8c      	ite	hi
 800467e:	2300      	movhi	r3, #0
 8004680:	2301      	movls	r3, #1
 8004682:	e799      	b.n	80045b8 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004684:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004688:	fb02 f207 	mul.w	r2, r2, r7
 800468c:	4d25      	ldr	r5, [pc, #148]	; (8004724 <HAL_I2C_Init+0x1b8>)
 800468e:	fba5 5202 	umull	r5, r2, r5, r2
 8004692:	0992      	lsrs	r2, r2, #6
 8004694:	3201      	adds	r2, #1
 8004696:	e7a6      	b.n	80045e6 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004698:	68a2      	ldr	r2, [r4, #8]
 800469a:	b9ba      	cbnz	r2, 80046cc <HAL_I2C_Init+0x160>
 800469c:	1e46      	subs	r6, r0, #1
 800469e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80046a2:	fbb6 f6f7 	udiv	r6, r6, r7
 80046a6:	3601      	adds	r6, #1
 80046a8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80046ac:	fab6 f686 	clz	r6, r6
 80046b0:	0976      	lsrs	r6, r6, #5
 80046b2:	bb46      	cbnz	r6, 8004706 <HAL_I2C_Init+0x19a>
 80046b4:	b9c2      	cbnz	r2, 80046e8 <HAL_I2C_Init+0x17c>
 80046b6:	1e42      	subs	r2, r0, #1
 80046b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80046bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c0:	3201      	adds	r2, #1
 80046c2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80046c6:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80046ca:	e7a3      	b.n	8004614 <HAL_I2C_Init+0xa8>
 80046cc:	1e46      	subs	r6, r0, #1
 80046ce:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80046d2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80046d6:	fbb6 f6f7 	udiv	r6, r6, r7
 80046da:	3601      	adds	r6, #1
 80046dc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80046e0:	fab6 f686 	clz	r6, r6
 80046e4:	0976      	lsrs	r6, r6, #5
 80046e6:	e7e4      	b.n	80046b2 <HAL_I2C_Init+0x146>
 80046e8:	1e42      	subs	r2, r0, #1
 80046ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80046f6:	3201      	adds	r2, #1
 80046f8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80046fc:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8004700:	e788      	b.n	8004614 <HAL_I2C_Init+0xa8>
 8004702:	2304      	movs	r3, #4
 8004704:	e786      	b.n	8004614 <HAL_I2C_Init+0xa8>
 8004706:	2301      	movs	r3, #1
 8004708:	e784      	b.n	8004614 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800470a:	2001      	movs	r0, #1
}
 800470c:	4770      	bx	lr
    return HAL_ERROR;
 800470e:	2001      	movs	r0, #1
 8004710:	e7ac      	b.n	800466c <HAL_I2C_Init+0x100>
 8004712:	bf00      	nop
 8004714:	000186a0 	.word	0x000186a0
 8004718:	001e847f 	.word	0x001e847f
 800471c:	431bde83 	.word	0x431bde83
 8004720:	003d08ff 	.word	0x003d08ff
 8004724:	10624dd3 	.word	0x10624dd3

08004728 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004728:	2800      	cmp	r0, #0
 800472a:	f000 809b 	beq.w	8004864 <HAL_RCC_ClockConfig+0x13c>
{
 800472e:	b570      	push	{r4, r5, r6, lr}
 8004730:	460d      	mov	r5, r1
 8004732:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b4f      	ldr	r3, [pc, #316]	; (8004874 <HAL_RCC_ClockConfig+0x14c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	428b      	cmp	r3, r1
 800473e:	d208      	bcs.n	8004752 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004740:	b2cb      	uxtb	r3, r1
 8004742:	4a4c      	ldr	r2, [pc, #304]	; (8004874 <HAL_RCC_ClockConfig+0x14c>)
 8004744:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	6813      	ldr	r3, [r2, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	428b      	cmp	r3, r1
 800474e:	f040 808b 	bne.w	8004868 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	f013 0f02 	tst.w	r3, #2
 8004758:	d017      	beq.n	800478a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475a:	f013 0f04 	tst.w	r3, #4
 800475e:	d004      	beq.n	800476a <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004760:	4a45      	ldr	r2, [pc, #276]	; (8004878 <HAL_RCC_ClockConfig+0x150>)
 8004762:	6893      	ldr	r3, [r2, #8]
 8004764:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004768:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	f013 0f08 	tst.w	r3, #8
 8004770:	d004      	beq.n	800477c <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004772:	4a41      	ldr	r2, [pc, #260]	; (8004878 <HAL_RCC_ClockConfig+0x150>)
 8004774:	6893      	ldr	r3, [r2, #8]
 8004776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800477a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800477c:	4a3e      	ldr	r2, [pc, #248]	; (8004878 <HAL_RCC_ClockConfig+0x150>)
 800477e:	6893      	ldr	r3, [r2, #8]
 8004780:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004784:	68a1      	ldr	r1, [r4, #8]
 8004786:	430b      	orrs	r3, r1
 8004788:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	f013 0f01 	tst.w	r3, #1
 8004790:	d032      	beq.n	80047f8 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004792:	6863      	ldr	r3, [r4, #4]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d021      	beq.n	80047dc <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004798:	1e9a      	subs	r2, r3, #2
 800479a:	2a01      	cmp	r2, #1
 800479c:	d925      	bls.n	80047ea <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479e:	4a36      	ldr	r2, [pc, #216]	; (8004878 <HAL_RCC_ClockConfig+0x150>)
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	f012 0f02 	tst.w	r2, #2
 80047a6:	d061      	beq.n	800486c <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047a8:	4933      	ldr	r1, [pc, #204]	; (8004878 <HAL_RCC_ClockConfig+0x150>)
 80047aa:	688a      	ldr	r2, [r1, #8]
 80047ac:	f022 0203 	bic.w	r2, r2, #3
 80047b0:	4313      	orrs	r3, r2
 80047b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047b4:	f7ff f920 	bl	80039f8 <HAL_GetTick>
 80047b8:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ba:	4b2f      	ldr	r3, [pc, #188]	; (8004878 <HAL_RCC_ClockConfig+0x150>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	6862      	ldr	r2, [r4, #4]
 80047c4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80047c8:	d016      	beq.n	80047f8 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ca:	f7ff f915 	bl	80039f8 <HAL_GetTick>
 80047ce:	1b80      	subs	r0, r0, r6
 80047d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80047d4:	4298      	cmp	r0, r3
 80047d6:	d9f0      	bls.n	80047ba <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 80047d8:	2003      	movs	r0, #3
 80047da:	e042      	b.n	8004862 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047dc:	4a26      	ldr	r2, [pc, #152]	; (8004878 <HAL_RCC_ClockConfig+0x150>)
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80047e4:	d1e0      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80047e6:	2001      	movs	r0, #1
 80047e8:	e03b      	b.n	8004862 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ea:	4a23      	ldr	r2, [pc, #140]	; (8004878 <HAL_RCC_ClockConfig+0x150>)
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80047f2:	d1d9      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80047f4:	2001      	movs	r0, #1
 80047f6:	e034      	b.n	8004862 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047f8:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <HAL_RCC_ClockConfig+0x14c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	42ab      	cmp	r3, r5
 8004802:	d907      	bls.n	8004814 <HAL_RCC_ClockConfig+0xec>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004804:	b2ea      	uxtb	r2, r5
 8004806:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <HAL_RCC_ClockConfig+0x14c>)
 8004808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	42ab      	cmp	r3, r5
 8004812:	d12d      	bne.n	8004870 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	f013 0f04 	tst.w	r3, #4
 800481a:	d006      	beq.n	800482a <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800481c:	4a16      	ldr	r2, [pc, #88]	; (8004878 <HAL_RCC_ClockConfig+0x150>)
 800481e:	6893      	ldr	r3, [r2, #8]
 8004820:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004824:	68e1      	ldr	r1, [r4, #12]
 8004826:	430b      	orrs	r3, r1
 8004828:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	f013 0f08 	tst.w	r3, #8
 8004830:	d007      	beq.n	8004842 <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004832:	4a11      	ldr	r2, [pc, #68]	; (8004878 <HAL_RCC_ClockConfig+0x150>)
 8004834:	6893      	ldr	r3, [r2, #8]
 8004836:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800483a:	6921      	ldr	r1, [r4, #16]
 800483c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004840:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004842:	f000 f847 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <HAL_RCC_ClockConfig+0x150>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800484e:	4a0b      	ldr	r2, [pc, #44]	; (800487c <HAL_RCC_ClockConfig+0x154>)
 8004850:	5cd3      	ldrb	r3, [r2, r3]
 8004852:	40d8      	lsrs	r0, r3
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <HAL_RCC_ClockConfig+0x158>)
 8004856:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <HAL_RCC_ClockConfig+0x15c>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	f7ff f880 	bl	8003960 <HAL_InitTick>

  return HAL_OK;
 8004860:	2000      	movs	r0, #0
}
 8004862:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004864:	2001      	movs	r0, #1
}
 8004866:	4770      	bx	lr
      return HAL_ERROR;
 8004868:	2001      	movs	r0, #1
 800486a:	e7fa      	b.n	8004862 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800486c:	2001      	movs	r0, #1
 800486e:	e7f8      	b.n	8004862 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8004870:	2001      	movs	r0, #1
 8004872:	e7f6      	b.n	8004862 <HAL_RCC_ClockConfig+0x13a>
 8004874:	40023c00 	.word	0x40023c00
 8004878:	40023800 	.word	0x40023800
 800487c:	0800a3dc 	.word	0x0800a3dc
 8004880:	20000078 	.word	0x20000078
 8004884:	20000080 	.word	0x20000080

08004888 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004888:	4b01      	ldr	r3, [pc, #4]	; (8004890 <HAL_RCC_GetHCLKFreq+0x8>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000078 	.word	0x20000078

08004894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004894:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004896:	f7ff fff7 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 800489a:	4b04      	ldr	r3, [pc, #16]	; (80048ac <HAL_RCC_GetPCLK1Freq+0x18>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80048a2:	4a03      	ldr	r2, [pc, #12]	; (80048b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80048a4:	5cd3      	ldrb	r3, [r2, r3]
}
 80048a6:	40d8      	lsrs	r0, r3
 80048a8:	bd08      	pop	{r3, pc}
 80048aa:	bf00      	nop
 80048ac:	40023800 	.word	0x40023800
 80048b0:	0800a3ec 	.word	0x0800a3ec

080048b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048b6:	f7ff ffe7 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048ba:	4b04      	ldr	r3, [pc, #16]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80048c2:	4a03      	ldr	r2, [pc, #12]	; (80048d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80048c4:	5cd3      	ldrb	r3, [r2, r3]
}
 80048c6:	40d8      	lsrs	r0, r3
 80048c8:	bd08      	pop	{r3, pc}
 80048ca:	bf00      	nop
 80048cc:	40023800 	.word	0x40023800
 80048d0:	0800a3ec 	.word	0x0800a3ec

080048d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d8:	4b59      	ldr	r3, [pc, #356]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x16c>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 030c 	and.w	r3, r3, #12
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d008      	beq.n	80048f6 <HAL_RCC_GetSysClockFreq+0x22>
 80048e4:	2b0c      	cmp	r3, #12
 80048e6:	d05b      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0xcc>
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d002      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x1e>
 80048ec:	4855      	ldr	r0, [pc, #340]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x170>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80048ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      sysclockfreq = HSE_VALUE;
 80048f2:	4855      	ldr	r0, [pc, #340]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x174>)
 80048f4:	e7fb      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x1a>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f6:	4b52      	ldr	r3, [pc, #328]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x16c>)
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004904:	d02b      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x8a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004906:	4b4e      	ldr	r3, [pc, #312]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800490e:	0158      	lsls	r0, r3, #5
 8004910:	2100      	movs	r1, #0
 8004912:	1ac0      	subs	r0, r0, r3
 8004914:	f161 0100 	sbc.w	r1, r1, #0
 8004918:	018c      	lsls	r4, r1, #6
 800491a:	ea44 6490 	orr.w	r4, r4, r0, lsr #26
 800491e:	0185      	lsls	r5, r0, #6
 8004920:	ebb5 0800 	subs.w	r8, r5, r0
 8004924:	eb64 0901 	sbc.w	r9, r4, r1
 8004928:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800492c:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
 8004930:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 8004934:	18c0      	adds	r0, r0, r3
 8004936:	f141 0100 	adc.w	r1, r1, #0
 800493a:	024b      	lsls	r3, r1, #9
 800493c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8004940:	0244      	lsls	r4, r0, #9
 8004942:	4620      	mov	r0, r4
 8004944:	4619      	mov	r1, r3
 8004946:	2300      	movs	r3, #0
 8004948:	f7fb fcca 	bl	80002e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800494c:	4b3c      	ldr	r3, [pc, #240]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x16c>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004954:	3301      	adds	r3, #1
 8004956:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004958:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800495c:	e7c7      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495e:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004966:	0158      	lsls	r0, r3, #5
 8004968:	2100      	movs	r1, #0
 800496a:	1ac0      	subs	r0, r0, r3
 800496c:	f161 0100 	sbc.w	r1, r1, #0
 8004970:	018c      	lsls	r4, r1, #6
 8004972:	ea44 6490 	orr.w	r4, r4, r0, lsr #26
 8004976:	0185      	lsls	r5, r0, #6
 8004978:	1a2e      	subs	r6, r5, r0
 800497a:	eb64 0701 	sbc.w	r7, r4, r1
 800497e:	00f9      	lsls	r1, r7, #3
 8004980:	ea41 7156 	orr.w	r1, r1, r6, lsr #29
 8004984:	00f0      	lsls	r0, r6, #3
 8004986:	18c0      	adds	r0, r0, r3
 8004988:	f141 0100 	adc.w	r1, r1, #0
 800498c:	028b      	lsls	r3, r1, #10
 800498e:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004992:	0284      	lsls	r4, r0, #10
 8004994:	4620      	mov	r0, r4
 8004996:	4619      	mov	r1, r3
 8004998:	2300      	movs	r3, #0
 800499a:	f7fb fca1 	bl	80002e0 <__aeabi_uldivmod>
 800499e:	e7d5      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x78>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a0:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x16c>)
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80049ae:	d026      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0x12a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b0:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x16c>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80049b8:	0158      	lsls	r0, r3, #5
 80049ba:	2100      	movs	r1, #0
 80049bc:	1ac0      	subs	r0, r0, r3
 80049be:	f161 0100 	sbc.w	r1, r1, #0
 80049c2:	018e      	lsls	r6, r1, #6
 80049c4:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 80049c8:	0187      	lsls	r7, r0, #6
 80049ca:	1a3c      	subs	r4, r7, r0
 80049cc:	eb66 0501 	sbc.w	r5, r6, r1
 80049d0:	00e9      	lsls	r1, r5, #3
 80049d2:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 80049d6:	00e0      	lsls	r0, r4, #3
 80049d8:	18c0      	adds	r0, r0, r3
 80049da:	f141 0100 	adc.w	r1, r1, #0
 80049de:	024b      	lsls	r3, r1, #9
 80049e0:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80049e4:	0244      	lsls	r4, r0, #9
 80049e6:	4620      	mov	r0, r4
 80049e8:	4619      	mov	r1, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	f7fb fc78 	bl	80002e0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x16c>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 80049f8:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80049fc:	e777      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004a06:	015c      	lsls	r4, r3, #5
 8004a08:	2500      	movs	r5, #0
 8004a0a:	1ae4      	subs	r4, r4, r3
 8004a0c:	f165 0500 	sbc.w	r5, r5, #0
 8004a10:	01ae      	lsls	r6, r5, #6
 8004a12:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8004a16:	01a7      	lsls	r7, r4, #6
 8004a18:	1b38      	subs	r0, r7, r4
 8004a1a:	eb66 0105 	sbc.w	r1, r6, r5
 8004a1e:	00cc      	lsls	r4, r1, #3
 8004a20:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8004a24:	00c5      	lsls	r5, r0, #3
 8004a26:	18e8      	adds	r0, r5, r3
 8004a28:	f144 0100 	adc.w	r1, r4, #0
 8004a2c:	028b      	lsls	r3, r1, #10
 8004a2e:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004a32:	0284      	lsls	r4, r0, #10
 8004a34:	4620      	mov	r0, r4
 8004a36:	4619      	mov	r1, r3
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f7fb fc51 	bl	80002e0 <__aeabi_uldivmod>
 8004a3e:	e7d7      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x11c>
 8004a40:	40023800 	.word	0x40023800
 8004a44:	00f42400 	.word	0x00f42400
 8004a48:	007a1200 	.word	0x007a1200

08004a4c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	f000 8201 	beq.w	8004e54 <HAL_RCC_OscConfig+0x408>
{
 8004a52:	b570      	push	{r4, r5, r6, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a58:	6803      	ldr	r3, [r0, #0]
 8004a5a:	f013 0f01 	tst.w	r3, #1
 8004a5e:	d041      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a60:	4ba5      	ldr	r3, [pc, #660]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 030c 	and.w	r3, r3, #12
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d032      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x86>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a6c:	4ba2      	ldr	r3, [pc, #648]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d027      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a78:	4b9f      	ldr	r3, [pc, #636]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d059      	beq.n	8004b38 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a84:	6863      	ldr	r3, [r4, #4]
 8004a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8a:	d05b      	beq.n	8004b44 <HAL_RCC_OscConfig+0xf8>
 8004a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a90:	d05e      	beq.n	8004b50 <HAL_RCC_OscConfig+0x104>
 8004a92:	4b99      	ldr	r3, [pc, #612]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aa4:	6863      	ldr	r3, [r4, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d05c      	beq.n	8004b64 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aaa:	f7fe ffa5 	bl	80039f8 <HAL_GetTick>
 8004aae:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab0:	4b91      	ldr	r3, [pc, #580]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004ab8:	d114      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aba:	f7fe ff9d 	bl	80039f8 <HAL_GetTick>
 8004abe:	1b40      	subs	r0, r0, r5
 8004ac0:	2864      	cmp	r0, #100	; 0x64
 8004ac2:	d9f5      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8004ac4:	2003      	movs	r0, #3
 8004ac6:	e1cc      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ac8:	4b8b      	ldr	r3, [pc, #556]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004ad0:	d0d2      	beq.n	8004a78 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad2:	4b89      	ldr	r3, [pc, #548]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004ada:	d003      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x98>
 8004adc:	6863      	ldr	r3, [r4, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 81ba 	beq.w	8004e58 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	f013 0f02 	tst.w	r3, #2
 8004aea:	d060      	beq.n	8004bae <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004aec:	4b82      	ldr	r3, [pc, #520]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f013 0f0c 	tst.w	r3, #12
 8004af4:	d04a      	beq.n	8004b8c <HAL_RCC_OscConfig+0x140>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004af6:	4b80      	ldr	r3, [pc, #512]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d03f      	beq.n	8004b82 <HAL_RCC_OscConfig+0x136>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b02:	4b7d      	ldr	r3, [pc, #500]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b0a:	2b0c      	cmp	r3, #12
 8004b0c:	d068      	beq.n	8004be0 <HAL_RCC_OscConfig+0x194>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b0e:	68e3      	ldr	r3, [r4, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d074      	beq.n	8004bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b14:	4b79      	ldr	r3, [pc, #484]	; (8004cfc <HAL_RCC_OscConfig+0x2b0>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1a:	f7fe ff6d 	bl	80039f8 <HAL_GetTick>
 8004b1e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b20:	4b75      	ldr	r3, [pc, #468]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f013 0f02 	tst.w	r3, #2
 8004b28:	d160      	bne.n	8004bec <HAL_RCC_OscConfig+0x1a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b2a:	f7fe ff65 	bl	80039f8 <HAL_GetTick>
 8004b2e:	1b40      	subs	r0, r0, r5
 8004b30:	2802      	cmp	r0, #2
 8004b32:	d9f5      	bls.n	8004b20 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8004b34:	2003      	movs	r0, #3
 8004b36:	e194      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b38:	4b6f      	ldr	r3, [pc, #444]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004b40:	d0a0      	beq.n	8004a84 <HAL_RCC_OscConfig+0x38>
 8004b42:	e7c6      	b.n	8004ad2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b44:	4a6c      	ldr	r2, [pc, #432]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e7a9      	b.n	8004aa4 <HAL_RCC_OscConfig+0x58>
 8004b50:	4b69      	ldr	r3, [pc, #420]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e79f      	b.n	8004aa4 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8004b64:	f7fe ff48 	bl	80039f8 <HAL_GetTick>
 8004b68:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6a:	4b63      	ldr	r3, [pc, #396]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b72:	d0b7      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b74:	f7fe ff40 	bl	80039f8 <HAL_GetTick>
 8004b78:	1b40      	subs	r0, r0, r5
 8004b7a:	2864      	cmp	r0, #100	; 0x64
 8004b7c:	d9f5      	bls.n	8004b6a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8004b7e:	2003      	movs	r0, #3
 8004b80:	e16f      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b82:	4b5d      	ldr	r3, [pc, #372]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004b8a:	d1ba      	bne.n	8004b02 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8c:	4b5a      	ldr	r3, [pc, #360]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f013 0f02 	tst.w	r3, #2
 8004b94:	d003      	beq.n	8004b9e <HAL_RCC_OscConfig+0x152>
 8004b96:	68e3      	ldr	r3, [r4, #12]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	f040 815f 	bne.w	8004e5c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9e:	4a56      	ldr	r2, [pc, #344]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	6813      	ldr	r3, [r2, #0]
 8004ba2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004ba6:	6921      	ldr	r1, [r4, #16]
 8004ba8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004bac:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	f013 0f08 	tst.w	r3, #8
 8004bb4:	d047      	beq.n	8004c46 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bb6:	6963      	ldr	r3, [r4, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d032      	beq.n	8004c22 <HAL_RCC_OscConfig+0x1d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bbc:	4b50      	ldr	r3, [pc, #320]	; (8004d00 <HAL_RCC_OscConfig+0x2b4>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fe ff19 	bl	80039f8 <HAL_GetTick>
 8004bc6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc8:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bcc:	f013 0f02 	tst.w	r3, #2
 8004bd0:	d139      	bne.n	8004c46 <HAL_RCC_OscConfig+0x1fa>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bd2:	f7fe ff11 	bl	80039f8 <HAL_GetTick>
 8004bd6:	1b40      	subs	r0, r0, r5
 8004bd8:	2802      	cmp	r0, #2
 8004bda:	d9f5      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004bdc:	2003      	movs	r0, #3
 8004bde:	e140      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be0:	4b45      	ldr	r3, [pc, #276]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004be8:	d191      	bne.n	8004b0e <HAL_RCC_OscConfig+0xc2>
 8004bea:	e7cf      	b.n	8004b8c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4a42      	ldr	r2, [pc, #264]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004bee:	6813      	ldr	r3, [r2, #0]
 8004bf0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004bf4:	6921      	ldr	r1, [r4, #16]
 8004bf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	e7d7      	b.n	8004bae <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8004bfe:	4b3f      	ldr	r3, [pc, #252]	; (8004cfc <HAL_RCC_OscConfig+0x2b0>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c04:	f7fe fef8 	bl	80039f8 <HAL_GetTick>
 8004c08:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f013 0f02 	tst.w	r3, #2
 8004c12:	d0cc      	beq.n	8004bae <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c14:	f7fe fef0 	bl	80039f8 <HAL_GetTick>
 8004c18:	1b40      	subs	r0, r0, r5
 8004c1a:	2802      	cmp	r0, #2
 8004c1c:	d9f5      	bls.n	8004c0a <HAL_RCC_OscConfig+0x1be>
            return HAL_TIMEOUT;
 8004c1e:	2003      	movs	r0, #3
 8004c20:	e11f      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c22:	4b37      	ldr	r3, [pc, #220]	; (8004d00 <HAL_RCC_OscConfig+0x2b4>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c28:	f7fe fee6 	bl	80039f8 <HAL_GetTick>
 8004c2c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c2e:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c32:	f013 0f02 	tst.w	r3, #2
 8004c36:	d006      	beq.n	8004c46 <HAL_RCC_OscConfig+0x1fa>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c38:	f7fe fede 	bl	80039f8 <HAL_GetTick>
 8004c3c:	1b40      	subs	r0, r0, r5
 8004c3e:	2802      	cmp	r0, #2
 8004c40:	d9f5      	bls.n	8004c2e <HAL_RCC_OscConfig+0x1e2>
        {
          return HAL_TIMEOUT;
 8004c42:	2003      	movs	r0, #3
 8004c44:	e10d      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	f013 0f04 	tst.w	r3, #4
 8004c4c:	d078      	beq.n	8004d40 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4e:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004c56:	d133      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x274>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004c70:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c72:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <HAL_RCC_OscConfig+0x2b8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c7a:	d023      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x278>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c7c:	68a3      	ldr	r3, [r4, #8]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d034      	beq.n	8004cec <HAL_RCC_OscConfig+0x2a0>
 8004c82:	2b05      	cmp	r3, #5
 8004c84:	d040      	beq.n	8004d08 <HAL_RCC_OscConfig+0x2bc>
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004c88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c8a:	f022 0201 	bic.w	r2, r2, #1
 8004c8e:	671a      	str	r2, [r3, #112]	; 0x70
 8004c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c92:	f022 0204 	bic.w	r2, r2, #4
 8004c96:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c98:	68a3      	ldr	r3, [r4, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d03e      	beq.n	8004d1c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9e:	f7fe feab 	bl	80039f8 <HAL_GetTick>
 8004ca2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca4:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca8:	f013 0f02 	tst.w	r3, #2
 8004cac:	d147      	bne.n	8004d3e <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cae:	f7fe fea3 	bl	80039f8 <HAL_GetTick>
 8004cb2:	1b80      	subs	r0, r0, r6
 8004cb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cb8:	4298      	cmp	r0, r3
 8004cba:	d9f3      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_TIMEOUT;
 8004cbc:	2003      	movs	r0, #3
 8004cbe:	e0d0      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8004cc0:	2500      	movs	r5, #0
 8004cc2:	e7d6      	b.n	8004c72 <HAL_RCC_OscConfig+0x226>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <HAL_RCC_OscConfig+0x2b8>)
 8004cc6:	6813      	ldr	r3, [r2, #0]
 8004cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ccc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004cce:	f7fe fe93 	bl	80039f8 <HAL_GetTick>
 8004cd2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <HAL_RCC_OscConfig+0x2b8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004cdc:	d1ce      	bne.n	8004c7c <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cde:	f7fe fe8b 	bl	80039f8 <HAL_GetTick>
 8004ce2:	1b80      	subs	r0, r0, r6
 8004ce4:	2802      	cmp	r0, #2
 8004ce6:	d9f5      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 8004ce8:	2003      	movs	r0, #3
 8004cea:	e0ba      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cec:	4a02      	ldr	r2, [pc, #8]	; (8004cf8 <HAL_RCC_OscConfig+0x2ac>)
 8004cee:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf6:	e7cf      	b.n	8004c98 <HAL_RCC_OscConfig+0x24c>
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	42470000 	.word	0x42470000
 8004d00:	42470e80 	.word	0x42470e80
 8004d04:	40007000 	.word	0x40007000
 8004d08:	4b5e      	ldr	r3, [pc, #376]	; (8004e84 <HAL_RCC_OscConfig+0x438>)
 8004d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d0c:	f042 0204 	orr.w	r2, r2, #4
 8004d10:	671a      	str	r2, [r3, #112]	; 0x70
 8004d12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d14:	f042 0201 	orr.w	r2, r2, #1
 8004d18:	671a      	str	r2, [r3, #112]	; 0x70
 8004d1a:	e7bd      	b.n	8004c98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1c:	f7fe fe6c 	bl	80039f8 <HAL_GetTick>
 8004d20:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d22:	4b58      	ldr	r3, [pc, #352]	; (8004e84 <HAL_RCC_OscConfig+0x438>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	f013 0f02 	tst.w	r3, #2
 8004d2a:	d008      	beq.n	8004d3e <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d2c:	f7fe fe64 	bl	80039f8 <HAL_GetTick>
 8004d30:	1b80      	subs	r0, r0, r6
 8004d32:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d36:	4298      	cmp	r0, r3
 8004d38:	d9f3      	bls.n	8004d22 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8004d3a:	2003      	movs	r0, #3
 8004d3c:	e091      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d3e:	b9ed      	cbnz	r5, 8004d7c <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d40:	69a3      	ldr	r3, [r4, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 808c 	beq.w	8004e60 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d48:	4a4e      	ldr	r2, [pc, #312]	; (8004e84 <HAL_RCC_OscConfig+0x438>)
 8004d4a:	6892      	ldr	r2, [r2, #8]
 8004d4c:	f002 020c 	and.w	r2, r2, #12
 8004d50:	2a08      	cmp	r2, #8
 8004d52:	d054      	beq.n	8004dfe <HAL_RCC_OscConfig+0x3b2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d017      	beq.n	8004d88 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d58:	4b4b      	ldr	r3, [pc, #300]	; (8004e88 <HAL_RCC_OscConfig+0x43c>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fe fe4b 	bl	80039f8 <HAL_GetTick>
 8004d62:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d64:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <HAL_RCC_OscConfig+0x438>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004d6c:	d045      	beq.n	8004dfa <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d6e:	f7fe fe43 	bl	80039f8 <HAL_GetTick>
 8004d72:	1b00      	subs	r0, r0, r4
 8004d74:	2802      	cmp	r0, #2
 8004d76:	d9f5      	bls.n	8004d64 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8004d78:	2003      	movs	r0, #3
 8004d7a:	e072      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d7c:	4a41      	ldr	r2, [pc, #260]	; (8004e84 <HAL_RCC_OscConfig+0x438>)
 8004d7e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d84:	6413      	str	r3, [r2, #64]	; 0x40
 8004d86:	e7db      	b.n	8004d40 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8004d88:	4b3f      	ldr	r3, [pc, #252]	; (8004e88 <HAL_RCC_OscConfig+0x43c>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004d8e:	f7fe fe33 	bl	80039f8 <HAL_GetTick>
 8004d92:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d94:	4b3b      	ldr	r3, [pc, #236]	; (8004e84 <HAL_RCC_OscConfig+0x438>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004d9c:	d006      	beq.n	8004dac <HAL_RCC_OscConfig+0x360>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d9e:	f7fe fe2b 	bl	80039f8 <HAL_GetTick>
 8004da2:	1b40      	subs	r0, r0, r5
 8004da4:	2802      	cmp	r0, #2
 8004da6:	d9f5      	bls.n	8004d94 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8004da8:	2003      	movs	r0, #3
 8004daa:	e05a      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dac:	69e3      	ldr	r3, [r4, #28]
 8004dae:	6a22      	ldr	r2, [r4, #32]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004db4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004db8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004dba:	0852      	lsrs	r2, r2, #1
 8004dbc:	3a01      	subs	r2, #1
 8004dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004dc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004dc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004dca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004dce:	4a2d      	ldr	r2, [pc, #180]	; (8004e84 <HAL_RCC_OscConfig+0x438>)
 8004dd0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004dd2:	4b2d      	ldr	r3, [pc, #180]	; (8004e88 <HAL_RCC_OscConfig+0x43c>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004dd8:	f7fe fe0e 	bl	80039f8 <HAL_GetTick>
 8004ddc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dde:	4b29      	ldr	r3, [pc, #164]	; (8004e84 <HAL_RCC_OscConfig+0x438>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004de6:	d106      	bne.n	8004df6 <HAL_RCC_OscConfig+0x3aa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de8:	f7fe fe06 	bl	80039f8 <HAL_GetTick>
 8004dec:	1b00      	subs	r0, r0, r4
 8004dee:	2802      	cmp	r0, #2
 8004df0:	d9f5      	bls.n	8004dde <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8004df2:	2003      	movs	r0, #3
 8004df4:	e035      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004df6:	2000      	movs	r0, #0
 8004df8:	e033      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e031      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d031      	beq.n	8004e66 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8004e02:	4b20      	ldr	r3, [pc, #128]	; (8004e84 <HAL_RCC_OscConfig+0x438>)
 8004e04:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e06:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8004e0a:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e0c:	4291      	cmp	r1, r2
 8004e0e:	d12c      	bne.n	8004e6a <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e14:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e16:	428a      	cmp	r2, r1
 8004e18:	d129      	bne.n	8004e6e <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e1c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004e20:	401a      	ands	r2, r3
 8004e22:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004e26:	d124      	bne.n	8004e72 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e28:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004e2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e2e:	0852      	lsrs	r2, r2, #1
 8004e30:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e32:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004e36:	d11e      	bne.n	8004e76 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e3c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e3e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8004e42:	d11a      	bne.n	8004e7a <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e44:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004e48:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e4a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8004e4e:	d116      	bne.n	8004e7e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8004e50:	2000      	movs	r0, #0
 8004e52:	e006      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8004e54:	2001      	movs	r0, #1
}
 8004e56:	4770      	bx	lr
        return HAL_ERROR;
 8004e58:	2001      	movs	r0, #1
 8004e5a:	e002      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	e000      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8004e60:	2000      	movs	r0, #0
}
 8004e62:	b002      	add	sp, #8
 8004e64:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004e66:	2001      	movs	r0, #1
 8004e68:	e7fb      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	e7f9      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
 8004e6e:	2001      	movs	r0, #1
 8004e70:	e7f7      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
 8004e72:	2001      	movs	r0, #1
 8004e74:	e7f5      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
 8004e76:	2001      	movs	r0, #1
 8004e78:	e7f3      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
 8004e7a:	2001      	movs	r0, #1
 8004e7c:	e7f1      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
 8004e7e:	2001      	movs	r0, #1
 8004e80:	e7ef      	b.n	8004e62 <HAL_RCC_OscConfig+0x416>
 8004e82:	bf00      	nop
 8004e84:	40023800 	.word	0x40023800
 8004e88:	42470060 	.word	0x42470060

08004e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	4605      	mov	r5, r0
 8004e94:	4688      	mov	r8, r1
 8004e96:	4617      	mov	r7, r2
 8004e98:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e9a:	f7fe fdad 	bl	80039f8 <HAL_GetTick>
 8004e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ea0:	1a1b      	subs	r3, r3, r0
 8004ea2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8004ea6:	f7fe fda7 	bl	80039f8 <HAL_GetTick>
 8004eaa:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eac:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004eb4:	fb09 f303 	mul.w	r3, r9, r3
 8004eb8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eba:	682b      	ldr	r3, [r5, #0]
 8004ebc:	689c      	ldr	r4, [r3, #8]
 8004ebe:	ea38 0304 	bics.w	r3, r8, r4
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2401      	moveq	r4, #1
 8004ec6:	2400      	movne	r4, #0
 8004ec8:	42bc      	cmp	r4, r7
 8004eca:	d040      	beq.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ecc:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004ed0:	d0f3      	beq.n	8004eba <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ed2:	f7fe fd91 	bl	80039f8 <HAL_GetTick>
 8004ed6:	eba0 000a 	sub.w	r0, r0, sl
 8004eda:	4548      	cmp	r0, r9
 8004edc:	d20a      	bcs.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0x68>
 8004ede:	f1b9 0f00 	cmp.w	r9, #0
 8004ee2:	d007      	beq.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ee4:	9a01      	ldr	r2, [sp, #4]
 8004ee6:	b102      	cbz	r2, 8004eea <SPI_WaitFlagStateUntilTimeout+0x5e>
 8004ee8:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8004eea:	9b01      	ldr	r3, [sp, #4]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	4691      	mov	r9, r2
 8004ef2:	e7e2      	b.n	8004eba <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ef4:	682a      	ldr	r2, [r5, #0]
 8004ef6:	6853      	ldr	r3, [r2, #4]
 8004ef8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004efc:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efe:	686b      	ldr	r3, [r5, #4]
 8004f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f04:	d00b      	beq.n	8004f1e <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f06:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0c:	d014      	beq.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004f14:	2300      	movs	r3, #0
 8004f16:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8004f1a:	2003      	movs	r0, #3
 8004f1c:	e018      	b.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1e:	68ab      	ldr	r3, [r5, #8]
 8004f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f24:	d002      	beq.n	8004f2c <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2a:	d1ec      	bne.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004f2c:	682a      	ldr	r2, [r5, #0]
 8004f2e:	6813      	ldr	r3, [r2, #0]
 8004f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e7e6      	b.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004f38:	682a      	ldr	r2, [r5, #0]
 8004f3a:	6813      	ldr	r3, [r2, #0]
 8004f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	682a      	ldr	r2, [r5, #0]
 8004f44:	6813      	ldr	r3, [r2, #0]
 8004f46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	e7df      	b.n	8004f0e <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8004f4e:	2000      	movs	r0, #0
}
 8004f50:	b002      	add	sp, #8
 8004f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f56:	bf00      	nop
 8004f58:	20000078 	.word	0x20000078

08004f5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f5c:	b530      	push	{r4, r5, lr}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <SPI_EndRxTxTransaction+0x60>)
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <SPI_EndRxTxTransaction+0x64>)
 8004f68:	fba3 3000 	umull	r3, r0, r3, r0
 8004f6c:	0d40      	lsrs	r0, r0, #21
 8004f6e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004f72:	fb05 f000 	mul.w	r0, r5, r0
 8004f76:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f78:	6863      	ldr	r3, [r4, #4]
 8004f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f7e:	d00b      	beq.n	8004f98 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f80:	9b03      	ldr	r3, [sp, #12]
 8004f82:	b1bb      	cbz	r3, 8004fb4 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f92:	d1f5      	bne.n	8004f80 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8004f94:	2000      	movs	r0, #0
 8004f96:	e00e      	b.n	8004fb6 <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f98:	9200      	str	r2, [sp, #0]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2180      	movs	r1, #128	; 0x80
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f7ff ff73 	bl	8004e8c <SPI_WaitFlagStateUntilTimeout>
 8004fa6:	b130      	cbz	r0, 8004fb6 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fa8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004faa:	f043 0320 	orr.w	r3, r3, #32
 8004fae:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fb0:	2003      	movs	r0, #3
 8004fb2:	e000      	b.n	8004fb6 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8004fb4:	2000      	movs	r0, #0
}
 8004fb6:	b005      	add	sp, #20
 8004fb8:	bd30      	pop	{r4, r5, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000078 	.word	0x20000078
 8004fc0:	165e9f81 	.word	0x165e9f81

08004fc4 <SPI_EndRxTransaction>:
{
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	4604      	mov	r4, r0
 8004fca:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fcc:	6841      	ldr	r1, [r0, #4]
 8004fce:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004fd2:	d014      	beq.n	8004ffe <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fd4:	6861      	ldr	r1, [r4, #4]
 8004fd6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004fda:	d12a      	bne.n	8005032 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004fdc:	68a1      	ldr	r1, [r4, #8]
 8004fde:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004fe2:	d019      	beq.n	8005018 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe4:	9200      	str	r2, [sp, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2180      	movs	r1, #128	; 0x80
 8004fea:	4620      	mov	r0, r4
 8004fec:	f7ff ff4e 	bl	8004e8c <SPI_WaitFlagStateUntilTimeout>
 8004ff0:	b330      	cbz	r0, 8005040 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ff2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ff4:	f043 0320 	orr.w	r3, r3, #32
 8004ff8:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ffa:	2003      	movs	r0, #3
 8004ffc:	e020      	b.n	8005040 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ffe:	6881      	ldr	r1, [r0, #8]
 8005000:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005004:	d002      	beq.n	800500c <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005006:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800500a:	d1e3      	bne.n	8004fd4 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 800500c:	6820      	ldr	r0, [r4, #0]
 800500e:	6801      	ldr	r1, [r0, #0]
 8005010:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005014:	6001      	str	r1, [r0, #0]
 8005016:	e7dd      	b.n	8004fd4 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005018:	9200      	str	r2, [sp, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	2101      	movs	r1, #1
 800501e:	4620      	mov	r0, r4
 8005020:	f7ff ff34 	bl	8004e8c <SPI_WaitFlagStateUntilTimeout>
 8005024:	b160      	cbz	r0, 8005040 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005026:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005028:	f043 0320 	orr.w	r3, r3, #32
 800502c:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800502e:	2003      	movs	r0, #3
 8005030:	e006      	b.n	8005040 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005032:	9200      	str	r2, [sp, #0]
 8005034:	2200      	movs	r2, #0
 8005036:	2101      	movs	r1, #1
 8005038:	4620      	mov	r0, r4
 800503a:	f7ff ff27 	bl	8004e8c <SPI_WaitFlagStateUntilTimeout>
 800503e:	b908      	cbnz	r0, 8005044 <SPI_EndRxTransaction+0x80>
}
 8005040:	b002      	add	sp, #8
 8005042:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005044:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005046:	f043 0320 	orr.w	r3, r3, #32
 800504a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800504c:	2003      	movs	r0, #3
 800504e:	e7f7      	b.n	8005040 <SPI_EndRxTransaction+0x7c>

08005050 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005050:	2800      	cmp	r0, #0
 8005052:	d05a      	beq.n	800510a <HAL_SPI_Init+0xba>
{
 8005054:	b510      	push	{r4, lr}
 8005056:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005058:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800505a:	b933      	cbnz	r3, 800506a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800505c:	6843      	ldr	r3, [r0, #4]
 800505e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005062:	d005      	beq.n	8005070 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005064:	2300      	movs	r3, #0
 8005066:	61c3      	str	r3, [r0, #28]
 8005068:	e002      	b.n	8005070 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800506a:	2300      	movs	r3, #0
 800506c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800506e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005070:	2300      	movs	r3, #0
 8005072:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005074:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005078:	2b00      	cmp	r3, #0
 800507a:	d040      	beq.n	80050fe <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 800507c:	2302      	movs	r3, #2
 800507e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8005082:	6822      	ldr	r2, [r4, #0]
 8005084:	6813      	ldr	r3, [r2, #0]
 8005086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800508c:	6863      	ldr	r3, [r4, #4]
 800508e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005092:	68a2      	ldr	r2, [r4, #8]
 8005094:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8005098:	4313      	orrs	r3, r2
 800509a:	68e2      	ldr	r2, [r4, #12]
 800509c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80050a0:	4313      	orrs	r3, r2
 80050a2:	6922      	ldr	r2, [r4, #16]
 80050a4:	f002 0202 	and.w	r2, r2, #2
 80050a8:	4313      	orrs	r3, r2
 80050aa:	6962      	ldr	r2, [r4, #20]
 80050ac:	f002 0201 	and.w	r2, r2, #1
 80050b0:	4313      	orrs	r3, r2
 80050b2:	69a2      	ldr	r2, [r4, #24]
 80050b4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80050b8:	4313      	orrs	r3, r2
 80050ba:	69e2      	ldr	r2, [r4, #28]
 80050bc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80050c0:	4313      	orrs	r3, r2
 80050c2:	6a22      	ldr	r2, [r4, #32]
 80050c4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80050c8:	4313      	orrs	r3, r2
 80050ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80050cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80050d0:	6821      	ldr	r1, [r4, #0]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050d6:	8b63      	ldrh	r3, [r4, #26]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80050de:	f002 0210 	and.w	r2, r2, #16
 80050e2:	6821      	ldr	r1, [r4, #0]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050e8:	6822      	ldr	r2, [r4, #0]
 80050ea:	69d3      	ldr	r3, [r2, #28]
 80050ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050f0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050f2:	2000      	movs	r0, #0
 80050f4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80050fc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80050fe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005102:	4620      	mov	r0, r4
 8005104:	f7fe f9f8 	bl	80034f8 <HAL_SPI_MspInit>
 8005108:	e7b8      	b.n	800507c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800510a:	2001      	movs	r0, #1
}
 800510c:	4770      	bx	lr

0800510e <HAL_SPI_Transmit>:
{
 800510e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005112:	b083      	sub	sp, #12
 8005114:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005116:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800511a:	2b01      	cmp	r3, #1
 800511c:	f000 80cc 	beq.w	80052b8 <HAL_SPI_Transmit+0x1aa>
 8005120:	4604      	mov	r4, r0
 8005122:	4688      	mov	r8, r1
 8005124:	4691      	mov	r9, r2
 8005126:	2301      	movs	r3, #1
 8005128:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800512c:	f7fe fc64 	bl	80039f8 <HAL_GetTick>
 8005130:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005132:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8005136:	b2f6      	uxtb	r6, r6
 8005138:	2e01      	cmp	r6, #1
 800513a:	f040 80aa 	bne.w	8005292 <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 800513e:	f1b8 0f00 	cmp.w	r8, #0
 8005142:	f000 80a7 	beq.w	8005294 <HAL_SPI_Transmit+0x186>
 8005146:	f1b9 0f00 	cmp.w	r9, #0
 800514a:	f000 80a3 	beq.w	8005294 <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800514e:	2303      	movs	r3, #3
 8005150:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005154:	2300      	movs	r3, #0
 8005156:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005158:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800515c:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005160:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005164:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005166:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005168:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800516a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800516c:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800516e:	68a3      	ldr	r3, [r4, #8]
 8005170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005174:	d01e      	beq.n	80051b4 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800517e:	d103      	bne.n	8005188 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005186:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005188:	68e3      	ldr	r3, [r4, #12]
 800518a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518e:	d01c      	beq.n	80051ca <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005190:	6863      	ldr	r3, [r4, #4]
 8005192:	b113      	cbz	r3, 800519a <HAL_SPI_Transmit+0x8c>
 8005194:	f1b9 0f01 	cmp.w	r9, #1
 8005198:	d152      	bne.n	8005240 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800519a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	7812      	ldrb	r2, [r2, #0]
 80051a0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80051a4:	3301      	adds	r3, #1
 80051a6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80051a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80051b2:	e045      	b.n	8005240 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 80051b4:	6822      	ldr	r2, [r4, #0]
 80051b6:	6813      	ldr	r3, [r2, #0]
 80051b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051bc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80051be:	6822      	ldr	r2, [r4, #0]
 80051c0:	6813      	ldr	r3, [r2, #0]
 80051c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	e7d5      	b.n	8005176 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ca:	6863      	ldr	r3, [r4, #4]
 80051cc:	b113      	cbz	r3, 80051d4 <HAL_SPI_Transmit+0xc6>
 80051ce:	f1b9 0f01 	cmp.w	r9, #1
 80051d2:	d116      	bne.n	8005202 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	8812      	ldrh	r2, [r2, #0]
 80051da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80051de:	3302      	adds	r3, #2
 80051e0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80051e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	86e3      	strh	r3, [r4, #54]	; 0x36
 80051ec:	e009      	b.n	8005202 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ee:	f7fe fc03 	bl	80039f8 <HAL_GetTick>
 80051f2:	1bc0      	subs	r0, r0, r7
 80051f4:	42a8      	cmp	r0, r5
 80051f6:	d302      	bcc.n	80051fe <HAL_SPI_Transmit+0xf0>
 80051f8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80051fc:	d154      	bne.n	80052a8 <HAL_SPI_Transmit+0x19a>
 80051fe:	2d00      	cmp	r5, #0
 8005200:	d054      	beq.n	80052ac <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 8005202:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d02e      	beq.n	8005268 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	f012 0f02 	tst.w	r2, #2
 8005212:	d0ec      	beq.n	80051ee <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005214:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005216:	8812      	ldrh	r2, [r2, #0]
 8005218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800521a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800521c:	3302      	adds	r3, #2
 800521e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005220:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29b      	uxth	r3, r3
 8005228:	86e3      	strh	r3, [r4, #54]	; 0x36
 800522a:	e7ea      	b.n	8005202 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800522c:	f7fe fbe4 	bl	80039f8 <HAL_GetTick>
 8005230:	1bc0      	subs	r0, r0, r7
 8005232:	42a8      	cmp	r0, r5
 8005234:	d302      	bcc.n	800523c <HAL_SPI_Transmit+0x12e>
 8005236:	f1b5 3fff 	cmp.w	r5, #4294967295
 800523a:	d139      	bne.n	80052b0 <HAL_SPI_Transmit+0x1a2>
 800523c:	2d00      	cmp	r5, #0
 800523e:	d039      	beq.n	80052b4 <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 8005240:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005242:	b29b      	uxth	r3, r3
 8005244:	b183      	cbz	r3, 8005268 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	f012 0f02 	tst.w	r2, #2
 800524e:	d0ed      	beq.n	800522c <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005250:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005256:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005258:	3301      	adds	r3, #1
 800525a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800525c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800525e:	b292      	uxth	r2, r2
 8005260:	3a01      	subs	r2, #1
 8005262:	b292      	uxth	r2, r2
 8005264:	86e2      	strh	r2, [r4, #54]	; 0x36
 8005266:	e7eb      	b.n	8005240 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005268:	463a      	mov	r2, r7
 800526a:	4629      	mov	r1, r5
 800526c:	4620      	mov	r0, r4
 800526e:	f7ff fe75 	bl	8004f5c <SPI_EndRxTxTransaction>
 8005272:	b108      	cbz	r0, 8005278 <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005274:	2320      	movs	r3, #32
 8005276:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005278:	68a3      	ldr	r3, [r4, #8]
 800527a:	b933      	cbnz	r3, 800528a <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	9201      	str	r2, [sp, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800528a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800528c:	b913      	cbnz	r3, 8005294 <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800528e:	2600      	movs	r6, #0
 8005290:	e000      	b.n	8005294 <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 8005292:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005294:	2301      	movs	r3, #1
 8005296:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800529a:	2300      	movs	r3, #0
 800529c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80052a0:	4630      	mov	r0, r6
 80052a2:	b003      	add	sp, #12
 80052a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80052a8:	2603      	movs	r6, #3
 80052aa:	e7f3      	b.n	8005294 <HAL_SPI_Transmit+0x186>
 80052ac:	2603      	movs	r6, #3
 80052ae:	e7f1      	b.n	8005294 <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 80052b0:	2603      	movs	r6, #3
 80052b2:	e7ef      	b.n	8005294 <HAL_SPI_Transmit+0x186>
 80052b4:	2603      	movs	r6, #3
 80052b6:	e7ed      	b.n	8005294 <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 80052b8:	2602      	movs	r6, #2
 80052ba:	e7f1      	b.n	80052a0 <HAL_SPI_Transmit+0x192>

080052bc <HAL_SPI_TransmitReceive>:
{
 80052bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052c0:	b083      	sub	sp, #12
 80052c2:	461f      	mov	r7, r3
 80052c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80052c6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	f000 8110 	beq.w	80054f0 <HAL_SPI_TransmitReceive+0x234>
 80052d0:	4604      	mov	r4, r0
 80052d2:	4688      	mov	r8, r1
 80052d4:	4691      	mov	r9, r2
 80052d6:	2301      	movs	r3, #1
 80052d8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80052dc:	f7fe fb8c 	bl	80039f8 <HAL_GetTick>
 80052e0:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80052e2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80052e6:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80052e8:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d00a      	beq.n	8005304 <HAL_SPI_TransmitReceive+0x48>
 80052ee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80052f2:	f040 80e3 	bne.w	80054bc <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052f6:	68a2      	ldr	r2, [r4, #8]
 80052f8:	2a00      	cmp	r2, #0
 80052fa:	f040 80e9 	bne.w	80054d0 <HAL_SPI_TransmitReceive+0x214>
 80052fe:	2b04      	cmp	r3, #4
 8005300:	f040 80e8 	bne.w	80054d4 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005304:	f1b8 0f00 	cmp.w	r8, #0
 8005308:	f000 80e6 	beq.w	80054d8 <HAL_SPI_TransmitReceive+0x21c>
 800530c:	f1b9 0f00 	cmp.w	r9, #0
 8005310:	f000 80e4 	beq.w	80054dc <HAL_SPI_TransmitReceive+0x220>
 8005314:	2f00      	cmp	r7, #0
 8005316:	f000 80e3 	beq.w	80054e0 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800531a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b04      	cmp	r3, #4
 8005322:	d002      	beq.n	800532a <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005324:	2305      	movs	r3, #5
 8005326:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800532a:	2300      	movs	r3, #0
 800532c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800532e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005332:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005334:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005336:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800533a:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800533c:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800533e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005340:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	f012 0f40 	tst.w	r2, #64	; 0x40
 800534a:	d103      	bne.n	8005354 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005352:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005354:	68e3      	ldr	r3, [r4, #12]
 8005356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535a:	d011      	beq.n	8005380 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800535c:	6863      	ldr	r3, [r4, #4]
 800535e:	b10b      	cbz	r3, 8005364 <HAL_SPI_TransmitReceive+0xa8>
 8005360:	2f01      	cmp	r7, #1
 8005362:	d10b      	bne.n	800537c <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005364:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	7812      	ldrb	r2, [r2, #0]
 800536a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800536c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800536e:	3301      	adds	r3, #1
 8005370:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005372:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29b      	uxth	r3, r3
 800537a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800537c:	2701      	movs	r7, #1
 800537e:	e06b      	b.n	8005458 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005380:	6863      	ldr	r3, [r4, #4]
 8005382:	b10b      	cbz	r3, 8005388 <HAL_SPI_TransmitReceive+0xcc>
 8005384:	2f01      	cmp	r7, #1
 8005386:	d10b      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005388:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	8812      	ldrh	r2, [r2, #0]
 800538e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005390:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005392:	3302      	adds	r3, #2
 8005394:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005396:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29b      	uxth	r3, r3
 800539e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80053a0:	2701      	movs	r7, #1
 80053a2:	e01c      	b.n	80053de <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	f012 0f01 	tst.w	r2, #1
 80053ac:	d00e      	beq.n	80053cc <HAL_SPI_TransmitReceive+0x110>
 80053ae:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80053b0:	b292      	uxth	r2, r2
 80053b2:	b15a      	cbz	r2, 80053cc <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053bc:	3302      	adds	r3, #2
 80053be:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80053c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80053ca:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053cc:	f7fe fb14 	bl	80039f8 <HAL_GetTick>
 80053d0:	1b80      	subs	r0, r0, r6
 80053d2:	42a8      	cmp	r0, r5
 80053d4:	d303      	bcc.n	80053de <HAL_SPI_TransmitReceive+0x122>
 80053d6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80053da:	f040 8083 	bne.w	80054e4 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	b91b      	cbnz	r3, 80053ec <HAL_SPI_TransmitReceive+0x130>
 80053e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d053      	beq.n	8005494 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	f012 0f02 	tst.w	r2, #2
 80053f4:	d0d6      	beq.n	80053a4 <HAL_SPI_TransmitReceive+0xe8>
 80053f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80053f8:	b292      	uxth	r2, r2
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	d0d2      	beq.n	80053a4 <HAL_SPI_TransmitReceive+0xe8>
 80053fe:	2f00      	cmp	r7, #0
 8005400:	d0d0      	beq.n	80053a4 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005402:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005404:	8812      	ldrh	r2, [r2, #0]
 8005406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005408:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800540a:	3302      	adds	r3, #2
 800540c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800540e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29b      	uxth	r3, r3
 8005416:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005418:	2700      	movs	r7, #0
 800541a:	e7c3      	b.n	80053a4 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	f012 0f01 	tst.w	r2, #1
 8005424:	d00e      	beq.n	8005444 <HAL_SPI_TransmitReceive+0x188>
 8005426:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005428:	b292      	uxth	r2, r2
 800542a:	b15a      	cbz	r2, 8005444 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005430:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005432:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005434:	3301      	adds	r3, #1
 8005436:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005438:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29b      	uxth	r3, r3
 8005440:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005442:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005444:	f7fe fad8 	bl	80039f8 <HAL_GetTick>
 8005448:	1b83      	subs	r3, r0, r6
 800544a:	42ab      	cmp	r3, r5
 800544c:	d302      	bcc.n	8005454 <HAL_SPI_TransmitReceive+0x198>
 800544e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005452:	d149      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x22c>
 8005454:	2d00      	cmp	r5, #0
 8005456:	d049      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005458:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800545a:	b29b      	uxth	r3, r3
 800545c:	b913      	cbnz	r3, 8005464 <HAL_SPI_TransmitReceive+0x1a8>
 800545e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005460:	b29b      	uxth	r3, r3
 8005462:	b1bb      	cbz	r3, 8005494 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	f012 0f02 	tst.w	r2, #2
 800546c:	d0d6      	beq.n	800541c <HAL_SPI_TransmitReceive+0x160>
 800546e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005470:	b292      	uxth	r2, r2
 8005472:	2a00      	cmp	r2, #0
 8005474:	d0d2      	beq.n	800541c <HAL_SPI_TransmitReceive+0x160>
 8005476:	2f00      	cmp	r7, #0
 8005478:	d0d0      	beq.n	800541c <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800547a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800547c:	7812      	ldrb	r2, [r2, #0]
 800547e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005480:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005482:	3301      	adds	r3, #1
 8005484:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005486:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29b      	uxth	r3, r3
 800548e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005490:	2700      	movs	r7, #0
 8005492:	e7c3      	b.n	800541c <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005494:	4632      	mov	r2, r6
 8005496:	4629      	mov	r1, r5
 8005498:	4620      	mov	r0, r4
 800549a:	f7ff fd5f 	bl	8004f5c <SPI_EndRxTxTransaction>
 800549e:	b948      	cbnz	r0, 80054b4 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054a0:	68a3      	ldr	r3, [r4, #8]
 80054a2:	b963      	cbnz	r3, 80054be <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	9201      	str	r2, [sp, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	9301      	str	r3, [sp, #4]
 80054b0:	9b01      	ldr	r3, [sp, #4]
 80054b2:	e004      	b.n	80054be <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054b4:	2320      	movs	r3, #32
 80054b6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80054b8:	2001      	movs	r0, #1
    goto error;
 80054ba:	e000      	b.n	80054be <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 80054bc:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80054be:	2301      	movs	r3, #1
 80054c0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054c4:	2300      	movs	r3, #0
 80054c6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80054ca:	b003      	add	sp, #12
 80054cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80054d0:	2002      	movs	r0, #2
 80054d2:	e7f4      	b.n	80054be <HAL_SPI_TransmitReceive+0x202>
 80054d4:	2002      	movs	r0, #2
 80054d6:	e7f2      	b.n	80054be <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 80054d8:	2001      	movs	r0, #1
 80054da:	e7f0      	b.n	80054be <HAL_SPI_TransmitReceive+0x202>
 80054dc:	2001      	movs	r0, #1
 80054de:	e7ee      	b.n	80054be <HAL_SPI_TransmitReceive+0x202>
 80054e0:	2001      	movs	r0, #1
 80054e2:	e7ec      	b.n	80054be <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80054e4:	2003      	movs	r0, #3
 80054e6:	e7ea      	b.n	80054be <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80054e8:	2003      	movs	r0, #3
 80054ea:	e7e8      	b.n	80054be <HAL_SPI_TransmitReceive+0x202>
 80054ec:	2003      	movs	r0, #3
 80054ee:	e7e6      	b.n	80054be <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 80054f0:	2002      	movs	r0, #2
 80054f2:	e7ea      	b.n	80054ca <HAL_SPI_TransmitReceive+0x20e>

080054f4 <HAL_SPI_Receive>:
{
 80054f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054f8:	b083      	sub	sp, #12
 80054fa:	4604      	mov	r4, r0
 80054fc:	4688      	mov	r8, r1
 80054fe:	4691      	mov	r9, r2
 8005500:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005502:	6843      	ldr	r3, [r0, #4]
 8005504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005508:	d038      	beq.n	800557c <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 800550a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800550e:	2b01      	cmp	r3, #1
 8005510:	f000 80a8 	beq.w	8005664 <HAL_SPI_Receive+0x170>
 8005514:	2301      	movs	r3, #1
 8005516:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800551a:	f7fe fa6d 	bl	80039f8 <HAL_GetTick>
 800551e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005520:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8005524:	b2f6      	uxtb	r6, r6
 8005526:	2e01      	cmp	r6, #1
 8005528:	f040 8089 	bne.w	800563e <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 800552c:	f1b8 0f00 	cmp.w	r8, #0
 8005530:	f000 8086 	beq.w	8005640 <HAL_SPI_Receive+0x14c>
 8005534:	f1b9 0f00 	cmp.w	r9, #0
 8005538:	f000 8082 	beq.w	8005640 <HAL_SPI_Receive+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800553c:	2304      	movs	r3, #4
 800553e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005542:	2300      	movs	r3, #0
 8005544:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005546:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800554a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800554e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005552:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005554:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005556:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005558:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800555a:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800555c:	68a3      	ldr	r3, [r4, #8]
 800555e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005562:	d018      	beq.n	8005596 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	f012 0f40 	tst.w	r2, #64	; 0x40
 800556c:	d103      	bne.n	8005576 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005574:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005576:	68e3      	ldr	r3, [r4, #12]
 8005578:	b313      	cbz	r3, 80055c0 <HAL_SPI_Receive+0xcc>
 800557a:	e040      	b.n	80055fe <HAL_SPI_Receive+0x10a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800557c:	6883      	ldr	r3, [r0, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1c3      	bne.n	800550a <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005582:	2304      	movs	r3, #4
 8005584:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005588:	9500      	str	r5, [sp, #0]
 800558a:	4613      	mov	r3, r2
 800558c:	460a      	mov	r2, r1
 800558e:	f7ff fe95 	bl	80052bc <HAL_SPI_TransmitReceive>
 8005592:	4606      	mov	r6, r0
 8005594:	e05a      	b.n	800564c <HAL_SPI_Receive+0x158>
    __HAL_SPI_DISABLE(hspi);
 8005596:	6822      	ldr	r2, [r4, #0]
 8005598:	6813      	ldr	r3, [r2, #0]
 800559a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80055a0:	6822      	ldr	r2, [r4, #0]
 80055a2:	6813      	ldr	r3, [r2, #0]
 80055a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	e7db      	b.n	8005564 <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ac:	f7fe fa24 	bl	80039f8 <HAL_GetTick>
 80055b0:	1bc0      	subs	r0, r0, r7
 80055b2:	42a8      	cmp	r0, r5
 80055b4:	d302      	bcc.n	80055bc <HAL_SPI_Receive+0xc8>
 80055b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80055ba:	d14b      	bne.n	8005654 <HAL_SPI_Receive+0x160>
 80055bc:	2d00      	cmp	r5, #0
 80055be:	d04b      	beq.n	8005658 <HAL_SPI_Receive+0x164>
    while (hspi->RxXferCount > 0U)
 80055c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d02e      	beq.n	8005626 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	f012 0f01 	tst.w	r2, #1
 80055d0:	d0ec      	beq.n	80055ac <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80055d4:	7b1b      	ldrb	r3, [r3, #12]
 80055d6:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055da:	3301      	adds	r3, #1
 80055dc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80055de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80055e8:	e7ea      	b.n	80055c0 <HAL_SPI_Receive+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ea:	f7fe fa05 	bl	80039f8 <HAL_GetTick>
 80055ee:	1bc0      	subs	r0, r0, r7
 80055f0:	42a8      	cmp	r0, r5
 80055f2:	d302      	bcc.n	80055fa <HAL_SPI_Receive+0x106>
 80055f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80055f8:	d130      	bne.n	800565c <HAL_SPI_Receive+0x168>
 80055fa:	2d00      	cmp	r5, #0
 80055fc:	d030      	beq.n	8005660 <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 80055fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005600:	b29b      	uxth	r3, r3
 8005602:	b183      	cbz	r3, 8005626 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	f012 0f01 	tst.w	r2, #1
 800560c:	d0ed      	beq.n	80055ea <HAL_SPI_Receive+0xf6>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005612:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005616:	3302      	adds	r3, #2
 8005618:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800561a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800561c:	b292      	uxth	r2, r2
 800561e:	3a01      	subs	r2, #1
 8005620:	b292      	uxth	r2, r2
 8005622:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8005624:	e7eb      	b.n	80055fe <HAL_SPI_Receive+0x10a>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005626:	463a      	mov	r2, r7
 8005628:	4629      	mov	r1, r5
 800562a:	4620      	mov	r0, r4
 800562c:	f7ff fcca 	bl	8004fc4 <SPI_EndRxTransaction>
 8005630:	b108      	cbz	r0, 8005636 <HAL_SPI_Receive+0x142>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005632:	2320      	movs	r3, #32
 8005634:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005636:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005638:	b913      	cbnz	r3, 8005640 <HAL_SPI_Receive+0x14c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800563a:	2600      	movs	r6, #0
 800563c:	e000      	b.n	8005640 <HAL_SPI_Receive+0x14c>
    errorcode = HAL_BUSY;
 800563e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005640:	2301      	movs	r3, #1
 8005642:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005646:	2300      	movs	r3, #0
 8005648:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800564c:	4630      	mov	r0, r6
 800564e:	b003      	add	sp, #12
 8005650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8005654:	2603      	movs	r6, #3
 8005656:	e7f3      	b.n	8005640 <HAL_SPI_Receive+0x14c>
 8005658:	2603      	movs	r6, #3
 800565a:	e7f1      	b.n	8005640 <HAL_SPI_Receive+0x14c>
          errorcode = HAL_TIMEOUT;
 800565c:	2603      	movs	r6, #3
 800565e:	e7ef      	b.n	8005640 <HAL_SPI_Receive+0x14c>
 8005660:	2603      	movs	r6, #3
 8005662:	e7ed      	b.n	8005640 <HAL_SPI_Receive+0x14c>
  __HAL_LOCK(hspi);
 8005664:	2602      	movs	r6, #2
 8005666:	e7f1      	b.n	800564c <HAL_SPI_Receive+0x158>

08005668 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005668:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	f102 030c 	add.w	r3, r2, #12
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	320c      	adds	r2, #12
 8005678:	e842 3100 	strex	r1, r3, [r2]
 800567c:	2900      	cmp	r1, #0
 800567e:	d1f3      	bne.n	8005668 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005680:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	f102 0314 	add.w	r3, r2, #20
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	3214      	adds	r2, #20
 8005690:	e842 3100 	strex	r1, r3, [r2]
 8005694:	2900      	cmp	r1, #0
 8005696:	d1f3      	bne.n	8005680 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005698:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800569a:	2b01      	cmp	r3, #1
 800569c:	d005      	beq.n	80056aa <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800569e:	2320      	movs	r3, #32
 80056a0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a4:	2300      	movs	r3, #0
 80056a6:	6303      	str	r3, [r0, #48]	; 0x30
}
 80056a8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	f102 030c 	add.w	r3, r2, #12
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	320c      	adds	r2, #12
 80056ba:	e842 3100 	strex	r1, r3, [r2]
 80056be:	2900      	cmp	r1, #0
 80056c0:	d1f3      	bne.n	80056aa <UART_EndRxTransfer+0x42>
 80056c2:	e7ec      	b.n	800569e <UART_EndRxTransfer+0x36>

080056c4 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b21      	cmp	r3, #33	; 0x21
 80056cc:	d001      	beq.n	80056d2 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80056ce:	2002      	movs	r0, #2
  }
}
 80056d0:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d2:	6883      	ldr	r3, [r0, #8]
 80056d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d8:	d017      	beq.n	800570a <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056da:	6a03      	ldr	r3, [r0, #32]
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	6202      	str	r2, [r0, #32]
 80056e0:	781a      	ldrb	r2, [r3, #0]
 80056e2:	6803      	ldr	r3, [r0, #0]
 80056e4:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80056e6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	84c3      	strh	r3, [r0, #38]	; 0x26
 80056f0:	b94b      	cbnz	r3, 8005706 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056f2:	6802      	ldr	r2, [r0, #0]
 80056f4:	68d3      	ldr	r3, [r2, #12]
 80056f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056fa:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056fc:	6802      	ldr	r2, [r0, #0]
 80056fe:	68d3      	ldr	r3, [r2, #12]
 8005700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005704:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8005706:	2000      	movs	r0, #0
 8005708:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570a:	6903      	ldr	r3, [r0, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e4      	bne.n	80056da <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005710:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	6802      	ldr	r2, [r0, #0]
 8005716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571a:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800571c:	6a03      	ldr	r3, [r0, #32]
 800571e:	3302      	adds	r3, #2
 8005720:	6203      	str	r3, [r0, #32]
 8005722:	e7e0      	b.n	80056e6 <UART_Transmit_IT+0x22>

08005724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005724:	b570      	push	{r4, r5, r6, lr}
 8005726:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005728:	6802      	ldr	r2, [r0, #0]
 800572a:	6913      	ldr	r3, [r2, #16]
 800572c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005730:	68c1      	ldr	r1, [r0, #12]
 8005732:	430b      	orrs	r3, r1
 8005734:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005736:	6883      	ldr	r3, [r0, #8]
 8005738:	6902      	ldr	r2, [r0, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	6942      	ldr	r2, [r0, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	69c2      	ldr	r2, [r0, #28]
 8005742:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8005744:	6801      	ldr	r1, [r0, #0]
 8005746:	68cb      	ldr	r3, [r1, #12]
 8005748:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800574c:	f023 030c 	bic.w	r3, r3, #12
 8005750:	4313      	orrs	r3, r2
 8005752:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005754:	6802      	ldr	r2, [r0, #0]
 8005756:	6953      	ldr	r3, [r2, #20]
 8005758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575c:	6981      	ldr	r1, [r0, #24]
 800575e:	430b      	orrs	r3, r1
 8005760:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005762:	6803      	ldr	r3, [r0, #0]
 8005764:	4a34      	ldr	r2, [pc, #208]	; (8005838 <UART_SetConfig+0x114>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d006      	beq.n	8005778 <UART_SetConfig+0x54>
 800576a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800576e:	4293      	cmp	r3, r2
 8005770:	d002      	beq.n	8005778 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005772:	f7ff f88f 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 8005776:	e001      	b.n	800577c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005778:	f7ff f89c 	bl	80048b4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800577c:	69e3      	ldr	r3, [r4, #28]
 800577e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005782:	d02a      	beq.n	80057da <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005784:	2600      	movs	r6, #0
 8005786:	1805      	adds	r5, r0, r0
 8005788:	eb46 0106 	adc.w	r1, r6, r6
 800578c:	182d      	adds	r5, r5, r0
 800578e:	eb46 0101 	adc.w	r1, r6, r1
 8005792:	00cb      	lsls	r3, r1, #3
 8005794:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005798:	00ea      	lsls	r2, r5, #3
 800579a:	4615      	mov	r5, r2
 800579c:	4619      	mov	r1, r3
 800579e:	6863      	ldr	r3, [r4, #4]
 80057a0:	009a      	lsls	r2, r3, #2
 80057a2:	0f9b      	lsrs	r3, r3, #30
 80057a4:	1828      	adds	r0, r5, r0
 80057a6:	eb46 0101 	adc.w	r1, r6, r1
 80057aa:	f7fa fd99 	bl	80002e0 <__aeabi_uldivmod>
 80057ae:	4d23      	ldr	r5, [pc, #140]	; (800583c <UART_SetConfig+0x118>)
 80057b0:	fba5 3200 	umull	r3, r2, r5, r0
 80057b4:	0951      	lsrs	r1, r2, #5
 80057b6:	2364      	movs	r3, #100	; 0x64
 80057b8:	fb03 0311 	mls	r3, r3, r1, r0
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	3332      	adds	r3, #50	; 0x32
 80057c0:	fba5 2303 	umull	r2, r3, r5, r3
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057ca:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	6821      	ldr	r1, [r4, #0]
 80057d4:	4413      	add	r3, r2
 80057d6:	608b      	str	r3, [r1, #8]
  }
}
 80057d8:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057da:	2600      	movs	r6, #0
 80057dc:	1805      	adds	r5, r0, r0
 80057de:	eb46 0106 	adc.w	r1, r6, r6
 80057e2:	182d      	adds	r5, r5, r0
 80057e4:	eb46 0101 	adc.w	r1, r6, r1
 80057e8:	00cb      	lsls	r3, r1, #3
 80057ea:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80057ee:	00ea      	lsls	r2, r5, #3
 80057f0:	4615      	mov	r5, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	6862      	ldr	r2, [r4, #4]
 80057f6:	4633      	mov	r3, r6
 80057f8:	1892      	adds	r2, r2, r2
 80057fa:	eb46 0303 	adc.w	r3, r6, r3
 80057fe:	1828      	adds	r0, r5, r0
 8005800:	eb46 0101 	adc.w	r1, r6, r1
 8005804:	f7fa fd6c 	bl	80002e0 <__aeabi_uldivmod>
 8005808:	4d0c      	ldr	r5, [pc, #48]	; (800583c <UART_SetConfig+0x118>)
 800580a:	fba5 3200 	umull	r3, r2, r5, r0
 800580e:	0951      	lsrs	r1, r2, #5
 8005810:	2364      	movs	r3, #100	; 0x64
 8005812:	fb03 0311 	mls	r3, r3, r1, r0
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	3332      	adds	r3, #50	; 0x32
 800581a:	fba5 2303 	umull	r2, r3, r5, r3
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	005a      	lsls	r2, r3, #1
 8005822:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005826:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	6821      	ldr	r1, [r4, #0]
 8005830:	4413      	add	r3, r2
 8005832:	608b      	str	r3, [r1, #8]
 8005834:	e7d0      	b.n	80057d8 <UART_SetConfig+0xb4>
 8005836:	bf00      	nop
 8005838:	40011000 	.word	0x40011000
 800583c:	51eb851f 	.word	0x51eb851f

08005840 <UART_WaitOnFlagUntilTimeout>:
{
 8005840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005844:	4605      	mov	r5, r0
 8005846:	460f      	mov	r7, r1
 8005848:	4616      	mov	r6, r2
 800584a:	4699      	mov	r9, r3
 800584c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005850:	682c      	ldr	r4, [r5, #0]
 8005852:	6824      	ldr	r4, [r4, #0]
 8005854:	ea37 0304 	bics.w	r3, r7, r4
 8005858:	bf0c      	ite	eq
 800585a:	2401      	moveq	r4, #1
 800585c:	2400      	movne	r4, #0
 800585e:	42b4      	cmp	r4, r6
 8005860:	d12d      	bne.n	80058be <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8005862:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005866:	d0f3      	beq.n	8005850 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005868:	f1b8 0f00 	cmp.w	r8, #0
 800586c:	d005      	beq.n	800587a <UART_WaitOnFlagUntilTimeout+0x3a>
 800586e:	f7fe f8c3 	bl	80039f8 <HAL_GetTick>
 8005872:	eba0 0009 	sub.w	r0, r0, r9
 8005876:	4540      	cmp	r0, r8
 8005878:	d9ea      	bls.n	8005850 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800587a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	f102 030c 	add.w	r3, r2, #12
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	320c      	adds	r2, #12
 800588a:	e842 3100 	strex	r1, r3, [r2]
 800588e:	2900      	cmp	r1, #0
 8005890:	d1f3      	bne.n	800587a <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005892:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	f102 0314 	add.w	r3, r2, #20
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	3214      	adds	r2, #20
 80058a2:	e842 3100 	strex	r1, r3, [r2]
 80058a6:	2900      	cmp	r1, #0
 80058a8:	d1f3      	bne.n	8005892 <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 80058aa:	2320      	movs	r3, #32
 80058ac:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058b0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80058b4:	2300      	movs	r3, #0
 80058b6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 80058ba:	2003      	movs	r0, #3
 80058bc:	e000      	b.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 80058be:	2000      	movs	r0, #0
}
 80058c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080058c4 <HAL_UART_Init>:
  if (huart == NULL)
 80058c4:	b358      	cbz	r0, 800591e <HAL_UART_Init+0x5a>
{
 80058c6:	b510      	push	{r4, lr}
 80058c8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80058ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80058ce:	b30b      	cbz	r3, 8005914 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80058d0:	2324      	movs	r3, #36	; 0x24
 80058d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	68d3      	ldr	r3, [r2, #12]
 80058da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058de:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80058e0:	4620      	mov	r0, r4
 80058e2:	f7ff ff1f 	bl	8005724 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e6:	6822      	ldr	r2, [r4, #0]
 80058e8:	6913      	ldr	r3, [r2, #16]
 80058ea:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80058ee:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	6953      	ldr	r3, [r2, #20]
 80058f4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80058f8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80058fa:	6822      	ldr	r2, [r4, #0]
 80058fc:	68d3      	ldr	r3, [r2, #12]
 80058fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005902:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005904:	2000      	movs	r0, #0
 8005906:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005908:	2320      	movs	r3, #32
 800590a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800590e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005912:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005914:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005918:	f7fd fe26 	bl	8003568 <HAL_UART_MspInit>
 800591c:	e7d8      	b.n	80058d0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800591e:	2001      	movs	r0, #1
}
 8005920:	4770      	bx	lr

08005922 <HAL_UART_Transmit>:
{
 8005922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800592a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b20      	cmp	r3, #32
 8005932:	d154      	bne.n	80059de <HAL_UART_Transmit+0xbc>
 8005934:	4604      	mov	r4, r0
 8005936:	460d      	mov	r5, r1
 8005938:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800593a:	2900      	cmp	r1, #0
 800593c:	d053      	beq.n	80059e6 <HAL_UART_Transmit+0xc4>
 800593e:	2a00      	cmp	r2, #0
 8005940:	d053      	beq.n	80059ea <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8005942:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d051      	beq.n	80059ee <HAL_UART_Transmit+0xcc>
 800594a:	2301      	movs	r3, #1
 800594c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005950:	2300      	movs	r3, #0
 8005952:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005954:	2321      	movs	r3, #33	; 0x21
 8005956:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800595a:	f7fe f84d 	bl	80039f8 <HAL_GetTick>
 800595e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005960:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8005964:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005968:	68a3      	ldr	r3, [r4, #8]
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596e:	d005      	beq.n	800597c <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8005970:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8005974:	2300      	movs	r3, #0
 8005976:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800597a:	e012      	b.n	80059a2 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800597c:	6923      	ldr	r3, [r4, #16]
 800597e:	b113      	cbz	r3, 8005986 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8005980:	f04f 0800 	mov.w	r8, #0
 8005984:	e7f6      	b.n	8005974 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8005986:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005988:	2500      	movs	r5, #0
 800598a:	e7f3      	b.n	8005974 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800598c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005990:	6822      	ldr	r2, [r4, #0]
 8005992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005996:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8005998:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800599a:	b292      	uxth	r2, r2
 800599c:	3a01      	subs	r2, #1
 800599e:	b292      	uxth	r2, r2
 80059a0:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059a2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	b173      	cbz	r3, 80059c6 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059a8:	9600      	str	r6, [sp, #0]
 80059aa:	463b      	mov	r3, r7
 80059ac:	2200      	movs	r2, #0
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7ff ff45 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 80059b6:	b9e0      	cbnz	r0, 80059f2 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80059b8:	2d00      	cmp	r5, #0
 80059ba:	d0e7      	beq.n	800598c <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059bc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059c4:	e7e8      	b.n	8005998 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059c6:	9600      	str	r6, [sp, #0]
 80059c8:	463b      	mov	r3, r7
 80059ca:	2200      	movs	r2, #0
 80059cc:	2140      	movs	r1, #64	; 0x40
 80059ce:	4620      	mov	r0, r4
 80059d0:	f7ff ff36 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 80059d4:	b978      	cbnz	r0, 80059f6 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80059d6:	2320      	movs	r3, #32
 80059d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80059dc:	e000      	b.n	80059e0 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80059de:	2002      	movs	r0, #2
}
 80059e0:	b002      	add	sp, #8
 80059e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80059e6:	2001      	movs	r0, #1
 80059e8:	e7fa      	b.n	80059e0 <HAL_UART_Transmit+0xbe>
 80059ea:	2001      	movs	r0, #1
 80059ec:	e7f8      	b.n	80059e0 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80059ee:	2002      	movs	r0, #2
 80059f0:	e7f6      	b.n	80059e0 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80059f2:	2003      	movs	r0, #3
 80059f4:	e7f4      	b.n	80059e0 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80059f6:	2003      	movs	r0, #3
 80059f8:	e7f2      	b.n	80059e0 <HAL_UART_Transmit+0xbe>

080059fa <HAL_UART_TxCpltCallback>:
}
 80059fa:	4770      	bx	lr

080059fc <UART_EndTransmit_IT>:
{
 80059fc:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059fe:	6801      	ldr	r1, [r0, #0]
 8005a00:	68ca      	ldr	r2, [r1, #12]
 8005a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a06:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8005a0e:	f7ff fff4 	bl	80059fa <HAL_UART_TxCpltCallback>
}
 8005a12:	2000      	movs	r0, #0
 8005a14:	bd08      	pop	{r3, pc}

08005a16 <HAL_UART_ErrorCallback>:
}
 8005a16:	4770      	bx	lr

08005a18 <UART_DMAAbortOnError>:
{
 8005a18:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a1a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a20:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005a22:	f7ff fff8 	bl	8005a16 <HAL_UART_ErrorCallback>
}
 8005a26:	bd08      	pop	{r3, pc}

08005a28 <HAL_UARTEx_RxEventCallback>:
}
 8005a28:	4770      	bx	lr

08005a2a <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a2a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b22      	cmp	r3, #34	; 0x22
 8005a32:	d167      	bne.n	8005b04 <UART_Receive_IT+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a34:	6883      	ldr	r3, [r0, #8]
 8005a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3a:	d04d      	beq.n	8005ad8 <UART_Receive_IT+0xae>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a3c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a42:	d004      	beq.n	8005a4e <UART_Receive_IT+0x24>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d154      	bne.n	8005af2 <UART_Receive_IT+0xc8>
 8005a48:	6903      	ldr	r3, [r0, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d151      	bne.n	8005af2 <UART_Receive_IT+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a4e:	6803      	ldr	r3, [r0, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8005a54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a56:	3301      	adds	r3, #1
 8005a58:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8005a5a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d14f      	bne.n	8005b08 <UART_Receive_IT+0xde>
{
 8005a68:	b500      	push	{lr}
 8005a6a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a6c:	6802      	ldr	r2, [r0, #0]
 8005a6e:	68d3      	ldr	r3, [r2, #12]
 8005a70:	f023 0320 	bic.w	r3, r3, #32
 8005a74:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a76:	6802      	ldr	r2, [r0, #0]
 8005a78:	68d3      	ldr	r3, [r2, #12]
 8005a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a7e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a80:	6802      	ldr	r2, [r0, #0]
 8005a82:	6953      	ldr	r3, [r2, #20]
 8005a84:	f023 0301 	bic.w	r3, r3, #1
 8005a88:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005a8a:	2320      	movs	r3, #32
 8005a8c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a90:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d133      	bne.n	8005afe <UART_Receive_IT+0xd4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a96:	2300      	movs	r3, #0
 8005a98:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a9a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	f102 030c 	add.w	r3, r2, #12
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	320c      	adds	r2, #12
 8005aaa:	e842 3100 	strex	r1, r3, [r2]
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	d1f3      	bne.n	8005a9a <UART_Receive_IT+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ab2:	6803      	ldr	r3, [r0, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	f012 0f10 	tst.w	r2, #16
 8005aba:	d006      	beq.n	8005aca <UART_Receive_IT+0xa0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005abc:	2200      	movs	r2, #0
 8005abe:	9201      	str	r2, [sp, #4]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	9201      	str	r2, [sp, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aca:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8005acc:	f7ff ffac 	bl	8005a28 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8005ad0:	2000      	movs	r0, #0
}
 8005ad2:	b003      	add	sp, #12
 8005ad4:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad8:	6902      	ldr	r2, [r0, #16]
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	d1ae      	bne.n	8005a3c <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ade:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ae0:	6803      	ldr	r3, [r0, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae8:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8005aea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005aec:	3302      	adds	r3, #2
 8005aee:	6283      	str	r3, [r0, #40]	; 0x28
 8005af0:	e7b3      	b.n	8005a5a <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005af2:	6803      	ldr	r3, [r0, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afa:	7013      	strb	r3, [r2, #0]
 8005afc:	e7aa      	b.n	8005a54 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8005afe:	f7fc ff43 	bl	8002988 <HAL_UART_RxCpltCallback>
 8005b02:	e7e5      	b.n	8005ad0 <UART_Receive_IT+0xa6>
    return HAL_BUSY;
 8005b04:	2002      	movs	r0, #2
 8005b06:	4770      	bx	lr
    return HAL_OK;
 8005b08:	2000      	movs	r0, #0
}
 8005b0a:	4770      	bx	lr

08005b0c <HAL_UART_IRQHandler>:
{
 8005b0c:	b530      	push	{r4, r5, lr}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b12:	6802      	ldr	r2, [r0, #0]
 8005b14:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b16:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b18:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8005b1a:	f013 050f 	ands.w	r5, r3, #15
 8005b1e:	d105      	bne.n	8005b2c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b20:	f013 0f20 	tst.w	r3, #32
 8005b24:	d002      	beq.n	8005b2c <HAL_UART_IRQHandler+0x20>
 8005b26:	f010 0f20 	tst.w	r0, #32
 8005b2a:	d119      	bne.n	8005b60 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b2c:	b12d      	cbz	r5, 8005b3a <HAL_UART_IRQHandler+0x2e>
 8005b2e:	f011 0101 	ands.w	r1, r1, #1
 8005b32:	d119      	bne.n	8005b68 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b34:	f410 7f90 	tst.w	r0, #288	; 0x120
 8005b38:	d116      	bne.n	8005b68 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b3c:	2901      	cmp	r1, #1
 8005b3e:	d07d      	beq.n	8005c3c <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b44:	d003      	beq.n	8005b4e <HAL_UART_IRQHandler+0x42>
 8005b46:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005b4a:	f040 8115 	bne.w	8005d78 <HAL_UART_IRQHandler+0x26c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b4e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b52:	d003      	beq.n	8005b5c <HAL_UART_IRQHandler+0x50>
 8005b54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b58:	f040 8112 	bne.w	8005d80 <HAL_UART_IRQHandler+0x274>
}
 8005b5c:	b003      	add	sp, #12
 8005b5e:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8005b60:	4620      	mov	r0, r4
 8005b62:	f7ff ff62 	bl	8005a2a <UART_Receive_IT>
      return;
 8005b66:	e7f9      	b.n	8005b5c <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b68:	f013 0f01 	tst.w	r3, #1
 8005b6c:	d006      	beq.n	8005b7c <HAL_UART_IRQHandler+0x70>
 8005b6e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005b72:	d003      	beq.n	8005b7c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b74:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b7c:	f013 0f04 	tst.w	r3, #4
 8005b80:	d004      	beq.n	8005b8c <HAL_UART_IRQHandler+0x80>
 8005b82:	b119      	cbz	r1, 8005b8c <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005b86:	f042 0202 	orr.w	r2, r2, #2
 8005b8a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b8c:	f013 0f02 	tst.w	r3, #2
 8005b90:	d004      	beq.n	8005b9c <HAL_UART_IRQHandler+0x90>
 8005b92:	b119      	cbz	r1, 8005b9c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b94:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005b96:	f042 0204 	orr.w	r2, r2, #4
 8005b9a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b9c:	f013 0f08 	tst.w	r3, #8
 8005ba0:	d007      	beq.n	8005bb2 <HAL_UART_IRQHandler+0xa6>
 8005ba2:	f010 0f20 	tst.w	r0, #32
 8005ba6:	d100      	bne.n	8005baa <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ba8:	b119      	cbz	r1, 8005bb2 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005baa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005bac:	f042 0208 	orr.w	r2, r2, #8
 8005bb0:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	d0d1      	beq.n	8005b5c <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bb8:	f013 0f20 	tst.w	r3, #32
 8005bbc:	d002      	beq.n	8005bc4 <HAL_UART_IRQHandler+0xb8>
 8005bbe:	f010 0f20 	tst.w	r0, #32
 8005bc2:	d129      	bne.n	8005c18 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bcc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005bce:	f012 0f08 	tst.w	r2, #8
 8005bd2:	d100      	bne.n	8005bd6 <HAL_UART_IRQHandler+0xca>
 8005bd4:	b363      	cbz	r3, 8005c30 <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f7ff fd46 	bl	8005668 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005be4:	d020      	beq.n	8005c28 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	f102 0314 	add.w	r3, r2, #20
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	3214      	adds	r2, #20
 8005bf6:	e842 3100 	strex	r1, r3, [r2]
 8005bfa:	2900      	cmp	r1, #0
 8005bfc:	d1f3      	bne.n	8005be6 <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 8005bfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c00:	b173      	cbz	r3, 8005c20 <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c02:	4a61      	ldr	r2, [pc, #388]	; (8005d88 <HAL_UART_IRQHandler+0x27c>)
 8005c04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c06:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005c08:	f7fe fbb2 	bl	8004370 <HAL_DMA_Abort_IT>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d0a5      	beq.n	8005b5c <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c10:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005c12:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005c14:	4798      	blx	r3
 8005c16:	e7a1      	b.n	8005b5c <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f7ff ff06 	bl	8005a2a <UART_Receive_IT>
 8005c1e:	e7d1      	b.n	8005bc4 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8005c20:	4620      	mov	r0, r4
 8005c22:	f7ff fef8 	bl	8005a16 <HAL_UART_ErrorCallback>
 8005c26:	e799      	b.n	8005b5c <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f7ff fef4 	bl	8005a16 <HAL_UART_ErrorCallback>
 8005c2e:	e795      	b.n	8005b5c <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8005c30:	4620      	mov	r0, r4
 8005c32:	f7ff fef0 	bl	8005a16 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8005c3a:	e78f      	b.n	8005b5c <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c3c:	f013 0f10 	tst.w	r3, #16
 8005c40:	f43f af7e 	beq.w	8005b40 <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c44:	f010 0f10 	tst.w	r0, #16
 8005c48:	f43f af7a 	beq.w	8005b40 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	6813      	ldr	r3, [r2, #0]
 8005c52:	9301      	str	r3, [sp, #4]
 8005c54:	6853      	ldr	r3, [r2, #4]
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5a:	6953      	ldr	r3, [r2, #20]
 8005c5c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c60:	d050      	beq.n	8005d04 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c64:	6813      	ldr	r3, [r2, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f43f af76 	beq.w	8005b5c <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c70:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8005c72:	4299      	cmp	r1, r3
 8005c74:	f67f af72 	bls.w	8005b5c <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8005c78:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c7a:	69d3      	ldr	r3, [r2, #28]
 8005c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c80:	d037      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x1e6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c82:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	f102 030c 	add.w	r3, r2, #12
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	320c      	adds	r2, #12
 8005c92:	e842 3100 	strex	r1, r3, [r2]
 8005c96:	2900      	cmp	r1, #0
 8005c98:	d1f3      	bne.n	8005c82 <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	f102 0314 	add.w	r3, r2, #20
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	3214      	adds	r2, #20
 8005caa:	e842 3100 	strex	r1, r3, [r2]
 8005cae:	2900      	cmp	r1, #0
 8005cb0:	d1f3      	bne.n	8005c9a <HAL_UART_IRQHandler+0x18e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	f102 0314 	add.w	r3, r2, #20
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	3214      	adds	r2, #20
 8005cc2:	e842 3100 	strex	r1, r3, [r2]
 8005cc6:	2900      	cmp	r1, #0
 8005cc8:	d1f3      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x1a6>
          huart->RxState = HAL_UART_STATE_READY;
 8005cca:	2320      	movs	r3, #32
 8005ccc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	f102 030c 	add.w	r3, r2, #12
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	320c      	adds	r2, #12
 8005ce4:	e842 3100 	strex	r1, r3, [r2]
 8005ce8:	2900      	cmp	r1, #0
 8005cea:	d1f3      	bne.n	8005cd4 <HAL_UART_IRQHandler+0x1c8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005cee:	f7fe faf5 	bl	80042dc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cf2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8005cf4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	1ac9      	subs	r1, r1, r3
 8005cfa:	b289      	uxth	r1, r1
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f7ff fe93 	bl	8005a28 <HAL_UARTEx_RxEventCallback>
      return;
 8005d02:	e72b      	b.n	8005b5c <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d04:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8005d06:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	1ac9      	subs	r1, r1, r3
 8005d0c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005d0e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f43f af22 	beq.w	8005b5c <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	f43f af1f 	beq.w	8005b5c <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d1e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	f102 030c 	add.w	r3, r2, #12
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	320c      	adds	r2, #12
 8005d2e:	e842 3000 	strex	r0, r3, [r2]
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d1f3      	bne.n	8005d1e <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d36:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	f102 0314 	add.w	r3, r2, #20
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	3214      	adds	r2, #20
 8005d46:	e842 3000 	strex	r0, r3, [r2]
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d1f3      	bne.n	8005d36 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	2320      	movs	r3, #32
 8005d50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d54:	2300      	movs	r3, #0
 8005d56:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d58:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	f102 030c 	add.w	r3, r2, #12
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	320c      	adds	r2, #12
 8005d68:	e842 3000 	strex	r0, r3, [r2]
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d1f3      	bne.n	8005d58 <HAL_UART_IRQHandler+0x24c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d70:	4620      	mov	r0, r4
 8005d72:	f7ff fe59 	bl	8005a28 <HAL_UARTEx_RxEventCallback>
      return;
 8005d76:	e6f1      	b.n	8005b5c <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f7ff fca3 	bl	80056c4 <UART_Transmit_IT>
    return;
 8005d7e:	e6ed      	b.n	8005b5c <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8005d80:	4620      	mov	r0, r4
 8005d82:	f7ff fe3b 	bl	80059fc <UART_EndTransmit_IT>
    return;
 8005d86:	e6e9      	b.n	8005b5c <HAL_UART_IRQHandler+0x50>
 8005d88:	08005a19 	.word	0x08005a19

08005d8c <UART_Start_Receive_IT>:
{
 8005d8c:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8005d8e:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d90:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005d92:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d94:	2000      	movs	r0, #0
 8005d96:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d98:	2222      	movs	r2, #34	; 0x22
 8005d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8005d9e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	68ca      	ldr	r2, [r1, #12]
 8005da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005daa:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dac:	6819      	ldr	r1, [r3, #0]
 8005dae:	694a      	ldr	r2, [r1, #20]
 8005db0:	f042 0201 	orr.w	r2, r2, #1
 8005db4:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68d3      	ldr	r3, [r2, #12]
 8005dba:	f043 0320 	orr.w	r3, r3, #32
 8005dbe:	60d3      	str	r3, [r2, #12]
}
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_UART_Receive_IT>:
{
 8005dc2:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dc4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d10d      	bne.n	8005dea <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8005dce:	b171      	cbz	r1, 8005dee <HAL_UART_Receive_IT+0x2c>
 8005dd0:	b17a      	cbz	r2, 8005df2 <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8005dd2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d00d      	beq.n	8005df6 <HAL_UART_Receive_IT+0x34>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de0:	2300      	movs	r3, #0
 8005de2:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 8005de4:	f7ff ffd2 	bl	8005d8c <UART_Start_Receive_IT>
 8005de8:	e000      	b.n	8005dec <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8005dea:	2002      	movs	r0, #2
}
 8005dec:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8005dee:	2001      	movs	r0, #1
 8005df0:	e7fc      	b.n	8005dec <HAL_UART_Receive_IT+0x2a>
 8005df2:	2001      	movs	r0, #1
 8005df4:	e7fa      	b.n	8005dec <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8005df6:	2002      	movs	r0, #2
 8005df8:	e7f8      	b.n	8005dec <HAL_UART_Receive_IT+0x2a>
	...

08005dfc <loopback_udps>:
   return 1;
}


int32_t loopback_udps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8005dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	4605      	mov	r5, r0
 8005e04:	460e      	mov	r6, r1
 8005e06:	4617      	mov	r7, r2
   int32_t  ret;
   uint16_t size, sentsize;
   uint8_t  destip[4];
   uint16_t destport;

   switch(getSn_SR(sn))
 8005e08:	0080      	lsls	r0, r0, #2
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	00c0      	lsls	r0, r0, #3
 8005e0e:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8005e12:	f000 f865 	bl	8005ee0 <WIZCHIP_READ>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d041      	beq.n	8005e9e <loopback_udps+0xa2>
 8005e1a:	2822      	cmp	r0, #34	; 0x22
 8005e1c:	d14f      	bne.n	8005ebe <loopback_udps+0xc2>
   {
      case SOCK_UDP :
         if((size = getSn_RX_RSR(sn)) > 0)
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f000 f96d 	bl	80060fe <getSn_RX_RSR>
 8005e24:	4602      	mov	r2, r0
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d04e      	beq.n	8005ec8 <loopback_udps+0xcc>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8005e2a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8005e2e:	d901      	bls.n	8005e34 <loopback_udps+0x38>
 8005e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
            ret = recvfrom(sn, buf, size, destip, (uint16_t*)&destport);
 8005e34:	f10d 030a 	add.w	r3, sp, #10
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	ab03      	add	r3, sp, #12
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f000 fbaa 	bl	8006598 <recvfrom>
            if(ret <= 0)
 8005e44:	1e04      	subs	r4, r0, #0
 8005e46:	dd1c      	ble.n	8005e82 <loopback_udps+0x86>
#ifdef _LOOPBACK_DEBUG_
               printf("%d: recvfrom error. %ld\r\n",sn,ret);
#endif
               return ret;
            }
            printf("[JCNET : UDP] Rx = %d\n",ret);
 8005e48:	4621      	mov	r1, r4
 8005e4a:	4820      	ldr	r0, [pc, #128]	; (8005ecc <loopback_udps+0xd0>)
 8005e4c:	f002 f9ae 	bl	80081ac <iprintf>
            size = (uint16_t) ret;
 8005e50:	fa1f f884 	uxth.w	r8, r4
            sentsize = 0;
 8005e54:	2700      	movs	r7, #0
            while(sentsize != size)
 8005e56:	4547      	cmp	r7, r8
 8005e58:	d01f      	beq.n	8005e9a <loopback_udps+0x9e>
            {
               ret = sendto(sn, buf+sentsize, size-sentsize, destip, destport);
 8005e5a:	eba8 0207 	sub.w	r2, r8, r7
 8005e5e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	ab03      	add	r3, sp, #12
 8005e66:	b292      	uxth	r2, r2
 8005e68:	19f1      	adds	r1, r6, r7
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 fae4 	bl	8006438 <sendto>
               if(ret < 0)
 8005e70:	1e04      	subs	r4, r0, #0
 8005e72:	db0c      	blt.n	8005e8e <loopback_udps+0x92>
#ifdef _LOOPBACK_DEBUG_
                  printf("%d: sendto error. %ld\r\n",sn,ret);
#endif
                  return ret;
               }
               printf("[JCNET : UDP] Tx = %d\n",ret);
 8005e74:	4621      	mov	r1, r4
 8005e76:	4816      	ldr	r0, [pc, #88]	; (8005ed0 <loopback_udps+0xd4>)
 8005e78:	f002 f998 	bl	80081ac <iprintf>
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8005e7c:	443c      	add	r4, r7
 8005e7e:	b2a7      	uxth	r7, r4
 8005e80:	e7e9      	b.n	8005e56 <loopback_udps+0x5a>
               printf("%d: recvfrom error. %ld\r\n",sn,ret);
 8005e82:	4622      	mov	r2, r4
 8005e84:	4629      	mov	r1, r5
 8005e86:	4813      	ldr	r0, [pc, #76]	; (8005ed4 <loopback_udps+0xd8>)
 8005e88:	f002 f990 	bl	80081ac <iprintf>
               return ret;
 8005e8c:	e018      	b.n	8005ec0 <loopback_udps+0xc4>
                  printf("%d: sendto error. %ld\r\n",sn,ret);
 8005e8e:	4622      	mov	r2, r4
 8005e90:	4629      	mov	r1, r5
 8005e92:	4811      	ldr	r0, [pc, #68]	; (8005ed8 <loopback_udps+0xdc>)
 8005e94:	f002 f98a 	bl	80081ac <iprintf>
                  return ret;
 8005e98:	e012      	b.n	8005ec0 <loopback_udps+0xc4>
#endif
         break;
      default :
         break;
   }
   return 1;
 8005e9a:	2401      	movs	r4, #1
 8005e9c:	e010      	b.n	8005ec0 <loopback_udps+0xc4>
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	463a      	mov	r2, r7
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f000 fa15 	bl	80062d4 <socket>
 8005eaa:	4604      	mov	r4, r0
 8005eac:	4285      	cmp	r5, r0
 8005eae:	d107      	bne.n	8005ec0 <loopback_udps+0xc4>
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
 8005eb0:	463a      	mov	r2, r7
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	4809      	ldr	r0, [pc, #36]	; (8005edc <loopback_udps+0xe0>)
 8005eb6:	f002 f979 	bl	80081ac <iprintf>
   return 1;
 8005eba:	2401      	movs	r4, #1
         break;
 8005ebc:	e000      	b.n	8005ec0 <loopback_udps+0xc4>
   switch(getSn_SR(sn))
 8005ebe:	2401      	movs	r4, #1
}
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	b004      	add	sp, #16
 8005ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   return 1;
 8005ec8:	2401      	movs	r4, #1
 8005eca:	e7f9      	b.n	8005ec0 <loopback_udps+0xc4>
 8005ecc:	0800a410 	.word	0x0800a410
 8005ed0:	0800a440 	.word	0x0800a440
 8005ed4:	0800a3f4 	.word	0x0800a3f4
 8005ed8:	0800a428 	.word	0x0800a428
 8005edc:	0800a458 	.word	0x0800a458

08005ee0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8005ee0:	b530      	push	{r4, r5, lr}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	4604      	mov	r4, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8005ee6:	4d16      	ldr	r5, [pc, #88]	; (8005f40 <WIZCHIP_READ+0x60>)
 8005ee8:	68eb      	ldr	r3, [r5, #12]
 8005eea:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005eec:	696b      	ldr	r3, [r5, #20]
 8005eee:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005ef0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ef2:	b16b      	cbz	r3, 8005f10 <WIZCHIP_READ+0x30>
 8005ef4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005ef6:	b15b      	cbz	r3, 8005f10 <WIZCHIP_READ+0x30>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005ef8:	0c22      	lsrs	r2, r4, #16
 8005efa:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005efe:	0a22      	lsrs	r2, r4, #8
 8005f00:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005f04:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005f08:	2103      	movs	r1, #3
 8005f0a:	a801      	add	r0, sp, #4
 8005f0c:	4798      	blx	r3
 8005f0e:	e00b      	b.n	8005f28 <WIZCHIP_READ+0x48>
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005f10:	4d0b      	ldr	r5, [pc, #44]	; (8005f40 <WIZCHIP_READ+0x60>)
 8005f12:	6a2b      	ldr	r3, [r5, #32]
 8005f14:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8005f18:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005f1a:	6a2b      	ldr	r3, [r5, #32]
 8005f1c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8005f20:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005f22:	6a2b      	ldr	r3, [r5, #32]
 8005f24:	b2e0      	uxtb	r0, r4
 8005f26:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8005f28:	4d05      	ldr	r5, [pc, #20]	; (8005f40 <WIZCHIP_READ+0x60>)
 8005f2a:	69eb      	ldr	r3, [r5, #28]
 8005f2c:	4798      	blx	r3
 8005f2e:	4604      	mov	r4, r0

   WIZCHIP.CS._deselect();
 8005f30:	69ab      	ldr	r3, [r5, #24]
 8005f32:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005f34:	692b      	ldr	r3, [r5, #16]
 8005f36:	4798      	blx	r3
   return ret;
}
 8005f38:	4620      	mov	r0, r4
 8005f3a:	b003      	add	sp, #12
 8005f3c:	bd30      	pop	{r4, r5, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000088 	.word	0x20000088

08005f44 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	4604      	mov	r4, r0
 8005f4a:	460e      	mov	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8005f4c:	4d16      	ldr	r5, [pc, #88]	; (8005fa8 <WIZCHIP_WRITE+0x64>)
 8005f4e:	68eb      	ldr	r3, [r5, #12]
 8005f50:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005f52:	696b      	ldr	r3, [r5, #20]
 8005f54:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8005f56:	f044 0404 	orr.w	r4, r4, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005f5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005f5c:	b1a3      	cbz	r3, 8005f88 <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005f5e:	0c22      	lsrs	r2, r4, #16
 8005f60:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005f64:	0a22      	lsrs	r2, r4, #8
 8005f66:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005f6a:	f88d 4006 	strb.w	r4, [sp, #6]
		spi_data[3] = wb;
 8005f6e:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8005f72:	2104      	movs	r1, #4
 8005f74:	eb0d 0001 	add.w	r0, sp, r1
 8005f78:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005f7a:	4c0b      	ldr	r4, [pc, #44]	; (8005fa8 <WIZCHIP_WRITE+0x64>)
 8005f7c:	69a3      	ldr	r3, [r4, #24]
 8005f7e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	4798      	blx	r3
}
 8005f84:	b002      	add	sp, #8
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005f88:	6a2b      	ldr	r3, [r5, #32]
 8005f8a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8005f8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005f90:	6a2b      	ldr	r3, [r5, #32]
 8005f92:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8005f96:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005f98:	6a2b      	ldr	r3, [r5, #32]
 8005f9a:	b2e0      	uxtb	r0, r4
 8005f9c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8005f9e:	6a2b      	ldr	r3, [r5, #32]
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	4798      	blx	r3
 8005fa4:	e7e9      	b.n	8005f7a <WIZCHIP_WRITE+0x36>
 8005fa6:	bf00      	nop
 8005fa8:	20000088 	.word	0x20000088

08005fac <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	460e      	mov	r6, r1
 8005fb4:	4615      	mov	r5, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8005fb6:	4f1b      	ldr	r7, [pc, #108]	; (8006024 <WIZCHIP_READ_BUF+0x78>)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	b193      	cbz	r3, 8005fea <WIZCHIP_READ_BUF+0x3e>
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	b183      	cbz	r3, 8005fea <WIZCHIP_READ_BUF+0x3e>
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005fc8:	0c22      	lsrs	r2, r4, #16
 8005fca:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005fce:	0a22      	lsrs	r2, r4, #8
 8005fd0:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005fd4:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005fd8:	2103      	movs	r1, #3
 8005fda:	a801      	add	r0, sp, #4
 8005fdc:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8005fde:	4b11      	ldr	r3, [pc, #68]	; (8006024 <WIZCHIP_READ_BUF+0x78>)
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	4798      	blx	r3
 8005fe8:	e015      	b.n	8006016 <WIZCHIP_READ_BUF+0x6a>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005fea:	4f0e      	ldr	r7, [pc, #56]	; (8006024 <WIZCHIP_READ_BUF+0x78>)
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8005ff2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8005ffa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	b2e0      	uxtb	r0, r4
 8006000:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8006002:	2400      	movs	r4, #0
 8006004:	e005      	b.n	8006012 <WIZCHIP_READ_BUF+0x66>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8006006:	4b07      	ldr	r3, [pc, #28]	; (8006024 <WIZCHIP_READ_BUF+0x78>)
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	4798      	blx	r3
 800600c:	5530      	strb	r0, [r6, r4]
		for(i = 0; i < len; i++)
 800600e:	3401      	adds	r4, #1
 8006010:	b2a4      	uxth	r4, r4
 8006012:	42ac      	cmp	r4, r5
 8006014:	d3f7      	bcc.n	8006006 <WIZCHIP_READ_BUF+0x5a>
   }

   WIZCHIP.CS._deselect();
 8006016:	4c03      	ldr	r4, [pc, #12]	; (8006024 <WIZCHIP_READ_BUF+0x78>)
 8006018:	69a3      	ldr	r3, [r4, #24]
 800601a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800601c:	6923      	ldr	r3, [r4, #16]
 800601e:	4798      	blx	r3
}
 8006020:	b003      	add	sp, #12
 8006022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006024:	20000088 	.word	0x20000088

08006028 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8006028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602a:	b083      	sub	sp, #12
 800602c:	4604      	mov	r4, r0
 800602e:	460e      	mov	r6, r1
 8006030:	4615      	mov	r5, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8006032:	4f1a      	ldr	r7, [pc, #104]	; (800609c <WIZCHIP_WRITE_BUF+0x74>)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800603c:	f044 0404 	orr.w	r4, r4, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	b1b3      	cbz	r3, 8006072 <WIZCHIP_WRITE_BUF+0x4a>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006044:	0c22      	lsrs	r2, r4, #16
 8006046:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800604a:	0a22      	lsrs	r2, r4, #8
 800604c:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006050:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8006054:	2103      	movs	r1, #3
 8006056:	a801      	add	r0, sp, #4
 8006058:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800605a:	4b10      	ldr	r3, [pc, #64]	; (800609c <WIZCHIP_WRITE_BUF+0x74>)
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	4629      	mov	r1, r5
 8006060:	4630      	mov	r0, r6
 8006062:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8006064:	4c0d      	ldr	r4, [pc, #52]	; (800609c <WIZCHIP_WRITE_BUF+0x74>)
 8006066:	69a3      	ldr	r3, [r4, #24]
 8006068:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	4798      	blx	r3
}
 800606e:	b003      	add	sp, #12
 8006070:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8006078:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8006080:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	b2e0      	uxtb	r0, r4
 8006086:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8006088:	2400      	movs	r4, #0
 800608a:	42ac      	cmp	r4, r5
 800608c:	d2ea      	bcs.n	8006064 <WIZCHIP_WRITE_BUF+0x3c>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800608e:	4b03      	ldr	r3, [pc, #12]	; (800609c <WIZCHIP_WRITE_BUF+0x74>)
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	5d30      	ldrb	r0, [r6, r4]
 8006094:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8006096:	3401      	adds	r4, #1
 8006098:	b2a4      	uxth	r4, r4
 800609a:	e7f6      	b.n	800608a <WIZCHIP_WRITE_BUF+0x62>
 800609c:	20000088 	.word	0x20000088

080060a0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80060a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a4:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 80060a6:	2500      	movs	r5, #0
 80060a8:	e00d      	b.n	80060c6 <getSn_TX_FSR+0x26>
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80060aa:	4630      	mov	r0, r6
 80060ac:	f7ff ff18 	bl	8005ee0 <WIZCHIP_READ>
 80060b0:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80060b2:	022d      	lsls	r5, r5, #8
 80060b4:	b2ad      	uxth	r5, r5
 80060b6:	4640      	mov	r0, r8
 80060b8:	f7ff ff12 	bl	8005ee0 <WIZCHIP_READ>
 80060bc:	fa15 f580 	uxtah	r5, r5, r0
 80060c0:	b2ad      	uxth	r5, r5
      }
   }while (val != val1);
 80060c2:	42a5      	cmp	r5, r4
 80060c4:	d018      	beq.n	80060f8 <getSn_TX_FSR+0x58>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80060c6:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80060ca:	f108 0801 	add.w	r8, r8, #1
 80060ce:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80060d2:	f508 5600 	add.w	r6, r8, #8192	; 0x2000
 80060d6:	4630      	mov	r0, r6
 80060d8:	f7ff ff02 	bl	8005ee0 <WIZCHIP_READ>
 80060dc:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80060de:	0224      	lsls	r4, r4, #8
 80060e0:	b2a4      	uxth	r4, r4
 80060e2:	f508 5804 	add.w	r8, r8, #8448	; 0x2100
 80060e6:	4640      	mov	r0, r8
 80060e8:	f7ff fefa 	bl	8005ee0 <WIZCHIP_READ>
 80060ec:	fa14 f480 	uxtah	r4, r4, r0
 80060f0:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 80060f2:	2c00      	cmp	r4, #0
 80060f4:	d0e5      	beq.n	80060c2 <getSn_TX_FSR+0x22>
 80060f6:	e7d8      	b.n	80060aa <getSn_TX_FSR+0xa>
   return val;
}
 80060f8:	4628      	mov	r0, r5
 80060fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080060fe <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80060fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006102:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 8006104:	2500      	movs	r5, #0
 8006106:	e00d      	b.n	8006124 <getSn_RX_RSR+0x26>
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8006108:	4630      	mov	r0, r6
 800610a:	f7ff fee9 	bl	8005ee0 <WIZCHIP_READ>
 800610e:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8006110:	022d      	lsls	r5, r5, #8
 8006112:	b2ad      	uxth	r5, r5
 8006114:	4640      	mov	r0, r8
 8006116:	f7ff fee3 	bl	8005ee0 <WIZCHIP_READ>
 800611a:	fa15 f580 	uxtah	r5, r5, r0
 800611e:	b2ad      	uxth	r5, r5
      }
   }while (val != val1);
 8006120:	42a5      	cmp	r5, r4
 8006122:	d018      	beq.n	8006156 <getSn_RX_RSR+0x58>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8006124:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8006128:	f108 0801 	add.w	r8, r8, #1
 800612c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8006130:	f508 5618 	add.w	r6, r8, #9728	; 0x2600
 8006134:	4630      	mov	r0, r6
 8006136:	f7ff fed3 	bl	8005ee0 <WIZCHIP_READ>
 800613a:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800613c:	0224      	lsls	r4, r4, #8
 800613e:	b2a4      	uxth	r4, r4
 8006140:	f508 581c 	add.w	r8, r8, #9984	; 0x2700
 8006144:	4640      	mov	r0, r8
 8006146:	f7ff fecb 	bl	8005ee0 <WIZCHIP_READ>
 800614a:	fa14 f480 	uxtah	r4, r4, r0
 800614e:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 8006150:	2c00      	cmp	r4, #0
 8006152:	d0e5      	beq.n	8006120 <getSn_RX_RSR+0x22>
 8006154:	e7d8      	b.n	8006108 <getSn_RX_RSR+0xa>
   return val;
}
 8006156:	4628      	mov	r0, r5
 8006158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800615c <wiz_send_data>:
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 800615c:	b902      	cbnz	r2, 8006160 <wiz_send_data+0x4>
 800615e:	4770      	bx	lr
{
 8006160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006164:	460f      	mov	r7, r1
 8006166:	4690      	mov	r8, r2
   ptr = getSn_TX_WR(sn);
 8006168:	0084      	lsls	r4, r0, #2
 800616a:	1c65      	adds	r5, r4, #1
 800616c:	00ed      	lsls	r5, r5, #3
 800616e:	f505 5910 	add.w	r9, r5, #9216	; 0x2400
 8006172:	4648      	mov	r0, r9
 8006174:	f7ff feb4 	bl	8005ee0 <WIZCHIP_READ>
 8006178:	b286      	uxth	r6, r0
 800617a:	0236      	lsls	r6, r6, #8
 800617c:	b2b6      	uxth	r6, r6
 800617e:	f505 5514 	add.w	r5, r5, #9472	; 0x2500
 8006182:	4628      	mov	r0, r5
 8006184:	f7ff feac 	bl	8005ee0 <WIZCHIP_READ>
 8006188:	fa16 f680 	uxtah	r6, r6, r0
 800618c:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800618e:	1ca0      	adds	r0, r4, #2
 8006190:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8006192:	4642      	mov	r2, r8
 8006194:	4639      	mov	r1, r7
 8006196:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 800619a:	f7ff ff45 	bl	8006028 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800619e:	eb08 0106 	add.w	r1, r8, r6
 80061a2:	b28c      	uxth	r4, r1
   setSn_TX_WR(sn,ptr);
 80061a4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80061a8:	4648      	mov	r0, r9
 80061aa:	f7ff fecb 	bl	8005f44 <WIZCHIP_WRITE>
 80061ae:	b2e1      	uxtb	r1, r4
 80061b0:	4628      	mov	r0, r5
 80061b2:	f7ff fec7 	bl	8005f44 <WIZCHIP_WRITE>
}
 80061b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080061ba <wiz_recv_data>:
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 80061ba:	b902      	cbnz	r2, 80061be <wiz_recv_data+0x4>
 80061bc:	4770      	bx	lr
{
 80061be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061c2:	460f      	mov	r7, r1
 80061c4:	4690      	mov	r8, r2
   ptr = getSn_RX_RD(sn);
 80061c6:	0084      	lsls	r4, r0, #2
 80061c8:	1c65      	adds	r5, r4, #1
 80061ca:	00ed      	lsls	r5, r5, #3
 80061cc:	f505 5920 	add.w	r9, r5, #10240	; 0x2800
 80061d0:	4648      	mov	r0, r9
 80061d2:	f7ff fe85 	bl	8005ee0 <WIZCHIP_READ>
 80061d6:	b286      	uxth	r6, r0
 80061d8:	0236      	lsls	r6, r6, #8
 80061da:	b2b6      	uxth	r6, r6
 80061dc:	f505 5524 	add.w	r5, r5, #10496	; 0x2900
 80061e0:	4628      	mov	r0, r5
 80061e2:	f7ff fe7d 	bl	8005ee0 <WIZCHIP_READ>
 80061e6:	fa16 f680 	uxtah	r6, r6, r0
 80061ea:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80061ec:	1ce0      	adds	r0, r4, #3
 80061ee:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80061f0:	4642      	mov	r2, r8
 80061f2:	4639      	mov	r1, r7
 80061f4:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 80061f8:	f7ff fed8 	bl	8005fac <WIZCHIP_READ_BUF>
   ptr += len;
 80061fc:	eb08 0106 	add.w	r1, r8, r6
 8006200:	b28c      	uxth	r4, r1
   
   setSn_RX_RD(sn,ptr);
 8006202:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8006206:	4648      	mov	r0, r9
 8006208:	f7ff fe9c 	bl	8005f44 <WIZCHIP_WRITE>
 800620c:	b2e1      	uxtb	r1, r4
 800620e:	4628      	mov	r0, r5
 8006210:	f7ff fe98 	bl	8005f44 <WIZCHIP_WRITE>
}
 8006214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006218 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	460e      	mov	r6, r1
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
 800621c:	0084      	lsls	r4, r0, #2
 800621e:	3401      	adds	r4, #1
 8006220:	00e4      	lsls	r4, r4, #3
 8006222:	f504 5720 	add.w	r7, r4, #10240	; 0x2800
 8006226:	4638      	mov	r0, r7
 8006228:	f7ff fe5a 	bl	8005ee0 <WIZCHIP_READ>
 800622c:	b285      	uxth	r5, r0
 800622e:	022d      	lsls	r5, r5, #8
 8006230:	b2ad      	uxth	r5, r5
 8006232:	f504 5424 	add.w	r4, r4, #10496	; 0x2900
 8006236:	4620      	mov	r0, r4
 8006238:	f7ff fe52 	bl	8005ee0 <WIZCHIP_READ>
 800623c:	fa15 f180 	uxtah	r1, r5, r0
   ptr += len;
 8006240:	fa16 f181 	uxtah	r1, r6, r1
 8006244:	b28d      	uxth	r5, r1
   setSn_RX_RD(sn,ptr);
 8006246:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800624a:	4638      	mov	r0, r7
 800624c:	f7ff fe7a 	bl	8005f44 <WIZCHIP_WRITE>
 8006250:	b2e9      	uxtb	r1, r5
 8006252:	4620      	mov	r0, r4
 8006254:	f7ff fe76 	bl	8005f44 <WIZCHIP_WRITE>
}
 8006258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800625c <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 800625c:	2808      	cmp	r0, #8
 800625e:	d902      	bls.n	8006266 <close+0xa>
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
	sock_is_sending &= ~(1<<sn);
	sock_remained_size[sn] = 0;
	sock_pack_info[sn] = 0;
	while(getSn_SR(sn) != SOCK_CLOSED);
	return SOCK_OK;
}
 8006264:	4770      	bx	lr
{
 8006266:	b570      	push	{r4, r5, r6, lr}
 8006268:	4605      	mov	r5, r0
	setSn_CR(sn,Sn_CR_CLOSE);
 800626a:	0084      	lsls	r4, r0, #2
 800626c:	3401      	adds	r4, #1
 800626e:	00e4      	lsls	r4, r4, #3
 8006270:	f504 7680 	add.w	r6, r4, #256	; 0x100
 8006274:	2110      	movs	r1, #16
 8006276:	4630      	mov	r0, r6
 8006278:	f7ff fe64 	bl	8005f44 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 800627c:	4630      	mov	r0, r6
 800627e:	f7ff fe2f 	bl	8005ee0 <WIZCHIP_READ>
 8006282:	2800      	cmp	r0, #0
 8006284:	d1fa      	bne.n	800627c <close+0x20>
	setSn_IR(sn, 0xFF);
 8006286:	211f      	movs	r1, #31
 8006288:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800628c:	f7ff fe5a 	bl	8005f44 <WIZCHIP_WRITE>
	sock_io_mode &= ~(1<<sn);
 8006290:	2301      	movs	r3, #1
 8006292:	40ab      	lsls	r3, r5
 8006294:	43db      	mvns	r3, r3
 8006296:	b21b      	sxth	r3, r3
 8006298:	490a      	ldr	r1, [pc, #40]	; (80062c4 <close+0x68>)
 800629a:	880a      	ldrh	r2, [r1, #0]
 800629c:	401a      	ands	r2, r3
 800629e:	800a      	strh	r2, [r1, #0]
	sock_is_sending &= ~(1<<sn);
 80062a0:	4a09      	ldr	r2, [pc, #36]	; (80062c8 <close+0x6c>)
 80062a2:	8811      	ldrh	r1, [r2, #0]
 80062a4:	400b      	ands	r3, r1
 80062a6:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	4a08      	ldr	r2, [pc, #32]	; (80062cc <close+0x70>)
 80062ac:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
	sock_pack_info[sn] = 0;
 80062b0:	4a07      	ldr	r2, [pc, #28]	; (80062d0 <close+0x74>)
 80062b2:	5553      	strb	r3, [r2, r5]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80062b4:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80062b8:	f7ff fe12 	bl	8005ee0 <WIZCHIP_READ>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d1f9      	bne.n	80062b4 <close+0x58>
	return SOCK_OK;
 80062c0:	2001      	movs	r0, #1
}
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	200010ec 	.word	0x200010ec
 80062c8:	200010ee 	.word	0x200010ee
 80062cc:	200010f8 	.word	0x200010f8
 80062d0:	200010f0 	.word	0x200010f0

080062d4 <socket>:
	CHECK_SOCKNUM();
 80062d4:	2808      	cmp	r0, #8
 80062d6:	f200 8096 	bhi.w	8006406 <socket+0x132>
{
 80062da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	4605      	mov	r5, r0
 80062e2:	460f      	mov	r7, r1
 80062e4:	4690      	mov	r8, r2
 80062e6:	461e      	mov	r6, r3
	switch(protocol)
 80062e8:	2901      	cmp	r1, #1
 80062ea:	d065      	beq.n	80063b8 <socket+0xe4>
 80062ec:	b24b      	sxtb	r3, r1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 808c 	beq.w	800640c <socket+0x138>
 80062f4:	1e8b      	subs	r3, r1, #2
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	f200 808a 	bhi.w	8006412 <socket+0x13e>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80062fe:	f016 0f04 	tst.w	r6, #4
 8006302:	f040 8089 	bne.w	8006418 <socket+0x144>
	if(flag != 0)
 8006306:	b11e      	cbz	r6, 8006310 <socket+0x3c>
   	switch(protocol)
 8006308:	2f01      	cmp	r7, #1
 800630a:	d062      	beq.n	80063d2 <socket+0xfe>
 800630c:	2f02      	cmp	r7, #2
 800630e:	d066      	beq.n	80063de <socket+0x10a>
	close(sn);
 8006310:	4628      	mov	r0, r5
 8006312:	f7ff ffa3 	bl	800625c <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8006316:	00ac      	lsls	r4, r5, #2
 8006318:	3401      	adds	r4, #1
 800631a:	00e4      	lsls	r4, r4, #3
 800631c:	f026 010f 	bic.w	r1, r6, #15
 8006320:	b249      	sxtb	r1, r1
 8006322:	4339      	orrs	r1, r7
 8006324:	b2c9      	uxtb	r1, r1
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff fe0c 	bl	8005f44 <WIZCHIP_WRITE>
	if(!port)
 800632c:	f1b8 0f00 	cmp.w	r8, #0
 8006330:	d10a      	bne.n	8006348 <socket+0x74>
	   port = sock_any_port++;
 8006332:	4a3c      	ldr	r2, [pc, #240]	; (8006424 <socket+0x150>)
 8006334:	f8b2 8000 	ldrh.w	r8, [r2]
 8006338:	f108 0301 	add.w	r3, r8, #1
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8006340:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8006344:	4293      	cmp	r3, r2
 8006346:	d059      	beq.n	80063fc <socket+0x128>
   setSn_PORT(sn,port);	
 8006348:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800634c:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8006350:	f7ff fdf8 	bl	8005f44 <WIZCHIP_WRITE>
 8006354:	fa5f f188 	uxtb.w	r1, r8
 8006358:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 800635c:	f7ff fdf2 	bl	8005f44 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8006360:	f504 7780 	add.w	r7, r4, #256	; 0x100
 8006364:	2101      	movs	r1, #1
 8006366:	4638      	mov	r0, r7
 8006368:	f7ff fdec 	bl	8005f44 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800636c:	4638      	mov	r0, r7
 800636e:	f7ff fdb7 	bl	8005ee0 <WIZCHIP_READ>
 8006372:	2800      	cmp	r0, #0
 8006374:	d1fa      	bne.n	800636c <socket+0x98>
   sock_io_mode &= ~(1 <<sn);
 8006376:	2201      	movs	r2, #1
 8006378:	40aa      	lsls	r2, r5
 800637a:	43d2      	mvns	r2, r2
 800637c:	b212      	sxth	r2, r2
 800637e:	492a      	ldr	r1, [pc, #168]	; (8006428 <socket+0x154>)
 8006380:	880b      	ldrh	r3, [r1, #0]
 8006382:	4013      	ands	r3, r2
 8006384:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8006386:	f006 0601 	and.w	r6, r6, #1
 800638a:	40ae      	lsls	r6, r5
 800638c:	431e      	orrs	r6, r3
 800638e:	800e      	strh	r6, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8006390:	4b26      	ldr	r3, [pc, #152]	; (800642c <socket+0x158>)
 8006392:	8819      	ldrh	r1, [r3, #0]
 8006394:	400a      	ands	r2, r1
 8006396:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	4a25      	ldr	r2, [pc, #148]	; (8006430 <socket+0x15c>)
 800639c:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 80063a0:	4a24      	ldr	r2, [pc, #144]	; (8006434 <socket+0x160>)
 80063a2:	5553      	strb	r3, [r2, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
 80063a4:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80063a8:	f7ff fd9a 	bl	8005ee0 <WIZCHIP_READ>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	d0f9      	beq.n	80063a4 <socket+0xd0>
   return (int8_t)sn;
 80063b0:	b268      	sxtb	r0, r5
}	   
 80063b2:	b002      	add	sp, #8
 80063b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            getSIPR((uint8_t*)&taddr);
 80063b8:	2204      	movs	r2, #4
 80063ba:	eb0d 0102 	add.w	r1, sp, r2
 80063be:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80063c2:	f7ff fdf3 	bl	8005fac <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80063c6:	9b01      	ldr	r3, [sp, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d198      	bne.n	80062fe <socket+0x2a>
 80063cc:	f06f 0002 	mvn.w	r0, #2
 80063d0:	e7ef      	b.n	80063b2 <socket+0xde>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80063d2:	f016 0f21 	tst.w	r6, #33	; 0x21
 80063d6:	d19b      	bne.n	8006310 <socket+0x3c>
 80063d8:	f06f 0005 	mvn.w	r0, #5
 80063dc:	e7e9      	b.n	80063b2 <socket+0xde>
   	      if(flag & SF_IGMP_VER2)
 80063de:	f016 0f20 	tst.w	r6, #32
 80063e2:	d002      	beq.n	80063ea <socket+0x116>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80063e4:	f016 0f80 	tst.w	r6, #128	; 0x80
 80063e8:	d019      	beq.n	800641e <socket+0x14a>
      	      if(flag & SF_UNI_BLOCK)
 80063ea:	f016 0f10 	tst.w	r6, #16
 80063ee:	d08f      	beq.n	8006310 <socket+0x3c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80063f0:	f016 0f80 	tst.w	r6, #128	; 0x80
 80063f4:	d18c      	bne.n	8006310 <socket+0x3c>
 80063f6:	f06f 0005 	mvn.w	r0, #5
 80063fa:	e7da      	b.n	80063b2 <socket+0xde>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80063fc:	4b09      	ldr	r3, [pc, #36]	; (8006424 <socket+0x150>)
 80063fe:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	e7a0      	b.n	8006348 <socket+0x74>
	CHECK_SOCKNUM();
 8006406:	f04f 30ff 	mov.w	r0, #4294967295
}	   
 800640a:	4770      	bx	lr
	switch(protocol)
 800640c:	f06f 0004 	mvn.w	r0, #4
 8006410:	e7cf      	b.n	80063b2 <socket+0xde>
 8006412:	f06f 0004 	mvn.w	r0, #4
 8006416:	e7cc      	b.n	80063b2 <socket+0xde>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8006418:	f06f 0005 	mvn.w	r0, #5
 800641c:	e7c9      	b.n	80063b2 <socket+0xde>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800641e:	f06f 0005 	mvn.w	r0, #5
 8006422:	e7c6      	b.n	80063b2 <socket+0xde>
 8006424:	20000084 	.word	0x20000084
 8006428:	200010ec 	.word	0x200010ec
 800642c:	200010ee 	.word	0x200010ee
 8006430:	200010f8 	.word	0x200010f8
 8006434:	200010f0 	.word	0x200010f0

08006438 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8006438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
 8006440:	2808      	cmp	r0, #8
 8006442:	f200 8094 	bhi.w	800656e <sendto+0x136>
 8006446:	4606      	mov	r6, r0
 8006448:	468a      	mov	sl, r1
 800644a:	4693      	mov	fp, r2
 800644c:	461c      	mov	r4, r3
   switch(getSn_MR(sn) & 0x0F)
 800644e:	4681      	mov	r9, r0
 8006450:	0087      	lsls	r7, r0, #2
 8006452:	3701      	adds	r7, #1
 8006454:	00ff      	lsls	r7, r7, #3
 8006456:	4638      	mov	r0, r7
 8006458:	f7ff fd42 	bl	8005ee0 <WIZCHIP_READ>
 800645c:	f000 000f 	and.w	r0, r0, #15
 8006460:	3802      	subs	r0, #2
 8006462:	2802      	cmp	r0, #2
 8006464:	f200 8086 	bhi.w	8006574 <sendto+0x13c>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8006468:	f1bb 0f00 	cmp.w	fp, #0
 800646c:	f000 8085 	beq.w	800657a <sendto+0x142>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8006470:	7823      	ldrb	r3, [r4, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8006472:	7862      	ldrb	r2, [r4, #1]
 8006474:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8006478:	78a3      	ldrb	r3, [r4, #2]
 800647a:	eb03 2202 	add.w	r2, r3, r2, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800647e:	78e3      	ldrb	r3, [r4, #3]
 8006480:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8006484:	b363      	cbz	r3, 80064e0 <sendto+0xa8>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8006486:	b92d      	cbnz	r5, 8006494 <sendto+0x5c>
 8006488:	4638      	mov	r0, r7
 800648a:	f7ff fd29 	bl	8005ee0 <WIZCHIP_READ>
 800648e:	f010 0f04 	tst.w	r0, #4
 8006492:	d075      	beq.n	8006580 <sendto+0x148>
   tmp = getSn_SR(sn);
 8006494:	f507 7840 	add.w	r8, r7, #768	; 0x300
 8006498:	4640      	mov	r0, r8
 800649a:	f7ff fd21 	bl	8005ee0 <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800649e:	2842      	cmp	r0, #66	; 0x42
 80064a0:	d003      	beq.n	80064aa <sendto+0x72>
 80064a2:	2822      	cmp	r0, #34	; 0x22
 80064a4:	d001      	beq.n	80064aa <sendto+0x72>
 80064a6:	2832      	cmp	r0, #50	; 0x32
 80064a8:	d16d      	bne.n	8006586 <sendto+0x14e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80064aa:	2204      	movs	r2, #4
 80064ac:	4621      	mov	r1, r4
 80064ae:	f507 6040 	add.w	r0, r7, #3072	; 0xc00
 80064b2:	f7ff fdb9 	bl	8006028 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80064b6:	0a29      	lsrs	r1, r5, #8
 80064b8:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 80064bc:	f7ff fd42 	bl	8005f44 <WIZCHIP_WRITE>
 80064c0:	b2e9      	uxtb	r1, r5
 80064c2:	f507 5088 	add.w	r0, r7, #4352	; 0x1100
 80064c6:	f7ff fd3d 	bl	8005f44 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80064ca:	f507 50f8 	add.w	r0, r7, #7936	; 0x1f00
 80064ce:	f7ff fd07 	bl	8005ee0 <WIZCHIP_READ>
 80064d2:	b285      	uxth	r5, r0
 80064d4:	02ad      	lsls	r5, r5, #10
 80064d6:	b2ad      	uxth	r5, r5
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80064d8:	45ab      	cmp	fp, r5
 80064da:	d80c      	bhi.n	80064f6 <sendto+0xbe>
 80064dc:	465d      	mov	r5, fp
 80064de:	e00a      	b.n	80064f6 <sendto+0xbe>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80064e0:	4638      	mov	r0, r7
 80064e2:	f7ff fcfd 	bl	8005ee0 <WIZCHIP_READ>
 80064e6:	f010 0f04 	tst.w	r0, #4
 80064ea:	d1cc      	bne.n	8006486 <sendto+0x4e>
 80064ec:	f06f 000b 	mvn.w	r0, #11
 80064f0:	e04e      	b.n	8006590 <sendto+0x158>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
      if(len <= freesize) break;
 80064f2:	42ac      	cmp	r4, r5
 80064f4:	d213      	bcs.n	800651e <sendto+0xe6>
      freesize = getSn_TX_FSR(sn);
 80064f6:	4630      	mov	r0, r6
 80064f8:	f7ff fdd2 	bl	80060a0 <getSn_TX_FSR>
 80064fc:	4604      	mov	r4, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80064fe:	4640      	mov	r0, r8
 8006500:	f7ff fcee 	bl	8005ee0 <WIZCHIP_READ>
 8006504:	2800      	cmp	r0, #0
 8006506:	d041      	beq.n	800658c <sendto+0x154>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8006508:	4b22      	ldr	r3, [pc, #136]	; (8006594 <sendto+0x15c>)
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	fa43 f309 	asr.w	r3, r3, r9
 8006510:	f013 0f01 	tst.w	r3, #1
 8006514:	d0ed      	beq.n	80064f2 <sendto+0xba>
 8006516:	42ac      	cmp	r4, r5
 8006518:	d2eb      	bcs.n	80064f2 <sendto+0xba>
 800651a:	2000      	movs	r0, #0
 800651c:	e038      	b.n	8006590 <sendto+0x158>
   };
	wiz_send_data(sn, buf, len);
 800651e:	462a      	mov	r2, r5
 8006520:	4651      	mov	r1, sl
 8006522:	4630      	mov	r0, r6
 8006524:	f7ff fe1a 	bl	800615c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8006528:	f507 7480 	add.w	r4, r7, #256	; 0x100
 800652c:	2120      	movs	r1, #32
 800652e:	4620      	mov	r0, r4
 8006530:	f7ff fd08 	bl	8005f44 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8006534:	4620      	mov	r0, r4
 8006536:	f7ff fcd3 	bl	8005ee0 <WIZCHIP_READ>
 800653a:	2800      	cmp	r0, #0
 800653c:	d1fa      	bne.n	8006534 <sendto+0xfc>
   while(1)
   {
      tmp = getSn_IR(sn);
 800653e:	f507 7400 	add.w	r4, r7, #512	; 0x200
 8006542:	4620      	mov	r0, r4
 8006544:	f7ff fccc 	bl	8005ee0 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8006548:	f010 0f10 	tst.w	r0, #16
 800654c:	d109      	bne.n	8006562 <sendto+0x12a>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
 800654e:	f010 0f08 	tst.w	r0, #8
 8006552:	d0f4      	beq.n	800653e <sendto+0x106>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8006554:	2108      	movs	r1, #8
 8006556:	4620      	mov	r0, r4
 8006558:	f7ff fcf4 	bl	8005f44 <WIZCHIP_WRITE>
         //len = (uint16_t)SOCKERR_TIMEOUT;
         //break;
         #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
            if(taddr) setSUBR((uint8_t*)&taddr);
         #endif
         return SOCKERR_TIMEOUT;
 800655c:	f06f 000c 	mvn.w	r0, #12
 8006560:	e016      	b.n	8006590 <sendto+0x158>
         setSn_IR(sn, Sn_IR_SENDOK);
 8006562:	2110      	movs	r1, #16
 8006564:	4620      	mov	r0, r4
 8006566:	f7ff fced 	bl	8005f44 <WIZCHIP_WRITE>
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800656a:	4628      	mov	r0, r5
 800656c:	e010      	b.n	8006590 <sendto+0x158>
   CHECK_SOCKNUM();
 800656e:	f04f 30ff 	mov.w	r0, #4294967295
 8006572:	e00d      	b.n	8006590 <sendto+0x158>
         return SOCKERR_SOCKMODE;
 8006574:	f06f 0004 	mvn.w	r0, #4
 8006578:	e00a      	b.n	8006590 <sendto+0x158>
   CHECK_SOCKDATA();
 800657a:	f06f 000d 	mvn.w	r0, #13
 800657e:	e007      	b.n	8006590 <sendto+0x158>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8006580:	f06f 000a 	mvn.w	r0, #10
 8006584:	e004      	b.n	8006590 <sendto+0x158>
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8006586:	f06f 0006 	mvn.w	r0, #6
 800658a:	e001      	b.n	8006590 <sendto+0x158>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800658c:	f06f 0003 	mvn.w	r0, #3
}
 8006590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006594:	200010ec 	.word	0x200010ec

08006598 <recvfrom>:
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
 8006598:	2808      	cmp	r0, #8
 800659a:	f200 8125 	bhi.w	80067e8 <recvfrom+0x250>
{
 800659e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a2:	b083      	sub	sp, #12
 80065a4:	4606      	mov	r6, r0
 80065a6:	468a      	mov	sl, r1
 80065a8:	4691      	mov	r9, r2
 80065aa:	469b      	mov	fp, r3
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80065ac:	4680      	mov	r8, r0
 80065ae:	0085      	lsls	r5, r0, #2
 80065b0:	3501      	adds	r5, #1
 80065b2:	00ed      	lsls	r5, r5, #3
 80065b4:	4628      	mov	r0, r5
 80065b6:	f7ff fc93 	bl	8005ee0 <WIZCHIP_READ>
 80065ba:	4607      	mov	r7, r0
 80065bc:	f000 030f 	and.w	r3, r0, #15
 80065c0:	3b02      	subs	r3, #2
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	f200 8113 	bhi.w	80067ee <recvfrom+0x256>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 80065c8:	f1b9 0f00 	cmp.w	r9, #0
 80065cc:	f000 8112 	beq.w	80067f4 <recvfrom+0x25c>
   if(sock_remained_size[sn] == 0)
 80065d0:	4b8b      	ldr	r3, [pc, #556]	; (8006800 <recvfrom+0x268>)
 80065d2:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80065d6:	b1a3      	cbz	r3, 8006602 <recvfrom+0x6a>
	uint16_t pack_len=0;
 80065d8:	2400      	movs	r4, #0
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80065da:	f007 0707 	and.w	r7, r7, #7
 80065de:	2f03      	cmp	r7, #3
 80065e0:	f000 80c1 	beq.w	8006766 <recvfrom+0x1ce>
 80065e4:	2f04      	cmp	r7, #4
 80065e6:	f000 8084 	beq.w	80066f2 <recvfrom+0x15a>
 80065ea:	2f02      	cmp	r7, #2
 80065ec:	d01f      	beq.n	800662e <recvfrom+0x96>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80065ee:	4621      	mov	r1, r4
 80065f0:	4630      	mov	r0, r6
 80065f2:	f7ff fe11 	bl	8006218 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80065f6:	4b82      	ldr	r3, [pc, #520]	; (8006800 <recvfrom+0x268>)
 80065f8:	f823 4016 	strh.w	r4, [r3, r6, lsl #1]
         break;
 80065fc:	e026      	b.n	800664c <recvfrom+0xb4>
         if(pack_len != 0) break;
 80065fe:	2c00      	cmp	r4, #0
 8006600:	d1eb      	bne.n	80065da <recvfrom+0x42>
         pack_len = getSn_RX_RSR(sn);
 8006602:	4630      	mov	r0, r6
 8006604:	f7ff fd7b 	bl	80060fe <getSn_RX_RSR>
 8006608:	4604      	mov	r4, r0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800660a:	f505 7040 	add.w	r0, r5, #768	; 0x300
 800660e:	f7ff fc67 	bl	8005ee0 <WIZCHIP_READ>
 8006612:	2800      	cmp	r0, #0
 8006614:	f000 80f1 	beq.w	80067fa <recvfrom+0x262>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8006618:	4b7a      	ldr	r3, [pc, #488]	; (8006804 <recvfrom+0x26c>)
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	fa43 f308 	asr.w	r3, r3, r8
 8006620:	f013 0f01 	tst.w	r3, #1
 8006624:	d0eb      	beq.n	80065fe <recvfrom+0x66>
 8006626:	2c00      	cmp	r4, #0
 8006628:	d1e9      	bne.n	80065fe <recvfrom+0x66>
 800662a:	2000      	movs	r0, #0
 800662c:	e029      	b.n	8006682 <recvfrom+0xea>
	      if(sock_remained_size[sn] == 0)
 800662e:	4b74      	ldr	r3, [pc, #464]	; (8006800 <recvfrom+0x268>)
 8006630:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8006634:	b343      	cbz	r3, 8006688 <recvfrom+0xf0>
			if(len < sock_remained_size[sn]) pack_len = len;
 8006636:	4b72      	ldr	r3, [pc, #456]	; (8006800 <recvfrom+0x268>)
 8006638:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 800663c:	454c      	cmp	r4, r9
 800663e:	d900      	bls.n	8006642 <recvfrom+0xaa>
 8006640:	464c      	mov	r4, r9
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8006642:	4622      	mov	r2, r4
 8006644:	4651      	mov	r1, sl
 8006646:	4630      	mov	r0, r6
 8006648:	f7ff fdb7 	bl	80061ba <wiz_recv_data>
   }
	setSn_CR(sn,Sn_CR_RECV);
 800664c:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8006650:	2140      	movs	r1, #64	; 0x40
 8006652:	4628      	mov	r0, r5
 8006654:	f7ff fc76 	bl	8005f44 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8006658:	4628      	mov	r0, r5
 800665a:	f7ff fc41 	bl	8005ee0 <WIZCHIP_READ>
 800665e:	2800      	cmp	r0, #0
 8006660:	d1fa      	bne.n	8006658 <recvfrom+0xc0>
	sock_remained_size[sn] -= pack_len;
 8006662:	4a67      	ldr	r2, [pc, #412]	; (8006800 <recvfrom+0x268>)
 8006664:	f832 3016 	ldrh.w	r3, [r2, r6, lsl #1]
 8006668:	1b1b      	subs	r3, r3, r4
 800666a:	b29b      	uxth	r3, r3
 800666c:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 80b5 	beq.w	80067e0 <recvfrom+0x248>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8006676:	4a64      	ldr	r2, [pc, #400]	; (8006808 <recvfrom+0x270>)
 8006678:	5d93      	ldrb	r3, [r2, r6]
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	5593      	strb	r3, [r2, r6]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8006680:	4620      	mov	r0, r4
}
 8006682:	b003      	add	sp, #12
 8006684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   			wiz_recv_data(sn, head, 8);
 8006688:	2208      	movs	r2, #8
 800668a:	4669      	mov	r1, sp
 800668c:	4630      	mov	r0, r6
 800668e:	f7ff fd94 	bl	80061ba <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006692:	f505 7480 	add.w	r4, r5, #256	; 0x100
 8006696:	2140      	movs	r1, #64	; 0x40
 8006698:	4620      	mov	r0, r4
 800669a:	f7ff fc53 	bl	8005f44 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800669e:	4620      	mov	r0, r4
 80066a0:	f7ff fc1e 	bl	8005ee0 <WIZCHIP_READ>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d1fa      	bne.n	800669e <recvfrom+0x106>
               addr[0] = head[0];
 80066a8:	f89d 3000 	ldrb.w	r3, [sp]
 80066ac:	f88b 3000 	strb.w	r3, [fp]
      			addr[1] = head[1];
 80066b0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80066b4:	f88b 3001 	strb.w	r3, [fp, #1]
      			addr[2] = head[2];
 80066b8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80066bc:	f88b 3002 	strb.w	r3, [fp, #2]
      			addr[3] = head[3];
 80066c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80066c4:	f88b 3003 	strb.w	r3, [fp, #3]
      			*port = head[4];
 80066c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
      			*port = (*port << 8) + head[5];
 80066cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80066d0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80066d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066d6:	8013      	strh	r3, [r2, #0]
      			sock_remained_size[sn] = head[6];
 80066d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80066dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80066e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80066e4:	4a46      	ldr	r2, [pc, #280]	; (8006800 <recvfrom+0x268>)
 80066e6:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80066ea:	4b47      	ldr	r3, [pc, #284]	; (8006808 <recvfrom+0x270>)
 80066ec:	2280      	movs	r2, #128	; 0x80
 80066ee:	559a      	strb	r2, [r3, r6]
 80066f0:	e7a1      	b.n	8006636 <recvfrom+0x9e>
	      if(sock_remained_size[sn] == 0)
 80066f2:	4b43      	ldr	r3, [pc, #268]	; (8006800 <recvfrom+0x268>)
 80066f4:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80066f8:	b15b      	cbz	r3, 8006712 <recvfrom+0x17a>
			if(len < sock_remained_size[sn]) pack_len = len;
 80066fa:	4b41      	ldr	r3, [pc, #260]	; (8006800 <recvfrom+0x268>)
 80066fc:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 8006700:	454c      	cmp	r4, r9
 8006702:	d900      	bls.n	8006706 <recvfrom+0x16e>
 8006704:	464c      	mov	r4, r9
			wiz_recv_data(sn,buf,pack_len);
 8006706:	4622      	mov	r2, r4
 8006708:	4651      	mov	r1, sl
 800670a:	4630      	mov	r0, r6
 800670c:	f7ff fd55 	bl	80061ba <wiz_recv_data>
		   break;
 8006710:	e79c      	b.n	800664c <recvfrom+0xb4>
   			wiz_recv_data(sn, head, 2);
 8006712:	2202      	movs	r2, #2
 8006714:	4669      	mov	r1, sp
 8006716:	4630      	mov	r0, r6
 8006718:	f7ff fd4f 	bl	80061ba <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800671c:	f505 7480 	add.w	r4, r5, #256	; 0x100
 8006720:	2140      	movs	r1, #64	; 0x40
 8006722:	4620      	mov	r0, r4
 8006724:	f7ff fc0e 	bl	8005f44 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8006728:	4620      	mov	r0, r4
 800672a:	f7ff fbd9 	bl	8005ee0 <WIZCHIP_READ>
 800672e:	2800      	cmp	r0, #0
 8006730:	d1fa      	bne.n	8006728 <recvfrom+0x190>
    			sock_remained_size[sn] = head[0];
 8006732:	f89d 2000 	ldrb.w	r2, [sp]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8006736:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800673a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b02      	subs	r3, #2
 8006742:	b29b      	uxth	r3, r3
 8006744:	4a2e      	ldr	r2, [pc, #184]	; (8006800 <recvfrom+0x268>)
 8006746:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
   			if(sock_remained_size[sn] > 1514) 
 800674a:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800674e:	4293      	cmp	r3, r2
 8006750:	d803      	bhi.n	800675a <recvfrom+0x1c2>
   			sock_pack_info[sn] = PACK_FIRST;
 8006752:	4b2d      	ldr	r3, [pc, #180]	; (8006808 <recvfrom+0x270>)
 8006754:	2280      	movs	r2, #128	; 0x80
 8006756:	559a      	strb	r2, [r3, r6]
 8006758:	e7cf      	b.n	80066fa <recvfrom+0x162>
   			   close(sn);
 800675a:	4630      	mov	r0, r6
 800675c:	f7ff fd7e 	bl	800625c <close>
   			   return SOCKFATAL_PACKLEN;
 8006760:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 8006764:	e78d      	b.n	8006682 <recvfrom+0xea>
		   if(sock_remained_size[sn] == 0)
 8006766:	4b26      	ldr	r3, [pc, #152]	; (8006800 <recvfrom+0x268>)
 8006768:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800676c:	b15b      	cbz	r3, 8006786 <recvfrom+0x1ee>
			if(len < sock_remained_size[sn]) pack_len = len;
 800676e:	4b24      	ldr	r3, [pc, #144]	; (8006800 <recvfrom+0x268>)
 8006770:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 8006774:	454c      	cmp	r4, r9
 8006776:	d900      	bls.n	800677a <recvfrom+0x1e2>
 8006778:	464c      	mov	r4, r9
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800677a:	4622      	mov	r2, r4
 800677c:	4651      	mov	r1, sl
 800677e:	4630      	mov	r0, r6
 8006780:	f7ff fd1b 	bl	80061ba <wiz_recv_data>
			break;
 8006784:	e762      	b.n	800664c <recvfrom+0xb4>
   			wiz_recv_data(sn, head, 6);
 8006786:	2206      	movs	r2, #6
 8006788:	4669      	mov	r1, sp
 800678a:	4630      	mov	r0, r6
 800678c:	f7ff fd15 	bl	80061ba <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006790:	f505 7480 	add.w	r4, r5, #256	; 0x100
 8006794:	2140      	movs	r1, #64	; 0x40
 8006796:	4620      	mov	r0, r4
 8006798:	f7ff fbd4 	bl	8005f44 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800679c:	4620      	mov	r0, r4
 800679e:	f7ff fb9f 	bl	8005ee0 <WIZCHIP_READ>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d1fa      	bne.n	800679c <recvfrom+0x204>
   			addr[0] = head[0];
 80067a6:	f89d 3000 	ldrb.w	r3, [sp]
 80067aa:	f88b 3000 	strb.w	r3, [fp]
   			addr[1] = head[1];
 80067ae:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80067b2:	f88b 3001 	strb.w	r3, [fp, #1]
   			addr[2] = head[2];
 80067b6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80067ba:	f88b 3002 	strb.w	r3, [fp, #2]
   			addr[3] = head[3];
 80067be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80067c2:	f88b 3003 	strb.w	r3, [fp, #3]
   			sock_remained_size[sn] = head[4];
 80067c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80067ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80067ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80067d2:	4a0b      	ldr	r2, [pc, #44]	; (8006800 <recvfrom+0x268>)
 80067d4:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <recvfrom+0x270>)
 80067da:	2280      	movs	r2, #128	; 0x80
 80067dc:	559a      	strb	r2, [r3, r6]
 80067de:	e7c6      	b.n	800676e <recvfrom+0x1d6>
	else sock_pack_info[sn] = PACK_COMPLETED;
 80067e0:	4b09      	ldr	r3, [pc, #36]	; (8006808 <recvfrom+0x270>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	559a      	strb	r2, [r3, r6]
 80067e6:	e74b      	b.n	8006680 <recvfrom+0xe8>
   CHECK_SOCKNUM();
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80067ec:	4770      	bx	lr
         return SOCKERR_SOCKMODE;
 80067ee:	f06f 0004 	mvn.w	r0, #4
 80067f2:	e746      	b.n	8006682 <recvfrom+0xea>
   CHECK_SOCKDATA();
 80067f4:	f06f 000d 	mvn.w	r0, #13
 80067f8:	e743      	b.n	8006682 <recvfrom+0xea>
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80067fa:	f06f 0003 	mvn.w	r0, #3
 80067fe:	e740      	b.n	8006682 <recvfrom+0xea>
 8006800:	200010f8 	.word	0x200010f8
 8006804:	200010ec 	.word	0x200010ec
 8006808:	200010f0 	.word	0x200010f0

0800680c <wizchip_cris_enter>:
  __ASM volatile ("cpsid i" : : : "memory");
 800680c:	b672      	cpsid	i
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {__disable_irq();}
 800680e:	4770      	bx	lr

08006810 <wizchip_cris_exit>:
  __ASM volatile ("cpsie i" : : : "memory");
 8006810:	b662      	cpsie	i
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          { __enable_irq();}
 8006812:	4770      	bx	lr

08006814 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */

//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {LAN_CS_GPIO_Port->BSRR = LAN_CS_Pin << 16;}
 8006814:	4b02      	ldr	r3, [pc, #8]	; (8006820 <wizchip_cs_select+0xc>)
 8006816:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800681a:	619a      	str	r2, [r3, #24]
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40020000 	.word	0x40020000

08006824 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {LAN_CS_GPIO_Port->BSRR = LAN_CS_Pin << 0;}
 8006824:	4b02      	ldr	r3, [pc, #8]	; (8006830 <wizchip_cs_deselect+0xc>)
 8006826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800682a:	619a      	str	r2, [r3, #24]
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40020000 	.word	0x40020000

08006834 <wizchip_spi_readbyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)
{
 8006834:	b500      	push	{lr}
 8006836:	b085      	sub	sp, #20
	HAL_StatusTypeDef ret;
	uint8_t buf[10];
	extern SPI_HandleTypeDef hspi1;
	ret = HAL_SPI_Receive(&hspi1, &buf[0], 1, 100);
 8006838:	2364      	movs	r3, #100	; 0x64
 800683a:	2201      	movs	r2, #1
 800683c:	a901      	add	r1, sp, #4
 800683e:	4804      	ldr	r0, [pc, #16]	; (8006850 <wizchip_spi_readbyte+0x1c>)
 8006840:	f7fe fe58 	bl	80054f4 <HAL_SPI_Receive>
	return buf[0];
}
 8006844:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006848:	b005      	add	sp, #20
 800684a:	f85d fb04 	ldr.w	pc, [sp], #4
 800684e:	bf00      	nop
 8006850:	20003d48 	.word	0x20003d48

08006854 <wizchip_spi_writebyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb)
{
 8006854:	b500      	push	{lr}
 8006856:	b085      	sub	sp, #20
	HAL_StatusTypeDef ret;
	uint8_t buf[10];
	extern SPI_HandleTypeDef hspi1;
	buf[0] = wb;
 8006858:	f88d 0004 	strb.w	r0, [sp, #4]
	ret = HAL_SPI_Transmit(&hspi1, &buf[0], 1, 100);
 800685c:	2364      	movs	r3, #100	; 0x64
 800685e:	2201      	movs	r2, #1
 8006860:	a901      	add	r1, sp, #4
 8006862:	4803      	ldr	r0, [pc, #12]	; (8006870 <wizchip_spi_writebyte+0x1c>)
 8006864:	f7fe fc53 	bl	800510e <HAL_SPI_Transmit>
}
 8006868:	b005      	add	sp, #20
 800686a:	f85d fb04 	ldr.w	pc, [sp], #4
 800686e:	bf00      	nop
 8006870:	20003d48 	.word	0x20003d48

08006874 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8006874:	b500      	push	{lr}
 8006876:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8006878:	2206      	movs	r2, #6
 800687a:	a901      	add	r1, sp, #4
 800687c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006880:	f7ff fb94 	bl	8005fac <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8006884:	2204      	movs	r2, #4
 8006886:	a905      	add	r1, sp, #20
 8006888:	f44f 7080 	mov.w	r0, #256	; 0x100
 800688c:	f7ff fb8e 	bl	8005fac <WIZCHIP_READ_BUF>
 8006890:	2204      	movs	r2, #4
 8006892:	a904      	add	r1, sp, #16
 8006894:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006898:	f7ff fb88 	bl	8005fac <WIZCHIP_READ_BUF>
 800689c:	2204      	movs	r2, #4
 800689e:	a903      	add	r1, sp, #12
 80068a0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80068a4:	f7ff fb82 	bl	8005fac <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80068a8:	2180      	movs	r1, #128	; 0x80
 80068aa:	2000      	movs	r0, #0
 80068ac:	f7ff fb4a 	bl	8005f44 <WIZCHIP_WRITE>
   getMR(); // for delay
 80068b0:	2000      	movs	r0, #0
 80068b2:	f7ff fb15 	bl	8005ee0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80068b6:	2206      	movs	r2, #6
 80068b8:	a901      	add	r1, sp, #4
 80068ba:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80068be:	f7ff fbb3 	bl	8006028 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80068c2:	2204      	movs	r2, #4
 80068c4:	a905      	add	r1, sp, #20
 80068c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80068ca:	f7ff fbad 	bl	8006028 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80068ce:	2204      	movs	r2, #4
 80068d0:	a904      	add	r1, sp, #16
 80068d2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80068d6:	f7ff fba7 	bl	8006028 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80068da:	2204      	movs	r2, #4
 80068dc:	a903      	add	r1, sp, #12
 80068de:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80068e2:	f7ff fba1 	bl	8006028 <WIZCHIP_WRITE_BUF>
}
 80068e6:	b007      	add	sp, #28
 80068e8:	f85d fb04 	ldr.w	pc, [sp], #4

080068ec <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80068ec:	b570      	push	{r4, r5, r6, lr}
 80068ee:	4605      	mov	r5, r0
 80068f0:	460e      	mov	r6, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 80068f2:	f7ff ffbf 	bl	8006874 <wizchip_sw_reset>
   if(txsize)
 80068f6:	b1cd      	cbz	r5, 800692c <wizchip_init+0x40>
   {
      tmp = 0;
 80068f8:	2200      	movs	r2, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80068fa:	4613      	mov	r3, r2
 80068fc:	2b07      	cmp	r3, #7
 80068fe:	dc07      	bgt.n	8006910 <wizchip_init+0x24>
		{
			tmp += txsize[i];
 8006900:	5ce9      	ldrb	r1, [r5, r3]
 8006902:	440a      	add	r2, r1
 8006904:	b252      	sxtb	r2, r2

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8006906:	2a10      	cmp	r2, #16
 8006908:	dc2f      	bgt.n	800696a <wizchip_init+0x7e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800690a:	3301      	adds	r3, #1
 800690c:	b25b      	sxtb	r3, r3
 800690e:	e7f5      	b.n	80068fc <wizchip_init+0x10>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006910:	2400      	movs	r4, #0
 8006912:	e009      	b.n	8006928 <wizchip_init+0x3c>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8006914:	00a0      	lsls	r0, r4, #2
 8006916:	3001      	adds	r0, #1
 8006918:	00c0      	lsls	r0, r0, #3
 800691a:	5d29      	ldrb	r1, [r5, r4]
 800691c:	f500 50f8 	add.w	r0, r0, #7936	; 0x1f00
 8006920:	f7ff fb10 	bl	8005f44 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006924:	3401      	adds	r4, #1
 8006926:	b264      	sxtb	r4, r4
 8006928:	2c07      	cmp	r4, #7
 800692a:	ddf3      	ble.n	8006914 <wizchip_init+0x28>
		}

	#endif
   }

   if(rxsize)
 800692c:	b15e      	cbz	r6, 8006946 <wizchip_init+0x5a>
   {
      tmp = 0;
 800692e:	2200      	movs	r2, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006930:	4613      	mov	r3, r2
 8006932:	2b07      	cmp	r3, #7
 8006934:	dc09      	bgt.n	800694a <wizchip_init+0x5e>
		{
			tmp += rxsize[i];
 8006936:	5cf1      	ldrb	r1, [r6, r3]
 8006938:	440a      	add	r2, r1
 800693a:	b252      	sxtb	r2, r2
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800693c:	2a10      	cmp	r2, #16
 800693e:	dc17      	bgt.n	8006970 <wizchip_init+0x84>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006940:	3301      	adds	r3, #1
 8006942:	b25b      	sxtb	r3, r3
 8006944:	e7f5      	b.n	8006932 <wizchip_init+0x46>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8006946:	2000      	movs	r0, #0
 8006948:	e00e      	b.n	8006968 <wizchip_init+0x7c>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800694a:	2400      	movs	r4, #0
 800694c:	e009      	b.n	8006962 <wizchip_init+0x76>
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800694e:	00a0      	lsls	r0, r4, #2
 8006950:	3001      	adds	r0, #1
 8006952:	00c0      	lsls	r0, r0, #3
 8006954:	5d31      	ldrb	r1, [r6, r4]
 8006956:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
 800695a:	f7ff faf3 	bl	8005f44 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800695e:	3401      	adds	r4, #1
 8006960:	b264      	sxtb	r4, r4
 8006962:	2c07      	cmp	r4, #7
 8006964:	ddf3      	ble.n	800694e <wizchip_init+0x62>
   return 0;
 8006966:	2000      	movs	r0, #0
}
 8006968:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
 800696a:	f04f 30ff 	mov.w	r0, #4294967295
 800696e:	e7fb      	b.n	8006968 <wizchip_init+0x7c>
			if(tmp > 16) return -1;
 8006970:	f04f 30ff 	mov.w	r0, #4294967295
 8006974:	e7f8      	b.n	8006968 <wizchip_init+0x7c>

08006976 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8006976:	b538      	push	{r3, r4, r5, lr}
   uint8_t ir  = (uint8_t)intr;
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8006978:	0a05      	lsrs	r5, r0, #8
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800697a:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
 800697e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8006982:	f7ff fadf 	bl	8005f44 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8006986:	2400      	movs	r4, #0
 8006988:	e009      	b.n	800699e <wizchip_clrinterrupt+0x28>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800698a:	00a0      	lsls	r0, r4, #2
 800698c:	3001      	adds	r0, #1
 800698e:	00c0      	lsls	r0, r0, #3
 8006990:	211f      	movs	r1, #31
 8006992:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8006996:	f7ff fad5 	bl	8005f44 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800699a:	3401      	adds	r4, #1
 800699c:	b2e4      	uxtb	r4, r4
 800699e:	2c07      	cmp	r4, #7
 80069a0:	d805      	bhi.n	80069ae <wizchip_clrinterrupt+0x38>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80069a2:	fa45 f304 	asr.w	r3, r5, r4
 80069a6:	f013 0f01 	tst.w	r3, #1
 80069aa:	d0f6      	beq.n	800699a <wizchip_clrinterrupt+0x24>
 80069ac:	e7ed      	b.n	800698a <wizchip_clrinterrupt+0x14>
   }

#endif   
}
 80069ae:	bd38      	pop	{r3, r4, r5, pc}

080069b0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80069b0:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80069b2:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80069b6:	f7ff fa93 	bl	8005ee0 <WIZCHIP_READ>
 80069ba:	f000 04f0 	and.w	r4, r0, #240	; 0xf0
   sir = getSIR();
 80069be:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80069c2:	f7ff fa8d 	bl	8005ee0 <WIZCHIP_READ>
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80069c6:	b280      	uxth	r0, r0
  ret = (ret << 8) + ir;
 80069c8:	0200      	lsls	r0, r0, #8
 80069ca:	b280      	uxth	r0, r0
 80069cc:	4420      	add	r0, r4
 80069ce:	b280      	uxth	r0, r0
  return (intr_kind)ret;
}
 80069d0:	bd10      	pop	{r4, pc}

080069d2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80069d2:	b510      	push	{r4, lr}
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80069d4:	0a04      	lsrs	r4, r0, #8
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80069d6:	b2c1      	uxtb	r1, r0
 80069d8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80069dc:	f7ff fab2 	bl	8005f44 <WIZCHIP_WRITE>
   setSIMR(simr);
 80069e0:	4621      	mov	r1, r4
 80069e2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80069e6:	f7ff faad 	bl	8005f44 <WIZCHIP_WRITE>
#endif   
}
 80069ea:	bd10      	pop	{r4, pc}

080069ec <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80069ec:	b510      	push	{r4, lr}
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80069ee:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80069f2:	f7ff fa75 	bl	8005ee0 <WIZCHIP_READ>
 80069f6:	4604      	mov	r4, r0
   simr = getSIMR();
 80069f8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80069fc:	f7ff fa70 	bl	8005ee0 <WIZCHIP_READ>
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8006a00:	b283      	uxth	r3, r0
  ret = (ret << 8) + imr;
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	fa13 f084 	uxtah	r0, r3, r4
  return (intr_kind)ret;
}
 8006a0a:	b280      	uxth	r0, r0
 8006a0c:	bd10      	pop	{r4, pc}

08006a0e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8006a0e:	b508      	push	{r3, lr}
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8006a10:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006a14:	f7ff fa64 	bl	8005ee0 <WIZCHIP_READ>
 8006a18:	f010 0f01 	tst.w	r0, #1
 8006a1c:	d101      	bne.n	8006a22 <wizphy_getphylink+0x14>
   int8_t tmp = PHY_LINK_OFF;
 8006a1e:	2000      	movs	r0, #0

#else
   tmp = -1;
#endif
   return tmp;
}
 8006a20:	bd08      	pop	{r3, pc}
      tmp = PHY_LINK_ON;
 8006a22:	2001      	movs	r0, #1
 8006a24:	e7fc      	b.n	8006a20 <wizphy_getphylink+0x12>

08006a26 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8006a26:	b508      	push	{r3, lr}
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8006a28:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006a2c:	f7ff fa58 	bl	8005ee0 <WIZCHIP_READ>
 8006a30:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8006a34:	2830      	cmp	r0, #48	; 0x30
 8006a36:	d001      	beq.n	8006a3c <wizphy_getphypmode+0x16>
         tmp = PHY_POWER_DOWN;
      else 
         tmp = PHY_POWER_NORM;
 8006a38:	2000      	movs	r0, #0
   #else
      tmp = -1;
   #endif
   return tmp;
}
 8006a3a:	bd08      	pop	{r3, pc}
         tmp = PHY_POWER_DOWN;
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	e7fc      	b.n	8006a3a <wizphy_getphypmode+0x14>

08006a40 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8006a40:	b508      	push	{r3, lr}
   uint8_t tmp = getPHYCFGR();
 8006a42:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006a46:	f7ff fa4b 	bl	8005ee0 <WIZCHIP_READ>
   tmp &= PHYCFGR_RST;
   setPHYCFGR(tmp);
 8006a4a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8006a4e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006a52:	f7ff fa77 	bl	8005f44 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8006a56:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006a5a:	f7ff fa41 	bl	8005ee0 <WIZCHIP_READ>
   tmp |= ~PHYCFGR_RST;
 8006a5e:	f060 017f 	orn	r1, r0, #127	; 0x7f
   setPHYCFGR(tmp);
 8006a62:	b2c9      	uxtb	r1, r1
 8006a64:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006a68:	f7ff fa6c 	bl	8005f44 <WIZCHIP_WRITE>
}
 8006a6c:	bd08      	pop	{r3, pc}

08006a6e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8006a6e:	b508      	push	{r3, lr}
   uint8_t tmp = 0;
   if(phyconf->by == PHY_CONFBY_SW)
 8006a70:	7803      	ldrb	r3, [r0, #0]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d00c      	beq.n	8006a90 <wizphy_setphyconf+0x22>
      tmp |= PHYCFGR_OPMD;
   else
      tmp &= ~PHYCFGR_OPMD;
 8006a76:	2100      	movs	r1, #0
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8006a78:	7843      	ldrb	r3, [r0, #1]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d00a      	beq.n	8006a94 <wizphy_setphyconf+0x26>
      tmp |= PHYCFGR_OPMDC_ALLA;
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8006a7e:	78c3      	ldrb	r3, [r0, #3]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d010      	beq.n	8006aa6 <wizphy_setphyconf+0x38>
         else
            tmp |= PHYCFGR_OPMDC_10F;
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006a84:	7883      	ldrb	r3, [r0, #2]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d106      	bne.n	8006a98 <wizphy_setphyconf+0x2a>
            tmp |= PHYCFGR_OPMDC_100H;
 8006a8a:	f041 0110 	orr.w	r1, r1, #16
 8006a8e:	e003      	b.n	8006a98 <wizphy_setphyconf+0x2a>
      tmp |= PHYCFGR_OPMD;
 8006a90:	2140      	movs	r1, #64	; 0x40
 8006a92:	e7f1      	b.n	8006a78 <wizphy_setphyconf+0xa>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006a94:	f041 0138 	orr.w	r1, r1, #56	; 0x38
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8006a98:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006a9c:	f7ff fa52 	bl	8005f44 <WIZCHIP_WRITE>
   wizphy_reset();
 8006aa0:	f7ff ffce 	bl	8006a40 <wizphy_reset>
}
 8006aa4:	bd08      	pop	{r3, pc}
         if(phyconf->speed == PHY_SPEED_100)
 8006aa6:	7883      	ldrb	r3, [r0, #2]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d002      	beq.n	8006ab2 <wizphy_setphyconf+0x44>
            tmp |= PHYCFGR_OPMDC_10F;
 8006aac:	f041 0108 	orr.w	r1, r1, #8
 8006ab0:	e7f2      	b.n	8006a98 <wizphy_setphyconf+0x2a>
            tmp |= PHYCFGR_OPMDC_100F;
 8006ab2:	f041 0118 	orr.w	r1, r1, #24
 8006ab6:	e7ef      	b.n	8006a98 <wizphy_setphyconf+0x2a>

08006ab8 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	4604      	mov	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
 8006abc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006ac0:	f7ff fa0e 	bl	8005ee0 <WIZCHIP_READ>
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8006ac4:	f3c0 1380 	ubfx	r3, r0, #6, #1
 8006ac8:	7023      	strb	r3, [r4, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006aca:	f000 0338 	and.w	r3, r0, #56	; 0x38
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d004      	beq.n	8006adc <wizphy_getphyconf+0x24>
 8006ad2:	2b38      	cmp	r3, #56	; 0x38
 8006ad4:	d002      	beq.n	8006adc <wizphy_getphyconf+0x24>
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
         break;
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	7062      	strb	r2, [r4, #1]
         break;
 8006ada:	e001      	b.n	8006ae0 <wizphy_getphyconf+0x28>
         phyconf->mode = PHY_MODE_AUTONEGO;
 8006adc:	2201      	movs	r2, #1
 8006ade:	7062      	strb	r2, [r4, #1]
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006ae0:	f1a3 0210 	sub.w	r2, r3, #16
 8006ae4:	b2d1      	uxtb	r1, r2
 8006ae6:	2910      	cmp	r1, #16
 8006ae8:	d816      	bhi.n	8006b18 <wizphy_getphyconf+0x60>
 8006aea:	2201      	movs	r2, #1
 8006aec:	408a      	lsls	r2, r1
 8006aee:	f002 3201 	and.w	r2, r2, #16843009	; 0x1010101
 8006af2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006af6:	b17a      	cbz	r2, 8006b18 <wizphy_getphyconf+0x60>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8006af8:	2201      	movs	r2, #1
 8006afa:	70a2      	strb	r2, [r4, #2]
         break;
      default:
         phyconf->speed = PHY_SPEED_10;
         break;
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006afc:	3b08      	subs	r3, #8
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b18      	cmp	r3, #24
 8006b02:	d80c      	bhi.n	8006b1e <wizphy_getphyconf+0x66>
 8006b04:	2201      	movs	r2, #1
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006b0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b12:	b123      	cbz	r3, 8006b1e <wizphy_getphyconf+0x66>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8006b14:	70e2      	strb	r2, [r4, #3]
         break;
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
         break;
   }
}
 8006b16:	bd10      	pop	{r4, pc}
         phyconf->speed = PHY_SPEED_10;
 8006b18:	2200      	movs	r2, #0
 8006b1a:	70a2      	strb	r2, [r4, #2]
         break;
 8006b1c:	e7ee      	b.n	8006afc <wizphy_getphyconf+0x44>
         phyconf->duplex = PHY_DUPLEX_HALF;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	70e3      	strb	r3, [r4, #3]
}
 8006b22:	e7f8      	b.n	8006b16 <wizphy_getphyconf+0x5e>

08006b24 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8006b24:	b510      	push	{r4, lr}
 8006b26:	4604      	mov	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
 8006b28:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006b2c:	f7ff f9d8 	bl	8005ee0 <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8006b30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b34:	d024      	beq.n	8006b80 <wizphy_setphypmode+0x5c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8006b36:	f000 01c7 	and.w	r1, r0, #199	; 0xc7
   if( pmode == PHY_POWER_DOWN)
 8006b3a:	2c01      	cmp	r4, #1
 8006b3c:	d012      	beq.n	8006b64 <wizphy_setphypmode+0x40>
      tmp |= PHYCFGR_OPMDC_PDOWN;
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006b3e:	f041 0138 	orr.w	r1, r1, #56	; 0x38
   setPHYCFGR(tmp);
 8006b42:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006b46:	f7ff f9fd 	bl	8005f44 <WIZCHIP_WRITE>
   wizphy_reset();
 8006b4a:	f7ff ff79 	bl	8006a40 <wizphy_reset>
   tmp = getPHYCFGR();
 8006b4e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006b52:	f7ff f9c5 	bl	8005ee0 <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
 8006b56:	2c01      	cmp	r4, #1
 8006b58:	d007      	beq.n	8006b6a <wizphy_setphypmode+0x46>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8006b5a:	f010 0f38 	tst.w	r0, #56	; 0x38
 8006b5e:	d00c      	beq.n	8006b7a <wizphy_setphypmode+0x56>
 8006b60:	2000      	movs	r0, #0
   }
   return -1;
}
 8006b62:	bd10      	pop	{r4, pc}
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8006b64:	f041 0130 	orr.w	r1, r1, #48	; 0x30
 8006b68:	e7eb      	b.n	8006b42 <wizphy_setphypmode+0x1e>
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8006b6a:	f010 0f30 	tst.w	r0, #48	; 0x30
 8006b6e:	d001      	beq.n	8006b74 <wizphy_setphypmode+0x50>
 8006b70:	2000      	movs	r0, #0
 8006b72:	e7f6      	b.n	8006b62 <wizphy_setphypmode+0x3e>
   return -1;
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295
 8006b78:	e7f3      	b.n	8006b62 <wizphy_setphypmode+0x3e>
 8006b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7e:	e7f0      	b.n	8006b62 <wizphy_setphypmode+0x3e>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295
 8006b84:	e7ed      	b.n	8006b62 <wizphy_setphypmode+0x3e>
	...

08006b88 <ctlwizchip>:
{
 8006b88:	b530      	push	{r4, r5, lr}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	460c      	mov	r4, r1
   uint8_t* ptmp[2] = {0,0};
 8006b8e:	2300      	movs	r3, #0
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	9301      	str	r3, [sp, #4]
   switch(cwtype)
 8006b94:	280f      	cmp	r0, #15
 8006b96:	d809      	bhi.n	8006bac <ctlwizchip+0x24>
 8006b98:	e8df f000 	tbb	[pc, r0]
 8006b9c:	181d0f0b 	.word	0x181d0f0b
 8006ba0:	392c2722 	.word	0x392c2722
 8006ba4:	625d5949 	.word	0x625d5949
 8006ba8:	736b677b 	.word	0x736b677b
   uint8_t* ptmp[2] = {0,0};
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb0:	e070      	b.n	8006c94 <ctlwizchip+0x10c>
         wizchip_sw_reset();
 8006bb2:	f7ff fe5f 	bl	8006874 <wizchip_sw_reset>
   return 0;
 8006bb6:	2000      	movs	r0, #0
         break;
 8006bb8:	e06c      	b.n	8006c94 <ctlwizchip+0x10c>
         if(arg != 0) 
 8006bba:	b111      	cbz	r1, 8006bc2 <ctlwizchip+0x3a>
            ptmp[0] = (uint8_t*)arg;
 8006bbc:	9100      	str	r1, [sp, #0]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8006bbe:	3408      	adds	r4, #8
 8006bc0:	9401      	str	r4, [sp, #4]
         return wizchip_init(ptmp[0], ptmp[1]);
 8006bc2:	9901      	ldr	r1, [sp, #4]
 8006bc4:	9800      	ldr	r0, [sp, #0]
 8006bc6:	f7ff fe91 	bl	80068ec <wizchip_init>
 8006bca:	e063      	b.n	8006c94 <ctlwizchip+0x10c>
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8006bcc:	8808      	ldrh	r0, [r1, #0]
 8006bce:	f7ff fed2 	bl	8006976 <wizchip_clrinterrupt>
   return 0;
 8006bd2:	2000      	movs	r0, #0
         break;
 8006bd4:	e05e      	b.n	8006c94 <ctlwizchip+0x10c>
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8006bd6:	f7ff feeb 	bl	80069b0 <wizchip_getinterrupt>
 8006bda:	8020      	strh	r0, [r4, #0]
   return 0;
 8006bdc:	2000      	movs	r0, #0
         break;
 8006bde:	e059      	b.n	8006c94 <ctlwizchip+0x10c>
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8006be0:	8808      	ldrh	r0, [r1, #0]
 8006be2:	f7ff fef6 	bl	80069d2 <wizchip_setinterruptmask>
   return 0;
 8006be6:	2000      	movs	r0, #0
         break;         
 8006be8:	e054      	b.n	8006c94 <ctlwizchip+0x10c>
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8006bea:	f7ff feff 	bl	80069ec <wizchip_getinterruptmask>
 8006bee:	8020      	strh	r0, [r4, #0]
   return 0;
 8006bf0:	2000      	movs	r0, #0
         break;
 8006bf2:	e04f      	b.n	8006c94 <ctlwizchip+0x10c>
         setINTLEVEL(*(uint16_t*)arg);
 8006bf4:	8809      	ldrh	r1, [r1, #0]
 8006bf6:	0a09      	lsrs	r1, r1, #8
 8006bf8:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8006bfc:	f7ff f9a2 	bl	8005f44 <WIZCHIP_WRITE>
 8006c00:	7821      	ldrb	r1, [r4, #0]
 8006c02:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8006c06:	f7ff f99d 	bl	8005f44 <WIZCHIP_WRITE>
   return 0;
 8006c0a:	2000      	movs	r0, #0
         break;
 8006c0c:	e042      	b.n	8006c94 <ctlwizchip+0x10c>
         *(uint16_t*)arg = getINTLEVEL();
 8006c0e:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8006c12:	f7ff f965 	bl	8005ee0 <WIZCHIP_READ>
 8006c16:	b285      	uxth	r5, r0
 8006c18:	022d      	lsls	r5, r5, #8
 8006c1a:	b2ad      	uxth	r5, r5
 8006c1c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8006c20:	f7ff f95e 	bl	8005ee0 <WIZCHIP_READ>
 8006c24:	fa15 f580 	uxtah	r5, r5, r0
 8006c28:	8025      	strh	r5, [r4, #0]
   return 0;
 8006c2a:	2000      	movs	r0, #0
         break;
 8006c2c:	e032      	b.n	8006c94 <ctlwizchip+0x10c>
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8006c2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ca4 <ctlwizchip+0x11c>)
 8006c30:	789a      	ldrb	r2, [r3, #2]
 8006c32:	700a      	strb	r2, [r1, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8006c34:	78da      	ldrb	r2, [r3, #3]
 8006c36:	704a      	strb	r2, [r1, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8006c38:	791a      	ldrb	r2, [r3, #4]
 8006c3a:	708a      	strb	r2, [r1, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8006c3c:	795a      	ldrb	r2, [r3, #5]
 8006c3e:	70ca      	strb	r2, [r1, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8006c40:	799a      	ldrb	r2, [r3, #6]
 8006c42:	710a      	strb	r2, [r1, #4]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8006c44:	79db      	ldrb	r3, [r3, #7]
 8006c46:	714b      	strb	r3, [r1, #5]
         ((uint8_t*)arg)[6] = 0;
 8006c48:	2000      	movs	r0, #0
 8006c4a:	7188      	strb	r0, [r1, #6]
         break;
 8006c4c:	e022      	b.n	8006c94 <ctlwizchip+0x10c>
         wizphy_reset();
 8006c4e:	f7ff fef7 	bl	8006a40 <wizphy_reset>
   return 0;
 8006c52:	2000      	movs	r0, #0
         break;
 8006c54:	e01e      	b.n	8006c94 <ctlwizchip+0x10c>
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8006c56:	4608      	mov	r0, r1
 8006c58:	f7ff ff09 	bl	8006a6e <wizphy_setphyconf>
   return 0;
 8006c5c:	2000      	movs	r0, #0
         break;
 8006c5e:	e019      	b.n	8006c94 <ctlwizchip+0x10c>
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8006c60:	4608      	mov	r0, r1
 8006c62:	f7ff ff29 	bl	8006ab8 <wizphy_getphyconf>
   return 0;
 8006c66:	2000      	movs	r0, #0
         break;
 8006c68:	e014      	b.n	8006c94 <ctlwizchip+0x10c>
         return wizphy_setphypmode(*(uint8_t*)arg);
 8006c6a:	7808      	ldrb	r0, [r1, #0]
 8006c6c:	f7ff ff5a 	bl	8006b24 <wizphy_setphypmode>
 8006c70:	e010      	b.n	8006c94 <ctlwizchip+0x10c>
         tmp = wizphy_getphypmode();
 8006c72:	f7ff fed8 	bl	8006a26 <wizphy_getphypmode>
 8006c76:	b2c0      	uxtb	r0, r0
         if((int8_t)tmp == -1) return -1;
 8006c78:	28ff      	cmp	r0, #255	; 0xff
 8006c7a:	d00d      	beq.n	8006c98 <ctlwizchip+0x110>
         *(uint8_t*)arg = tmp;
 8006c7c:	7020      	strb	r0, [r4, #0]
   return 0;
 8006c7e:	2000      	movs	r0, #0
         break;
 8006c80:	e008      	b.n	8006c94 <ctlwizchip+0x10c>
         tmp = wizphy_getphylink();
 8006c82:	f7ff fec4 	bl	8006a0e <wizphy_getphylink>
 8006c86:	b2c0      	uxtb	r0, r0
         if((int8_t)tmp == -1) return -1;
 8006c88:	28ff      	cmp	r0, #255	; 0xff
 8006c8a:	d008      	beq.n	8006c9e <ctlwizchip+0x116>
         *(uint8_t*)arg = tmp;
 8006c8c:	7020      	strb	r0, [r4, #0]
   return 0;
 8006c8e:	2000      	movs	r0, #0
         break;
 8006c90:	e000      	b.n	8006c94 <ctlwizchip+0x10c>
   return 0;
 8006c92:	2000      	movs	r0, #0
}
 8006c94:	b003      	add	sp, #12
 8006c96:	bd30      	pop	{r4, r5, pc}
         if((int8_t)tmp == -1) return -1;
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	e7fa      	b.n	8006c94 <ctlwizchip+0x10c>
         if((int8_t)tmp == -1) return -1;
 8006c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca2:	e7f7      	b.n	8006c94 <ctlwizchip+0x10c>
 8006ca4:	20000088 	.word	0x20000088

08006ca8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8006cac:	2206      	movs	r2, #6
 8006cae:	4601      	mov	r1, r0
 8006cb0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006cb4:	f7ff f9b8 	bl	8006028 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8006cb8:	2204      	movs	r2, #4
 8006cba:	f104 010e 	add.w	r1, r4, #14
 8006cbe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006cc2:	f7ff f9b1 	bl	8006028 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8006cc6:	2204      	movs	r2, #4
 8006cc8:	f104 010a 	add.w	r1, r4, #10
 8006ccc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006cd0:	f7ff f9aa 	bl	8006028 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	1da1      	adds	r1, r4, #6
 8006cd8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006cdc:	f7ff f9a4 	bl	8006028 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8006ce0:	7ca2      	ldrb	r2, [r4, #18]
 8006ce2:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <wizchip_setnetinfo+0x54>)
 8006ce4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8006ce6:	7ce2      	ldrb	r2, [r4, #19]
 8006ce8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8006cea:	7d22      	ldrb	r2, [r4, #20]
 8006cec:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8006cee:	7d62      	ldrb	r2, [r4, #21]
 8006cf0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8006cf2:	7da2      	ldrb	r2, [r4, #22]
 8006cf4:	4b02      	ldr	r3, [pc, #8]	; (8006d00 <wizchip_setnetinfo+0x58>)
 8006cf6:	701a      	strb	r2, [r3, #0]
}
 8006cf8:	bd10      	pop	{r4, pc}
 8006cfa:	bf00      	nop
 8006cfc:	2000110c 	.word	0x2000110c
 8006d00:	20001108 	.word	0x20001108

08006d04 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8006d04:	b510      	push	{r4, lr}
 8006d06:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8006d08:	2206      	movs	r2, #6
 8006d0a:	4601      	mov	r1, r0
 8006d0c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006d10:	f7ff f94c 	bl	8005fac <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8006d14:	2204      	movs	r2, #4
 8006d16:	f104 010e 	add.w	r1, r4, #14
 8006d1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006d1e:	f7ff f945 	bl	8005fac <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8006d22:	2204      	movs	r2, #4
 8006d24:	f104 010a 	add.w	r1, r4, #10
 8006d28:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006d2c:	f7ff f93e 	bl	8005fac <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8006d30:	2204      	movs	r2, #4
 8006d32:	1da1      	adds	r1, r4, #6
 8006d34:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006d38:	f7ff f938 	bl	8005fac <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <wizchip_getnetinfo+0x54>)
 8006d3e:	781a      	ldrb	r2, [r3, #0]
 8006d40:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8006d42:	785a      	ldrb	r2, [r3, #1]
 8006d44:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006d46:	789a      	ldrb	r2, [r3, #2]
 8006d48:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8006d4a:	78db      	ldrb	r3, [r3, #3]
 8006d4c:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8006d4e:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <wizchip_getnetinfo+0x58>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	75a3      	strb	r3, [r4, #22]
}
 8006d54:	bd10      	pop	{r4, pc}
 8006d56:	bf00      	nop
 8006d58:	2000110c 	.word	0x2000110c
 8006d5c:	20001108 	.word	0x20001108

08006d60 <wizchip_setnetmode>:
{
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8006d60:	f030 033a 	bics.w	r3, r0, #58	; 0x3a
 8006d64:	d10c      	bne.n	8006d80 <wizchip_setnetmode+0x20>
{
 8006d66:	b510      	push	{r4, lr}
 8006d68:	4604      	mov	r4, r0
#endif      
   tmp = getMR();
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	f7ff f8b8 	bl	8005ee0 <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
 8006d70:	ea44 0100 	orr.w	r1, r4, r0
   setMR(tmp);
 8006d74:	b2c9      	uxtb	r1, r1
 8006d76:	2000      	movs	r0, #0
 8006d78:	f7ff f8e4 	bl	8005f44 <WIZCHIP_WRITE>
   return 0;
 8006d7c:	2000      	movs	r0, #0
}
 8006d7e:	bd10      	pop	{r4, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8006d80:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006d84:	4770      	bx	lr

08006d86 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8006d86:	b508      	push	{r3, lr}
   return (netmode_type) getMR();
 8006d88:	2000      	movs	r0, #0
 8006d8a:	f7ff f8a9 	bl	8005ee0 <WIZCHIP_READ>
}
 8006d8e:	bd08      	pop	{r3, pc}

08006d90 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8006d90:	b510      	push	{r4, lr}
 8006d92:	4604      	mov	r4, r0
   setRCR(nettime->retry_cnt);
 8006d94:	7801      	ldrb	r1, [r0, #0]
 8006d96:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8006d9a:	f7ff f8d3 	bl	8005f44 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8006d9e:	8861      	ldrh	r1, [r4, #2]
 8006da0:	0a09      	lsrs	r1, r1, #8
 8006da2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8006da6:	f7ff f8cd 	bl	8005f44 <WIZCHIP_WRITE>
 8006daa:	78a1      	ldrb	r1, [r4, #2]
 8006dac:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8006db0:	f7ff f8c8 	bl	8005f44 <WIZCHIP_WRITE>
}
 8006db4:	bd10      	pop	{r4, pc}

08006db6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8006db6:	b538      	push	{r3, r4, r5, lr}
 8006db8:	4605      	mov	r5, r0
   nettime->retry_cnt = getRCR();
 8006dba:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8006dbe:	f7ff f88f 	bl	8005ee0 <WIZCHIP_READ>
 8006dc2:	7028      	strb	r0, [r5, #0]
   nettime->time_100us = getRTR();
 8006dc4:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8006dc8:	f7ff f88a 	bl	8005ee0 <WIZCHIP_READ>
 8006dcc:	b284      	uxth	r4, r0
 8006dce:	0224      	lsls	r4, r4, #8
 8006dd0:	b2a4      	uxth	r4, r4
 8006dd2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8006dd6:	f7ff f883 	bl	8005ee0 <WIZCHIP_READ>
 8006dda:	fa14 f480 	uxtah	r4, r4, r0
 8006dde:	806c      	strh	r4, [r5, #2]
}
 8006de0:	bd38      	pop	{r3, r4, r5, pc}

08006de2 <ctlnetwork>:
{
 8006de2:	b510      	push	{r4, lr}
 8006de4:	460c      	mov	r4, r1
   switch(cntype)
 8006de6:	2805      	cmp	r0, #5
 8006de8:	d821      	bhi.n	8006e2e <ctlnetwork+0x4c>
 8006dea:	e8df f000 	tbb	[pc, r0]
 8006dee:	0803      	.short	0x0803
 8006df0:	1b16110d 	.word	0x1b16110d
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8006df4:	4608      	mov	r0, r1
 8006df6:	f7ff ff57 	bl	8006ca8 <wizchip_setnetinfo>
   return 0;
 8006dfa:	2000      	movs	r0, #0
}
 8006dfc:	bd10      	pop	{r4, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8006dfe:	4608      	mov	r0, r1
 8006e00:	f7ff ff80 	bl	8006d04 <wizchip_getnetinfo>
   return 0;
 8006e04:	2000      	movs	r0, #0
         break;
 8006e06:	e7f9      	b.n	8006dfc <ctlnetwork+0x1a>
         return wizchip_setnetmode(*(netmode_type*)arg);
 8006e08:	7808      	ldrb	r0, [r1, #0]
 8006e0a:	f7ff ffa9 	bl	8006d60 <wizchip_setnetmode>
 8006e0e:	e7f5      	b.n	8006dfc <ctlnetwork+0x1a>
         *(netmode_type*)arg = wizchip_getnetmode();
 8006e10:	f7ff ffb9 	bl	8006d86 <wizchip_getnetmode>
 8006e14:	7020      	strb	r0, [r4, #0]
   return 0;
 8006e16:	2000      	movs	r0, #0
         break;
 8006e18:	e7f0      	b.n	8006dfc <ctlnetwork+0x1a>
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8006e1a:	4608      	mov	r0, r1
 8006e1c:	f7ff ffb8 	bl	8006d90 <wizchip_settimeout>
   return 0;
 8006e20:	2000      	movs	r0, #0
         break;
 8006e22:	e7eb      	b.n	8006dfc <ctlnetwork+0x1a>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8006e24:	4608      	mov	r0, r1
 8006e26:	f7ff ffc6 	bl	8006db6 <wizchip_gettimeout>
   return 0;
 8006e2a:	2000      	movs	r0, #0
         break;
 8006e2c:	e7e6      	b.n	8006dfc <ctlnetwork+0x1a>
   return 0;
 8006e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e32:	e7e3      	b.n	8006dfc <ctlnetwork+0x1a>

08006e34 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8006e34:	b508      	push	{r3, lr}
   setSIPR(DHCP_allocated_ip);
 8006e36:	2204      	movs	r2, #4
 8006e38:	4908      	ldr	r1, [pc, #32]	; (8006e5c <default_ip_assign+0x28>)
 8006e3a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006e3e:	f7ff f8f3 	bl	8006028 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8006e42:	2204      	movs	r2, #4
 8006e44:	4906      	ldr	r1, [pc, #24]	; (8006e60 <default_ip_assign+0x2c>)
 8006e46:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006e4a:	f7ff f8ed 	bl	8006028 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8006e4e:	2204      	movs	r2, #4
 8006e50:	4904      	ldr	r1, [pc, #16]	; (8006e64 <default_ip_assign+0x30>)
 8006e52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006e56:	f7ff f8e7 	bl	8006028 <WIZCHIP_WRITE_BUF>
}
 8006e5a:	bd08      	pop	{r3, pc}
 8006e5c:	20001118 	.word	0x20001118
 8006e60:	2000111c 	.word	0x2000111c
 8006e64:	20001114 	.word	0x20001114

08006e68 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8006e68:	b508      	push	{r3, lr}
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8006e6a:	2180      	movs	r1, #128	; 0x80
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	f7ff f869 	bl	8005f44 <WIZCHIP_WRITE>
   getMR(); // for delay
 8006e72:	2000      	movs	r0, #0
 8006e74:	f7ff f834 	bl	8005ee0 <WIZCHIP_READ>
   default_ip_assign();
 8006e78:	f7ff ffdc 	bl	8006e34 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8006e7c:	2206      	movs	r2, #6
 8006e7e:	4903      	ldr	r1, [pc, #12]	; (8006e8c <default_ip_update+0x24>)
 8006e80:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006e84:	f7ff f8d0 	bl	8006028 <WIZCHIP_WRITE_BUF>
}
 8006e88:	bd08      	pop	{r3, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20003e10 	.word	0x20003e10

08006e90 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8006e90:	b508      	push	{r3, lr}
	// WIZchip Software Reset
	setMR(MR_RST);
 8006e92:	2180      	movs	r1, #128	; 0x80
 8006e94:	2000      	movs	r0, #0
 8006e96:	f7ff f855 	bl	8005f44 <WIZCHIP_WRITE>
	getMR(); // for delay
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	f7ff f820 	bl	8005ee0 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8006ea0:	2206      	movs	r2, #6
 8006ea2:	4903      	ldr	r1, [pc, #12]	; (8006eb0 <default_ip_conflict+0x20>)
 8006ea4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006ea8:	f7ff f8be 	bl	8006028 <WIZCHIP_WRITE_BUF>
}
 8006eac:	bd08      	pop	{r3, pc}
 8006eae:	bf00      	nop
 8006eb0:	20003e10 	.word	0x20003e10

08006eb4 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8006eb4:	b410      	push	{r4}
   dhcp_ip_assign   = default_ip_assign;
 8006eb6:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <reg_dhcp_cbfunc+0x30>)
 8006eb8:	4c0b      	ldr	r4, [pc, #44]	; (8006ee8 <reg_dhcp_cbfunc+0x34>)
 8006eba:	601c      	str	r4, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <reg_dhcp_cbfunc+0x38>)
 8006ebe:	4c0c      	ldr	r4, [pc, #48]	; (8006ef0 <reg_dhcp_cbfunc+0x3c>)
 8006ec0:	601c      	str	r4, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8006ec2:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <reg_dhcp_cbfunc+0x40>)
 8006ec4:	4c0c      	ldr	r4, [pc, #48]	; (8006ef8 <reg_dhcp_cbfunc+0x44>)
 8006ec6:	601c      	str	r4, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8006ec8:	b110      	cbz	r0, 8006ed0 <reg_dhcp_cbfunc+0x1c>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4805      	ldr	r0, [pc, #20]	; (8006ee4 <reg_dhcp_cbfunc+0x30>)
 8006ece:	6003      	str	r3, [r0, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8006ed0:	b109      	cbz	r1, 8006ed6 <reg_dhcp_cbfunc+0x22>
 8006ed2:	4b06      	ldr	r3, [pc, #24]	; (8006eec <reg_dhcp_cbfunc+0x38>)
 8006ed4:	6019      	str	r1, [r3, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8006ed6:	b10a      	cbz	r2, 8006edc <reg_dhcp_cbfunc+0x28>
 8006ed8:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <reg_dhcp_cbfunc+0x40>)
 8006eda:	601a      	str	r2, [r3, #0]
}
 8006edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	200000bc 	.word	0x200000bc
 8006ee8:	08006e35 	.word	0x08006e35
 8006eec:	200000c4 	.word	0x200000c4
 8006ef0:	08006e69 	.word	0x08006e69
 8006ef4:	200000c0 	.word	0x200000c0
 8006ef8:	08006e91 	.word	0x08006e91

08006efc <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8006efc:	b510      	push	{r4, lr}
 8006efe:	b082      	sub	sp, #8
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8006f00:	2206      	movs	r2, #6
 8006f02:	4669      	mov	r1, sp
 8006f04:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006f08:	f7ff f850 	bl	8005fac <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8006f0c:	4a32      	ldr	r2, [pc, #200]	; (8006fd8 <makeDHCPMSG+0xdc>)
 8006f0e:	6811      	ldr	r1, [r2, #0]
 8006f10:	2301      	movs	r3, #1
 8006f12:	700b      	strb	r3, [r1, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8006f14:	6811      	ldr	r1, [r2, #0]
 8006f16:	704b      	strb	r3, [r1, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8006f18:	6811      	ldr	r1, [r2, #0]
 8006f1a:	2306      	movs	r3, #6
 8006f1c:	708b      	strb	r3, [r1, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8006f1e:	6810      	ldr	r0, [r2, #0]
 8006f20:	2100      	movs	r1, #0
 8006f22:	70c1      	strb	r1, [r0, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8006f24:	6812      	ldr	r2, [r2, #0]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8006f26:	482d      	ldr	r0, [pc, #180]	; (8006fdc <makeDHCPMSG+0xe0>)
 8006f28:	6800      	ldr	r0, [r0, #0]
 8006f2a:	0e04      	lsrs	r4, r0, #24
 8006f2c:	7114      	strb	r4, [r2, #4]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8006f2e:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8006f32:	7154      	strb	r4, [r2, #5]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8006f34:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8006f38:	7194      	strb	r4, [r2, #6]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8006f3a:	71d0      	strb	r0, [r2, #7]
	pDHCPMSG->secs    = DHCP_SECS;
 8006f3c:	8111      	strh	r1, [r2, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8006f3e:	2080      	movs	r0, #128	; 0x80
 8006f40:	7290      	strb	r0, [r2, #10]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8006f42:	72d1      	strb	r1, [r2, #11]

	pDHCPMSG->ciaddr[0] = 0;
 8006f44:	7311      	strb	r1, [r2, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8006f46:	7351      	strb	r1, [r2, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8006f48:	7391      	strb	r1, [r2, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8006f4a:	73d1      	strb	r1, [r2, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8006f4c:	7411      	strb	r1, [r2, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8006f4e:	7451      	strb	r1, [r2, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8006f50:	7491      	strb	r1, [r2, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8006f52:	74d1      	strb	r1, [r2, #19]

	pDHCPMSG->siaddr[0] = 0;
 8006f54:	7511      	strb	r1, [r2, #20]
	pDHCPMSG->siaddr[1] = 0;
 8006f56:	7551      	strb	r1, [r2, #21]
	pDHCPMSG->siaddr[2] = 0;
 8006f58:	7591      	strb	r1, [r2, #22]
	pDHCPMSG->siaddr[3] = 0;
 8006f5a:	75d1      	strb	r1, [r2, #23]

	pDHCPMSG->giaddr[0] = 0;
 8006f5c:	7611      	strb	r1, [r2, #24]
	pDHCPMSG->giaddr[1] = 0;
 8006f5e:	7651      	strb	r1, [r2, #25]
	pDHCPMSG->giaddr[2] = 0;
 8006f60:	7691      	strb	r1, [r2, #26]
	pDHCPMSG->giaddr[3] = 0;
 8006f62:	76d1      	strb	r1, [r2, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8006f64:	491e      	ldr	r1, [pc, #120]	; (8006fe0 <makeDHCPMSG+0xe4>)
 8006f66:	7808      	ldrb	r0, [r1, #0]
 8006f68:	7710      	strb	r0, [r2, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8006f6a:	7848      	ldrb	r0, [r1, #1]
 8006f6c:	7750      	strb	r0, [r2, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8006f6e:	7888      	ldrb	r0, [r1, #2]
 8006f70:	7790      	strb	r0, [r2, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8006f72:	78c8      	ldrb	r0, [r1, #3]
 8006f74:	77d0      	strb	r0, [r2, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8006f76:	7908      	ldrb	r0, [r1, #4]
 8006f78:	f882 0020 	strb.w	r0, [r2, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8006f7c:	7949      	ldrb	r1, [r1, #5]
 8006f7e:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8006f82:	e004      	b.n	8006f8e <makeDHCPMSG+0x92>
 8006f84:	18d1      	adds	r1, r2, r3
 8006f86:	2000      	movs	r0, #0
 8006f88:	7708      	strb	r0, [r1, #28]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b0f      	cmp	r3, #15
 8006f90:	d9f8      	bls.n	8006f84 <makeDHCPMSG+0x88>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e005      	b.n	8006fa2 <makeDHCPMSG+0xa6>
 8006f96:	18d1      	adds	r1, r2, r3
 8006f98:	2000      	movs	r0, #0
 8006f9a:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b3f      	cmp	r3, #63	; 0x3f
 8006fa4:	d9f7      	bls.n	8006f96 <makeDHCPMSG+0x9a>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006fac:	d106      	bne.n	8006fbc <makeDHCPMSG+0xc0>
 8006fae:	18d1      	adds	r1, r2, r3
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	f881 006c 	strb.w	r0, [r1, #108]	; 0x6c
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	e7f5      	b.n	8006fa8 <makeDHCPMSG+0xac>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8006fbc:	2363      	movs	r3, #99	; 0x63
 8006fbe:	f882 30ec 	strb.w	r3, [r2, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8006fc2:	2182      	movs	r1, #130	; 0x82
 8006fc4:	f882 10ed 	strb.w	r1, [r2, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8006fc8:	2153      	movs	r1, #83	; 0x53
 8006fca:	f882 10ee 	strb.w	r1, [r2, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8006fce:	f882 30ef 	strb.w	r3, [r2, #239]	; 0xef
}
 8006fd2:	b002      	add	sp, #8
 8006fd4:	bd10      	pop	{r4, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20003e24 	.word	0x20003e24
 8006fdc:	20003e18 	.word	0x20003e18
 8006fe0:	20003e10 	.word	0x20003e10

08006fe4 <send_DHCP_DECLINE>:

}

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8006fe4:	b500      	push	{lr}
 8006fe6:	b085      	sub	sp, #20
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
	
	makeDHCPMSG();
 8006fe8:	f7ff ff88 	bl	8006efc <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8006fec:	4b37      	ldr	r3, [pc, #220]	; (80070cc <send_DHCP_DECLINE+0xe8>)
 8006fee:	6819      	ldr	r1, [r3, #0]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	728b      	strb	r3, [r1, #10]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8006ff4:	72cb      	strb	r3, [r1, #11]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8006ff6:	2335      	movs	r3, #53	; 0x35
 8006ff8:	f881 30f0 	strb.w	r3, [r1, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x01;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f881 30f1 	strb.w	r3, [r1, #241]	; 0xf1
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8007002:	2204      	movs	r2, #4
 8007004:	f881 20f2 	strb.w	r2, [r1, #242]	; 0xf2

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8007008:	203d      	movs	r0, #61	; 0x3d
 800700a:	f881 00f3 	strb.w	r0, [r1, #243]	; 0xf3
	pDHCPMSG->OPT[k++] = 0x07;
 800700e:	2007      	movs	r0, #7
 8007010:	f881 00f4 	strb.w	r0, [r1, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = 0x01;
 8007014:	f881 30f5 	strb.w	r3, [r1, #245]	; 0xf5
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8007018:	4b2d      	ldr	r3, [pc, #180]	; (80070d0 <send_DHCP_DECLINE+0xec>)
 800701a:	7818      	ldrb	r0, [r3, #0]
 800701c:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8007020:	7858      	ldrb	r0, [r3, #1]
 8007022:	f881 00f7 	strb.w	r0, [r1, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8007026:	7898      	ldrb	r0, [r3, #2]
 8007028:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800702c:	78d8      	ldrb	r0, [r3, #3]
 800702e:	f881 00f9 	strb.w	r0, [r1, #249]	; 0xf9
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8007032:	7918      	ldrb	r0, [r3, #4]
 8007034:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8007038:	795b      	ldrb	r3, [r3, #5]
 800703a:	f881 30fb 	strb.w	r3, [r1, #251]	; 0xfb

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800703e:	2332      	movs	r3, #50	; 0x32
 8007040:	f881 30fc 	strb.w	r3, [r1, #252]	; 0xfc
	pDHCPMSG->OPT[k++] = 0x04;
 8007044:	f881 20fd 	strb.w	r2, [r1, #253]	; 0xfd
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8007048:	4b22      	ldr	r3, [pc, #136]	; (80070d4 <send_DHCP_DECLINE+0xf0>)
 800704a:	7818      	ldrb	r0, [r3, #0]
 800704c:	f881 00fe 	strb.w	r0, [r1, #254]	; 0xfe
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8007050:	7858      	ldrb	r0, [r3, #1]
 8007052:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8007056:	7898      	ldrb	r0, [r3, #2]
 8007058:	f881 0100 	strb.w	r0, [r1, #256]	; 0x100
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800705c:	78db      	ldrb	r3, [r3, #3]
 800705e:	f881 3101 	strb.w	r3, [r1, #257]	; 0x101

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8007062:	2336      	movs	r3, #54	; 0x36
 8007064:	f881 3102 	strb.w	r3, [r1, #258]	; 0x102
	pDHCPMSG->OPT[k++] = 0x04;
 8007068:	f881 2103 	strb.w	r2, [r1, #259]	; 0x103
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800706c:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <send_DHCP_DECLINE+0xf4>)
 800706e:	781a      	ldrb	r2, [r3, #0]
 8007070:	f881 2104 	strb.w	r2, [r1, #260]	; 0x104
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8007074:	785a      	ldrb	r2, [r3, #1]
 8007076:	f881 2105 	strb.w	r2, [r1, #261]	; 0x105
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800707a:	789a      	ldrb	r2, [r3, #2]
 800707c:	f881 2106 	strb.w	r2, [r1, #262]	; 0x106
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8007080:	78db      	ldrb	r3, [r3, #3]
 8007082:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107

	pDHCPMSG->OPT[k++] = endOption;
 8007086:	23ff      	movs	r3, #255	; 0xff
 8007088:	f881 3108 	strb.w	r3, [r1, #264]	; 0x108

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800708c:	231d      	movs	r3, #29
 800708e:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8007092:	da05      	bge.n	80070a0 <send_DHCP_DECLINE+0xbc>
 8007094:	18ca      	adds	r2, r1, r3
 8007096:	2000      	movs	r0, #0
 8007098:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
 800709c:	3301      	adds	r3, #1
 800709e:	e7f6      	b.n	800708e <send_DHCP_DECLINE+0xaa>

	//send broadcasting packet
	ip[0] = 0xFF;
 80070a0:	23ff      	movs	r3, #255	; 0xff
 80070a2:	f88d 300c 	strb.w	r3, [sp, #12]
	ip[1] = 0xFF;
 80070a6:	f88d 300d 	strb.w	r3, [sp, #13]
	ip[2] = 0xFF;
 80070aa:	f88d 300e 	strb.w	r3, [sp, #14]
	ip[3] = 0xFF;
 80070ae:	f88d 300f 	strb.w	r3, [sp, #15]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80070b2:	2343      	movs	r3, #67	; 0x43
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	ab03      	add	r3, sp, #12
 80070b8:	f44f 7209 	mov.w	r2, #548	; 0x224
 80070bc:	4807      	ldr	r0, [pc, #28]	; (80070dc <send_DHCP_DECLINE+0xf8>)
 80070be:	7800      	ldrb	r0, [r0, #0]
 80070c0:	f7ff f9ba 	bl	8006438 <sendto>
}
 80070c4:	b005      	add	sp, #20
 80070c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80070ca:	bf00      	nop
 80070cc:	20003e24 	.word	0x20003e24
 80070d0:	20003e10 	.word	0x20003e10
 80070d4:	20001118 	.word	0x20001118
 80070d8:	20003e20 	.word	0x20003e20
 80070dc:	20003e28 	.word	0x20003e28

080070e0 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 80070e0:	b530      	push	{r4, r5, lr}
 80070e2:	b087      	sub	sp, #28
	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 80070e4:	4b8b      	ldr	r3, [pc, #556]	; (8007314 <parseDHCPMSG+0x234>)
 80070e6:	7818      	ldrb	r0, [r3, #0]
 80070e8:	f7ff f809 	bl	80060fe <getSn_RX_RSR>
 80070ec:	b910      	cbnz	r0, 80070f4 <parseDHCPMSG+0x14>
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
 80070ee:	2000      	movs	r0, #0
   				break;
			} // switch
		} // while
	} // if
	return	type;
}
 80070f0:	b007      	add	sp, #28
 80070f2:	bd30      	pop	{r4, r5, pc}
 80070f4:	4602      	mov	r2, r0
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 80070f6:	f10d 030e 	add.w	r3, sp, #14
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	ab04      	add	r3, sp, #16
 80070fe:	4986      	ldr	r1, [pc, #536]	; (8007318 <parseDHCPMSG+0x238>)
 8007100:	6809      	ldr	r1, [r1, #0]
 8007102:	4884      	ldr	r0, [pc, #528]	; (8007314 <parseDHCPMSG+0x234>)
 8007104:	7800      	ldrb	r0, [r0, #0]
 8007106:	f7ff fa47 	bl	8006598 <recvfrom>
	if (svr_port == DHCP_SERVER_PORT) {
 800710a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800710e:	2b43      	cmp	r3, #67	; 0x43
 8007110:	d002      	beq.n	8007118 <parseDHCPMSG+0x38>
	uint8_t type = 0;
 8007112:	2000      	movs	r0, #0
	return	type;
 8007114:	b240      	sxtb	r0, r0
 8007116:	e7eb      	b.n	80070f0 <parseDHCPMSG+0x10>
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8007118:	4b7f      	ldr	r3, [pc, #508]	; (8007318 <parseDHCPMSG+0x238>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	7f19      	ldrb	r1, [r3, #28]
 800711e:	4a7f      	ldr	r2, [pc, #508]	; (800731c <parseDHCPMSG+0x23c>)
 8007120:	7812      	ldrb	r2, [r2, #0]
 8007122:	4291      	cmp	r1, r2
 8007124:	f040 80e2 	bne.w	80072ec <parseDHCPMSG+0x20c>
 8007128:	7f59      	ldrb	r1, [r3, #29]
 800712a:	4a7c      	ldr	r2, [pc, #496]	; (800731c <parseDHCPMSG+0x23c>)
 800712c:	7852      	ldrb	r2, [r2, #1]
 800712e:	4291      	cmp	r1, r2
 8007130:	f040 80de 	bne.w	80072f0 <parseDHCPMSG+0x210>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8007134:	7f99      	ldrb	r1, [r3, #30]
 8007136:	4a79      	ldr	r2, [pc, #484]	; (800731c <parseDHCPMSG+0x23c>)
 8007138:	7892      	ldrb	r2, [r2, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800713a:	4291      	cmp	r1, r2
 800713c:	f040 80da 	bne.w	80072f4 <parseDHCPMSG+0x214>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8007140:	7fd9      	ldrb	r1, [r3, #31]
 8007142:	4a76      	ldr	r2, [pc, #472]	; (800731c <parseDHCPMSG+0x23c>)
 8007144:	78d2      	ldrb	r2, [r2, #3]
 8007146:	4291      	cmp	r1, r2
 8007148:	f040 80d6 	bne.w	80072f8 <parseDHCPMSG+0x218>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800714c:	f893 1020 	ldrb.w	r1, [r3, #32]
 8007150:	4a72      	ldr	r2, [pc, #456]	; (800731c <parseDHCPMSG+0x23c>)
 8007152:	7912      	ldrb	r2, [r2, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8007154:	4291      	cmp	r1, r2
 8007156:	f040 80d1 	bne.w	80072fc <parseDHCPMSG+0x21c>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800715a:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 800715e:	4a6f      	ldr	r2, [pc, #444]	; (800731c <parseDHCPMSG+0x23c>)
 8007160:	7952      	ldrb	r2, [r2, #5]
 8007162:	4291      	cmp	r1, r2
 8007164:	f040 80cc 	bne.w	8007300 <parseDHCPMSG+0x220>
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8007168:	4a6d      	ldr	r2, [pc, #436]	; (8007320 <parseDHCPMSG+0x240>)
 800716a:	7811      	ldrb	r1, [r2, #0]
 800716c:	b939      	cbnz	r1, 800717e <parseDHCPMSG+0x9e>
 800716e:	7852      	ldrb	r2, [r2, #1]
 8007170:	b92a      	cbnz	r2, 800717e <parseDHCPMSG+0x9e>
 8007172:	4a6b      	ldr	r2, [pc, #428]	; (8007320 <parseDHCPMSG+0x240>)
 8007174:	7892      	ldrb	r2, [r2, #2]
 8007176:	b912      	cbnz	r2, 800717e <parseDHCPMSG+0x9e>
 8007178:	4a69      	ldr	r2, [pc, #420]	; (8007320 <parseDHCPMSG+0x240>)
 800717a:	78d2      	ldrb	r2, [r2, #3]
 800717c:	b1ea      	cbz	r2, 80071ba <parseDHCPMSG+0xda>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800717e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8007182:	4291      	cmp	r1, r2
 8007184:	d020      	beq.n	80071c8 <parseDHCPMSG+0xe8>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8007186:	4967      	ldr	r1, [pc, #412]	; (8007324 <parseDHCPMSG+0x244>)
 8007188:	7809      	ldrb	r1, [r1, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800718a:	428a      	cmp	r2, r1
 800718c:	f040 80ba 	bne.w	8007304 <parseDHCPMSG+0x224>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8007190:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8007194:	4a63      	ldr	r2, [pc, #396]	; (8007324 <parseDHCPMSG+0x244>)
 8007196:	7852      	ldrb	r2, [r2, #1]
 8007198:	4291      	cmp	r1, r2
 800719a:	f040 80b5 	bne.w	8007308 <parseDHCPMSG+0x228>
 800719e:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80071a2:	4a60      	ldr	r2, [pc, #384]	; (8007324 <parseDHCPMSG+0x244>)
 80071a4:	7892      	ldrb	r2, [r2, #2]
 80071a6:	4291      	cmp	r1, r2
 80071a8:	f040 80b0 	bne.w	800730c <parseDHCPMSG+0x22c>
 80071ac:	f89d 1013 	ldrb.w	r1, [sp, #19]
 80071b0:	4a5c      	ldr	r2, [pc, #368]	; (8007324 <parseDHCPMSG+0x244>)
 80071b2:	78d2      	ldrb	r2, [r2, #3]
 80071b4:	4291      	cmp	r1, r2
 80071b6:	f040 80ab 	bne.w	8007310 <parseDHCPMSG+0x230>
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 80071ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
		e = p + (len - 240);
 80071be:	b282      	uxth	r2, r0
 80071c0:	3af0      	subs	r2, #240	; 0xf0
 80071c2:	440a      	add	r2, r1
	uint8_t type = 0;
 80071c4:	2000      	movs	r0, #0
		while ( p < e ) {
 80071c6:	e015      	b.n	80071f4 <parseDHCPMSG+0x114>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80071c8:	f89d 4011 	ldrb.w	r4, [sp, #17]
 80071cc:	4954      	ldr	r1, [pc, #336]	; (8007320 <parseDHCPMSG+0x240>)
 80071ce:	7849      	ldrb	r1, [r1, #1]
 80071d0:	428c      	cmp	r4, r1
 80071d2:	d1d8      	bne.n	8007186 <parseDHCPMSG+0xa6>
 80071d4:	f89d 4012 	ldrb.w	r4, [sp, #18]
 80071d8:	4951      	ldr	r1, [pc, #324]	; (8007320 <parseDHCPMSG+0x240>)
 80071da:	7889      	ldrb	r1, [r1, #2]
 80071dc:	428c      	cmp	r4, r1
 80071de:	d1d2      	bne.n	8007186 <parseDHCPMSG+0xa6>
 80071e0:	f89d 4013 	ldrb.w	r4, [sp, #19]
 80071e4:	494e      	ldr	r1, [pc, #312]	; (8007320 <parseDHCPMSG+0x240>)
 80071e6:	78c9      	ldrb	r1, [r1, #3]
 80071e8:	428c      	cmp	r4, r1
 80071ea:	d1cc      	bne.n	8007186 <parseDHCPMSG+0xa6>
 80071ec:	e7e5      	b.n	80071ba <parseDHCPMSG+0xda>
			switch ( *p ) {
 80071ee:	2bff      	cmp	r3, #255	; 0xff
 80071f0:	d178      	bne.n	80072e4 <parseDHCPMSG+0x204>
 80071f2:	4611      	mov	r1, r2
		while ( p < e ) {
 80071f4:	4291      	cmp	r1, r2
 80071f6:	d28d      	bcs.n	8007114 <parseDHCPMSG+0x34>
			switch ( *p ) {
 80071f8:	780b      	ldrb	r3, [r1, #0]
 80071fa:	2b36      	cmp	r3, #54	; 0x36
 80071fc:	d8f7      	bhi.n	80071ee <parseDHCPMSG+0x10e>
 80071fe:	2b36      	cmp	r3, #54	; 0x36
 8007200:	d870      	bhi.n	80072e4 <parseDHCPMSG+0x204>
 8007202:	e8df f003 	tbb	[pc, r3]
 8007206:	211c      	.short	0x211c
 8007208:	6f6f2c6f 	.word	0x6f6f2c6f
 800720c:	6f6f6f3a 	.word	0x6f6f6f3a
 8007210:	6f6f6f6f 	.word	0x6f6f6f6f
 8007214:	6f6f6f6f 	.word	0x6f6f6f6f
 8007218:	6f6f6f6f 	.word	0x6f6f6f6f
 800721c:	6f6f6f6f 	.word	0x6f6f6f6f
 8007220:	6f6f6f6f 	.word	0x6f6f6f6f
 8007224:	6f6f6f6f 	.word	0x6f6f6f6f
 8007228:	6f6f6f6f 	.word	0x6f6f6f6f
 800722c:	6f6f6f6f 	.word	0x6f6f6f6f
 8007230:	6f6f6f6f 	.word	0x6f6f6f6f
 8007234:	6f6f6f6f 	.word	0x6f6f6f6f
 8007238:	1e6f486f 	.word	0x1e6f486f
 800723c:	57          	.byte	0x57
 800723d:	00          	.byte	0x00
   				p++;
 800723e:	3101      	adds	r1, #1
   				break;
 8007240:	e7d8      	b.n	80071f4 <parseDHCPMSG+0x114>
   				type = *p++;
 8007242:	7888      	ldrb	r0, [r1, #2]
 8007244:	3103      	adds	r1, #3
   				break;
 8007246:	e7d5      	b.n	80071f4 <parseDHCPMSG+0x114>
   				DHCP_allocated_sn[0] = *p++;
 8007248:	788c      	ldrb	r4, [r1, #2]
 800724a:	4b37      	ldr	r3, [pc, #220]	; (8007328 <parseDHCPMSG+0x248>)
 800724c:	701c      	strb	r4, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 800724e:	78cc      	ldrb	r4, [r1, #3]
 8007250:	705c      	strb	r4, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8007252:	790c      	ldrb	r4, [r1, #4]
 8007254:	709c      	strb	r4, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8007256:	794c      	ldrb	r4, [r1, #5]
 8007258:	70dc      	strb	r4, [r3, #3]
 800725a:	3106      	adds	r1, #6
   				break;
 800725c:	e7ca      	b.n	80071f4 <parseDHCPMSG+0x114>
   				opt_len = *p++;       
 800725e:	784c      	ldrb	r4, [r1, #1]
   				DHCP_allocated_gw[0] = *p++;
 8007260:	788d      	ldrb	r5, [r1, #2]
 8007262:	4b32      	ldr	r3, [pc, #200]	; (800732c <parseDHCPMSG+0x24c>)
 8007264:	701d      	strb	r5, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8007266:	78cd      	ldrb	r5, [r1, #3]
 8007268:	705d      	strb	r5, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 800726a:	790d      	ldrb	r5, [r1, #4]
 800726c:	709d      	strb	r5, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 800726e:	1d8d      	adds	r5, r1, #6
 8007270:	7949      	ldrb	r1, [r1, #5]
 8007272:	70d9      	strb	r1, [r3, #3]
   				p = p + (opt_len - 4);
 8007274:	1f23      	subs	r3, r4, #4
 8007276:	18e9      	adds	r1, r5, r3
   				break;
 8007278:	e7bc      	b.n	80071f4 <parseDHCPMSG+0x114>
   				opt_len = *p++;       
 800727a:	784c      	ldrb	r4, [r1, #1]
   				DHCP_allocated_dns[0] = *p++;
 800727c:	788d      	ldrb	r5, [r1, #2]
 800727e:	4b2c      	ldr	r3, [pc, #176]	; (8007330 <parseDHCPMSG+0x250>)
 8007280:	701d      	strb	r5, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8007282:	78cd      	ldrb	r5, [r1, #3]
 8007284:	705d      	strb	r5, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8007286:	790d      	ldrb	r5, [r1, #4]
 8007288:	709d      	strb	r5, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 800728a:	1d8d      	adds	r5, r1, #6
 800728c:	7949      	ldrb	r1, [r1, #5]
 800728e:	70d9      	strb	r1, [r3, #3]
   				p = p + (opt_len - 4);
 8007290:	1f23      	subs	r3, r4, #4
 8007292:	18e9      	adds	r1, r5, r3
   				break;
 8007294:	e7ae      	b.n	80071f4 <parseDHCPMSG+0x114>
   				dhcp_lease_time  = *p++;
 8007296:	788b      	ldrb	r3, [r1, #2]
 8007298:	4d26      	ldr	r5, [pc, #152]	; (8007334 <parseDHCPMSG+0x254>)
 800729a:	602b      	str	r3, [r5, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800729c:	78cc      	ldrb	r4, [r1, #3]
 800729e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80072a2:	790b      	ldrb	r3, [r1, #4]
 80072a4:	eb03 2404 	add.w	r4, r3, r4, lsl #8
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80072a8:	794b      	ldrb	r3, [r1, #5]
 80072aa:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 80072ae:	602b      	str	r3, [r5, #0]
 80072b0:	3106      	adds	r1, #6
   				break;
 80072b2:	e79f      	b.n	80071f4 <parseDHCPMSG+0x114>
   				DHCP_SIP[0] = *p++;
 80072b4:	788c      	ldrb	r4, [r1, #2]
 80072b6:	4b1a      	ldr	r3, [pc, #104]	; (8007320 <parseDHCPMSG+0x240>)
 80072b8:	701c      	strb	r4, [r3, #0]
   				DHCP_SIP[1] = *p++;
 80072ba:	78cc      	ldrb	r4, [r1, #3]
 80072bc:	705c      	strb	r4, [r3, #1]
   				DHCP_SIP[2] = *p++;
 80072be:	790c      	ldrb	r4, [r1, #4]
 80072c0:	709c      	strb	r4, [r3, #2]
   				DHCP_SIP[3] = *p++;
 80072c2:	794c      	ldrb	r4, [r1, #5]
 80072c4:	70dc      	strb	r4, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 80072c6:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80072ca:	4b16      	ldr	r3, [pc, #88]	; (8007324 <parseDHCPMSG+0x244>)
 80072cc:	701c      	strb	r4, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 80072ce:	f89d 4011 	ldrb.w	r4, [sp, #17]
 80072d2:	705c      	strb	r4, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 80072d4:	f89d 4012 	ldrb.w	r4, [sp, #18]
 80072d8:	709c      	strb	r4, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 80072da:	f89d 4013 	ldrb.w	r4, [sp, #19]
 80072de:	70dc      	strb	r4, [r3, #3]
   				DHCP_SIP[3] = *p++;
 80072e0:	3106      	adds	r1, #6
   				break;
 80072e2:	e787      	b.n	80071f4 <parseDHCPMSG+0x114>
   				opt_len = *p++;
 80072e4:	1c8c      	adds	r4, r1, #2
 80072e6:	784b      	ldrb	r3, [r1, #1]
   				p += opt_len;
 80072e8:	18e1      	adds	r1, r4, r3
   				break;
 80072ea:	e783      	b.n	80071f4 <parseDHCPMSG+0x114>
         return 0;
 80072ec:	2000      	movs	r0, #0
 80072ee:	e6ff      	b.n	80070f0 <parseDHCPMSG+0x10>
 80072f0:	2000      	movs	r0, #0
 80072f2:	e6fd      	b.n	80070f0 <parseDHCPMSG+0x10>
 80072f4:	2000      	movs	r0, #0
 80072f6:	e6fb      	b.n	80070f0 <parseDHCPMSG+0x10>
 80072f8:	2000      	movs	r0, #0
 80072fa:	e6f9      	b.n	80070f0 <parseDHCPMSG+0x10>
 80072fc:	2000      	movs	r0, #0
 80072fe:	e6f7      	b.n	80070f0 <parseDHCPMSG+0x10>
 8007300:	2000      	movs	r0, #0
 8007302:	e6f5      	b.n	80070f0 <parseDHCPMSG+0x10>
                return 0;
 8007304:	2000      	movs	r0, #0
 8007306:	e6f3      	b.n	80070f0 <parseDHCPMSG+0x10>
 8007308:	2000      	movs	r0, #0
 800730a:	e6f1      	b.n	80070f0 <parseDHCPMSG+0x10>
 800730c:	2000      	movs	r0, #0
 800730e:	e6ef      	b.n	80070f0 <parseDHCPMSG+0x10>
 8007310:	2000      	movs	r0, #0
 8007312:	e6ed      	b.n	80070f0 <parseDHCPMSG+0x10>
 8007314:	20003e28 	.word	0x20003e28
 8007318:	20003e24 	.word	0x20003e24
 800731c:	20003e10 	.word	0x20003e10
 8007320:	20003e20 	.word	0x20003e20
 8007324:	20003e1c 	.word	0x20003e1c
 8007328:	2000111c 	.word	0x2000111c
 800732c:	20001114 	.word	0x20001114
 8007330:	20001110 	.word	0x20001110
 8007334:	200000c8 	.word	0x200000c8

08007338 <check_DHCP_leasedIP>:
	}
	return ret;
}

int8_t check_DHCP_leasedIP(void)
{
 8007338:	b530      	push	{r4, r5, lr}
 800733a:	b083      	sub	sp, #12
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800733c:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8007340:	f7fe fdce 	bl	8005ee0 <WIZCHIP_READ>
 8007344:	4605      	mov	r5, r0
	setRCR(0x03);
 8007346:	2103      	movs	r1, #3
 8007348:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800734c:	f7fe fdfa 	bl	8005f44 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8007350:	f241 3388 	movw	r3, #5000	; 0x1388
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	4b0f      	ldr	r3, [pc, #60]	; (8007394 <check_DHCP_leasedIP+0x5c>)
 8007358:	2211      	movs	r2, #17
 800735a:	490f      	ldr	r1, [pc, #60]	; (8007398 <check_DHCP_leasedIP+0x60>)
 800735c:	480f      	ldr	r0, [pc, #60]	; (800739c <check_DHCP_leasedIP+0x64>)
 800735e:	7800      	ldrb	r0, [r0, #0]
 8007360:	f7ff f86a 	bl	8006438 <sendto>
 8007364:	4604      	mov	r4, r0

	// RCR value restore
	setRCR(tmp);
 8007366:	4629      	mov	r1, r5
 8007368:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800736c:	f7fe fdea 	bl	8005f44 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8007370:	f114 0f0d 	cmn.w	r4, #13
 8007374:	d102      	bne.n	800737c <check_DHCP_leasedIP+0x44>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8007376:	2001      	movs	r0, #1
		ret = dhcp_tick_1s;
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;

		return 0;
	}
}	
 8007378:	b003      	add	sp, #12
 800737a:	bd30      	pop	{r4, r5, pc}
		send_DHCP_DECLINE();
 800737c:	f7ff fe32 	bl	8006fe4 <send_DHCP_DECLINE>
		ret = dhcp_tick_1s;
 8007380:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <check_DHCP_leasedIP+0x68>)
 8007382:	681a      	ldr	r2, [r3, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <check_DHCP_leasedIP+0x68>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	2b01      	cmp	r3, #1
 800738c:	d9fa      	bls.n	8007384 <check_DHCP_leasedIP+0x4c>
		return 0;
 800738e:	2000      	movs	r0, #0
 8007390:	e7f2      	b.n	8007378 <check_DHCP_leasedIP+0x40>
 8007392:	bf00      	nop
 8007394:	20001118 	.word	0x20001118
 8007398:	0800a480 	.word	0x0800a480
 800739c:	20003e28 	.word	0x20003e28
 80073a0:	20001128 	.word	0x20001128

080073a4 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
	dhcp_tick_1s = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	4a04      	ldr	r2, [pc, #16]	; (80073b8 <reset_DHCP_timeout+0x14>)
 80073a8:	6013      	str	r3, [r2, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80073aa:	4a04      	ldr	r2, [pc, #16]	; (80073bc <reset_DHCP_timeout+0x18>)
 80073ac:	210a      	movs	r1, #10
 80073ae:	6011      	str	r1, [r2, #0]
	dhcp_retry_count = 0;
 80073b0:	4a03      	ldr	r2, [pc, #12]	; (80073c0 <reset_DHCP_timeout+0x1c>)
 80073b2:	7013      	strb	r3, [r2, #0]
}
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	20001128 	.word	0x20001128
 80073bc:	200000cc 	.word	0x200000cc
 80073c0:	20001124 	.word	0x20001124

080073c4 <DHCP_init>:
{
 80073c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073c6:	b083      	sub	sp, #12
 80073c8:	4606      	mov	r6, r0
 80073ca:	460d      	mov	r5, r1
   uint8_t zeroip[4] = {0,0,0,0};
 80073cc:	2300      	movs	r3, #0
 80073ce:	9301      	str	r3, [sp, #4]
   getSHAR(DHCP_CHADDR);
 80073d0:	4c24      	ldr	r4, [pc, #144]	; (8007464 <DHCP_init+0xa0>)
 80073d2:	2206      	movs	r2, #6
 80073d4:	4621      	mov	r1, r4
 80073d6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80073da:	f7fe fde7 	bl	8005fac <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80073de:	7820      	ldrb	r0, [r4, #0]
 80073e0:	7867      	ldrb	r7, [r4, #1]
 80073e2:	78a1      	ldrb	r1, [r4, #2]
 80073e4:	78e2      	ldrb	r2, [r4, #3]
 80073e6:	7923      	ldrb	r3, [r4, #4]
 80073e8:	7964      	ldrb	r4, [r4, #5]
 80073ea:	4338      	orrs	r0, r7
 80073ec:	4301      	orrs	r1, r0
 80073ee:	430a      	orrs	r2, r1
 80073f0:	4313      	orrs	r3, r2
 80073f2:	4323      	orrs	r3, r4
 80073f4:	d025      	beq.n	8007442 <DHCP_init+0x7e>
	DHCP_SOCKET = s; // SOCK_DHCP
 80073f6:	4b1c      	ldr	r3, [pc, #112]	; (8007468 <DHCP_init+0xa4>)
 80073f8:	701e      	strb	r6, [r3, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80073fa:	4b1c      	ldr	r3, [pc, #112]	; (800746c <DHCP_init+0xa8>)
 80073fc:	601d      	str	r5, [r3, #0]
		DHCP_XID += DHCP_CHADDR[3];
 80073fe:	4819      	ldr	r0, [pc, #100]	; (8007464 <DHCP_init+0xa0>)
 8007400:	78c1      	ldrb	r1, [r0, #3]
 8007402:	4b1b      	ldr	r3, [pc, #108]	; (8007470 <DHCP_init+0xac>)
 8007404:	440b      	add	r3, r1
		DHCP_XID += DHCP_CHADDR[4];
 8007406:	7904      	ldrb	r4, [r0, #4]
 8007408:	4423      	add	r3, r4
		DHCP_XID += DHCP_CHADDR[5];
 800740a:	7942      	ldrb	r2, [r0, #5]
 800740c:	4413      	add	r3, r2
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800740e:	4061      	eors	r1, r4
 8007410:	404a      	eors	r2, r1
 8007412:	4413      	add	r3, r2
 8007414:	4a17      	ldr	r2, [pc, #92]	; (8007474 <DHCP_init+0xb0>)
 8007416:	6013      	str	r3, [r2, #0]
	setSIPR(zeroip);
 8007418:	2204      	movs	r2, #4
 800741a:	eb0d 0102 	add.w	r1, sp, r2
 800741e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8007422:	f7fe fe01 	bl	8006028 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8007426:	2204      	movs	r2, #4
 8007428:	eb0d 0102 	add.w	r1, sp, r2
 800742c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007430:	f7fe fdfa 	bl	8006028 <WIZCHIP_WRITE_BUF>
	reset_DHCP_timeout();
 8007434:	f7ff ffb6 	bl	80073a4 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8007438:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <DHCP_init+0xb4>)
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
}
 800743e:	b003      	add	sp, #12
 8007440:	bdf0      	pop	{r4, r5, r6, r7, pc}
      DHCP_CHADDR[0] = 0x00;
 8007442:	4908      	ldr	r1, [pc, #32]	; (8007464 <DHCP_init+0xa0>)
 8007444:	2300      	movs	r3, #0
 8007446:	700b      	strb	r3, [r1, #0]
      DHCP_CHADDR[1] = 0x08;
 8007448:	2208      	movs	r2, #8
 800744a:	704a      	strb	r2, [r1, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800744c:	22dc      	movs	r2, #220	; 0xdc
 800744e:	708a      	strb	r2, [r1, #2]
      DHCP_CHADDR[3] = 0x00;
 8007450:	70cb      	strb	r3, [r1, #3]
      DHCP_CHADDR[4] = 0x00;
 8007452:	710b      	strb	r3, [r1, #4]
      DHCP_CHADDR[5] = 0x00; 
 8007454:	714b      	strb	r3, [r1, #5]
      setSHAR(DHCP_CHADDR);     
 8007456:	2206      	movs	r2, #6
 8007458:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800745c:	f7fe fde4 	bl	8006028 <WIZCHIP_WRITE_BUF>
 8007460:	e7c9      	b.n	80073f6 <DHCP_init+0x32>
 8007462:	bf00      	nop
 8007464:	20003e10 	.word	0x20003e10
 8007468:	20003e28 	.word	0x20003e28
 800746c:	20003e24 	.word	0x20003e24
 8007470:	12345678 	.word	0x12345678
 8007474:	20003e18 	.word	0x20003e18
 8007478:	20001125 	.word	0x20001125

0800747c <getIPfromDHCP>:
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
	ip[0] = DHCP_allocated_ip[0];
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <getIPfromDHCP+0x14>)
 800747e:	781a      	ldrb	r2, [r3, #0]
 8007480:	7002      	strb	r2, [r0, #0]
	ip[1] = DHCP_allocated_ip[1];
 8007482:	785a      	ldrb	r2, [r3, #1]
 8007484:	7042      	strb	r2, [r0, #1]
	ip[2] = DHCP_allocated_ip[2];	
 8007486:	789a      	ldrb	r2, [r3, #2]
 8007488:	7082      	strb	r2, [r0, #2]
	ip[3] = DHCP_allocated_ip[3];
 800748a:	78db      	ldrb	r3, [r3, #3]
 800748c:	70c3      	strb	r3, [r0, #3]
}
 800748e:	4770      	bx	lr
 8007490:	20001118 	.word	0x20001118

08007494 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
	ip[0] =DHCP_allocated_gw[0];
 8007494:	4b04      	ldr	r3, [pc, #16]	; (80074a8 <getGWfromDHCP+0x14>)
 8007496:	781a      	ldrb	r2, [r3, #0]
 8007498:	7002      	strb	r2, [r0, #0]
	ip[1] =DHCP_allocated_gw[1];
 800749a:	785a      	ldrb	r2, [r3, #1]
 800749c:	7042      	strb	r2, [r0, #1]
	ip[2] =DHCP_allocated_gw[2];
 800749e:	789a      	ldrb	r2, [r3, #2]
 80074a0:	7082      	strb	r2, [r0, #2]
	ip[3] =DHCP_allocated_gw[3];			
 80074a2:	78db      	ldrb	r3, [r3, #3]
 80074a4:	70c3      	strb	r3, [r0, #3]
}
 80074a6:	4770      	bx	lr
 80074a8:	20001114 	.word	0x20001114

080074ac <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
   ip[0] = DHCP_allocated_sn[0];
 80074ac:	4b04      	ldr	r3, [pc, #16]	; (80074c0 <getSNfromDHCP+0x14>)
 80074ae:	781a      	ldrb	r2, [r3, #0]
 80074b0:	7002      	strb	r2, [r0, #0]
   ip[1] = DHCP_allocated_sn[1];
 80074b2:	785a      	ldrb	r2, [r3, #1]
 80074b4:	7042      	strb	r2, [r0, #1]
   ip[2] = DHCP_allocated_sn[2];
 80074b6:	789a      	ldrb	r2, [r3, #2]
 80074b8:	7082      	strb	r2, [r0, #2]
   ip[3] = DHCP_allocated_sn[3];         
 80074ba:	78db      	ldrb	r3, [r3, #3]
 80074bc:	70c3      	strb	r3, [r0, #3]
}
 80074be:	4770      	bx	lr
 80074c0:	2000111c 	.word	0x2000111c

080074c4 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
   ip[0] = DHCP_allocated_dns[0];
 80074c4:	4b04      	ldr	r3, [pc, #16]	; (80074d8 <getDNSfromDHCP+0x14>)
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	7002      	strb	r2, [r0, #0]
   ip[1] = DHCP_allocated_dns[1];
 80074ca:	785a      	ldrb	r2, [r3, #1]
 80074cc:	7042      	strb	r2, [r0, #1]
   ip[2] = DHCP_allocated_dns[2];
 80074ce:	789a      	ldrb	r2, [r3, #2]
 80074d0:	7082      	strb	r2, [r0, #2]
   ip[3] = DHCP_allocated_dns[3];         
 80074d2:	78db      	ldrb	r3, [r3, #3]
 80074d4:	70c3      	strb	r3, [r0, #3]
}
 80074d6:	4770      	bx	lr
 80074d8:	20001110 	.word	0x20001110

080074dc <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
	return dhcp_lease_time;
}
 80074dc:	4b01      	ldr	r3, [pc, #4]	; (80074e4 <getDHCPLeasetime+0x8>)
 80074de:	6818      	ldr	r0, [r3, #0]
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	200000c8 	.word	0x200000c8

080074e8 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
  nibble &= 0x0F;
 80074e8:	f000 000f 	and.w	r0, r0, #15
  if (nibble <= 9)
 80074ec:	2809      	cmp	r0, #9
 80074ee:	d801      	bhi.n	80074f4 <NibbleToHex+0xc>
    return nibble + '0';
 80074f0:	3030      	adds	r0, #48	; 0x30
 80074f2:	4770      	bx	lr
  else 
    return nibble + ('A'-0x0A);
 80074f4:	3037      	adds	r0, #55	; 0x37
}
 80074f6:	4770      	bx	lr

080074f8 <send_DHCP_DISCOVER>:
{
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	b087      	sub	sp, #28
   makeDHCPMSG();
 80074fe:	f7ff fcfd 	bl	8006efc <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8007502:	4b71      	ldr	r3, [pc, #452]	; (80076c8 <send_DHCP_DISCOVER+0x1d0>)
 8007504:	2500      	movs	r5, #0
 8007506:	701d      	strb	r5, [r3, #0]
   DHCP_SIP[1]=0;
 8007508:	705d      	strb	r5, [r3, #1]
   DHCP_SIP[2]=0;
 800750a:	709d      	strb	r5, [r3, #2]
   DHCP_SIP[3]=0;
 800750c:	70dd      	strb	r5, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800750e:	4b6f      	ldr	r3, [pc, #444]	; (80076cc <send_DHCP_DISCOVER+0x1d4>)
 8007510:	701d      	strb	r5, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8007512:	705d      	strb	r5, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8007514:	709d      	strb	r5, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8007516:	70dd      	strb	r5, [r3, #3]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8007518:	4b6d      	ldr	r3, [pc, #436]	; (80076d0 <send_DHCP_DISCOVER+0x1d8>)
 800751a:	681e      	ldr	r6, [r3, #0]
 800751c:	2335      	movs	r3, #53	; 0x35
 800751e:	f886 30f0 	strb.w	r3, [r6, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x01;
 8007522:	2301      	movs	r3, #1
 8007524:	f886 30f1 	strb.w	r3, [r6, #241]	; 0xf1
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8007528:	f886 30f2 	strb.w	r3, [r6, #242]	; 0xf2
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800752c:	223d      	movs	r2, #61	; 0x3d
 800752e:	f886 20f3 	strb.w	r2, [r6, #243]	; 0xf3
	pDHCPMSG->OPT[k++] = 0x07;
 8007532:	2207      	movs	r2, #7
 8007534:	f886 20f4 	strb.w	r2, [r6, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = 0x01;
 8007538:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800753c:	4b65      	ldr	r3, [pc, #404]	; (80076d4 <send_DHCP_DISCOVER+0x1dc>)
 800753e:	781a      	ldrb	r2, [r3, #0]
 8007540:	f886 20f6 	strb.w	r2, [r6, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8007544:	785a      	ldrb	r2, [r3, #1]
 8007546:	f886 20f7 	strb.w	r2, [r6, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800754a:	789a      	ldrb	r2, [r3, #2]
 800754c:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8007550:	f893 b003 	ldrb.w	fp, [r3, #3]
 8007554:	f886 b0f9 	strb.w	fp, [r6, #249]	; 0xf9
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8007558:	f893 a004 	ldrb.w	sl, [r3, #4]
 800755c:	f886 a0fa 	strb.w	sl, [r6, #250]	; 0xfa
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8007560:	f893 9005 	ldrb.w	r9, [r3, #5]
 8007564:	f886 90fb 	strb.w	r9, [r6, #251]	; 0xfb
	pDHCPMSG->OPT[k++] = hostName;
 8007568:	230c      	movs	r3, #12
 800756a:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 800756e:	f886 50fd 	strb.w	r5, [r6, #253]	; 0xfd
 8007572:	2412      	movs	r4, #18
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8007574:	9503      	str	r5, [sp, #12]
 8007576:	4b58      	ldr	r3, [pc, #352]	; (80076d8 <send_DHCP_DISCOVER+0x1e0>)
 8007578:	5d5b      	ldrb	r3, [r3, r5]
 800757a:	b14b      	cbz	r3, 8007590 <send_DHCP_DISCOVER+0x98>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800757c:	1c63      	adds	r3, r4, #1
 800757e:	4a56      	ldr	r2, [pc, #344]	; (80076d8 <send_DHCP_DISCOVER+0x1e0>)
 8007580:	5d52      	ldrb	r2, [r2, r5]
 8007582:	4434      	add	r4, r6
 8007584:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8007588:	3501      	adds	r5, #1
 800758a:	b2ad      	uxth	r5, r5
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800758c:	b29c      	uxth	r4, r3
 800758e:	e7f1      	b.n	8007574 <send_DHCP_DISCOVER+0x7c>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8007590:	f104 0801 	add.w	r8, r4, #1
 8007594:	fa1f f888 	uxth.w	r8, r8
 8007598:	ea4f 101b 	mov.w	r0, fp, lsr #4
 800759c:	f7ff ffa4 	bl	80074e8 <NibbleToHex>
 80075a0:	1933      	adds	r3, r6, r4
 80075a2:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80075a6:	1ca7      	adds	r7, r4, #2
 80075a8:	b2bf      	uxth	r7, r7
 80075aa:	4658      	mov	r0, fp
 80075ac:	f7ff ff9c 	bl	80074e8 <NibbleToHex>
 80075b0:	44b0      	add	r8, r6
 80075b2:	f888 00ec 	strb.w	r0, [r8, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80075b6:	f104 0803 	add.w	r8, r4, #3
 80075ba:	fa1f f888 	uxth.w	r8, r8
 80075be:	ea4f 101a 	mov.w	r0, sl, lsr #4
 80075c2:	f7ff ff91 	bl	80074e8 <NibbleToHex>
 80075c6:	4437      	add	r7, r6
 80075c8:	f887 00ec 	strb.w	r0, [r7, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80075cc:	1d27      	adds	r7, r4, #4
 80075ce:	b2bf      	uxth	r7, r7
 80075d0:	4650      	mov	r0, sl
 80075d2:	f7ff ff89 	bl	80074e8 <NibbleToHex>
 80075d6:	44b0      	add	r8, r6
 80075d8:	f888 00ec 	strb.w	r0, [r8, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80075dc:	f104 0805 	add.w	r8, r4, #5
 80075e0:	fa1f f888 	uxth.w	r8, r8
 80075e4:	ea4f 1019 	mov.w	r0, r9, lsr #4
 80075e8:	f7ff ff7e 	bl	80074e8 <NibbleToHex>
 80075ec:	4437      	add	r7, r6
 80075ee:	f887 00ec 	strb.w	r0, [r7, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80075f2:	1da7      	adds	r7, r4, #6
 80075f4:	b2bf      	uxth	r7, r7
 80075f6:	4648      	mov	r0, r9
 80075f8:	f7ff ff76 	bl	80074e8 <NibbleToHex>
 80075fc:	44b0      	add	r8, r6
 80075fe:	f888 00ec 	strb.w	r0, [r8, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8007602:	9b03      	ldr	r3, [sp, #12]
 8007604:	3307      	adds	r3, #7
 8007606:	1afb      	subs	r3, r7, r3
 8007608:	3506      	adds	r5, #6
 800760a:	4433      	add	r3, r6
 800760c:	f883 50ec 	strb.w	r5, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8007610:	1de2      	adds	r2, r4, #7
 8007612:	4437      	add	r7, r6
 8007614:	2337      	movs	r3, #55	; 0x37
 8007616:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 800761a:	f104 0308 	add.w	r3, r4, #8
 800761e:	fa16 f282 	uxtah	r2, r6, r2
 8007622:	2106      	movs	r1, #6
 8007624:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8007628:	f104 0209 	add.w	r2, r4, #9
 800762c:	fa16 f383 	uxtah	r3, r6, r3
 8007630:	2001      	movs	r0, #1
 8007632:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8007636:	f104 030a 	add.w	r3, r4, #10
 800763a:	fa16 f282 	uxtah	r2, r6, r2
 800763e:	2003      	movs	r0, #3
 8007640:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8007644:	f104 020b 	add.w	r2, r4, #11
 8007648:	fa16 f383 	uxtah	r3, r6, r3
 800764c:	f883 10ec 	strb.w	r1, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8007650:	f104 030c 	add.w	r3, r4, #12
 8007654:	fa16 f282 	uxtah	r2, r6, r2
 8007658:	210f      	movs	r1, #15
 800765a:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800765e:	f104 020d 	add.w	r2, r4, #13
 8007662:	fa16 f383 	uxtah	r3, r6, r3
 8007666:	213a      	movs	r1, #58	; 0x3a
 8007668:	f883 10ec 	strb.w	r1, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800766c:	f104 030e 	add.w	r3, r4, #14
 8007670:	fa16 f282 	uxtah	r2, r6, r2
 8007674:	213b      	movs	r1, #59	; 0x3b
 8007676:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800767a:	340f      	adds	r4, #15
 800767c:	b2a4      	uxth	r4, r4
 800767e:	fa16 f383 	uxtah	r3, r6, r3
 8007682:	22ff      	movs	r2, #255	; 0xff
 8007684:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8007688:	e005      	b.n	8007696 <send_DHCP_DISCOVER+0x19e>
 800768a:	1933      	adds	r3, r6, r4
 800768c:	2200      	movs	r2, #0
 800768e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8007692:	3401      	adds	r4, #1
 8007694:	b2a4      	uxth	r4, r4
 8007696:	f5b4 7f9c 	cmp.w	r4, #312	; 0x138
 800769a:	d3f6      	bcc.n	800768a <send_DHCP_DISCOVER+0x192>
	ip[0] = 255;
 800769c:	23ff      	movs	r3, #255	; 0xff
 800769e:	f88d 3014 	strb.w	r3, [sp, #20]
	ip[1] = 255;
 80076a2:	f88d 3015 	strb.w	r3, [sp, #21]
	ip[2] = 255;
 80076a6:	f88d 3016 	strb.w	r3, [sp, #22]
	ip[3] = 255;
 80076aa:	f88d 3017 	strb.w	r3, [sp, #23]
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80076ae:	2343      	movs	r3, #67	; 0x43
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	ab05      	add	r3, sp, #20
 80076b4:	f44f 7209 	mov.w	r2, #548	; 0x224
 80076b8:	4631      	mov	r1, r6
 80076ba:	4808      	ldr	r0, [pc, #32]	; (80076dc <send_DHCP_DISCOVER+0x1e4>)
 80076bc:	7800      	ldrb	r0, [r0, #0]
 80076be:	f7fe febb 	bl	8006438 <sendto>
}
 80076c2:	b007      	add	sp, #28
 80076c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c8:	20003e20 	.word	0x20003e20
 80076cc:	20003e1c 	.word	0x20003e1c
 80076d0:	20003e24 	.word	0x20003e24
 80076d4:	20003e10 	.word	0x20003e10
 80076d8:	200000b4 	.word	0x200000b4
 80076dc:	20003e28 	.word	0x20003e28

080076e0 <send_DHCP_REQUEST>:
{
 80076e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	b085      	sub	sp, #20
   makeDHCPMSG();
 80076e6:	f7ff fc09 	bl	8006efc <makeDHCPMSG>
   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80076ea:	4b9d      	ldr	r3, [pc, #628]	; (8007960 <send_DHCP_REQUEST+0x280>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	3b03      	subs	r3, #3
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d940      	bls.n	8007778 <send_DHCP_REQUEST+0x98>
   	ip[0] = 255;
 80076f6:	23ff      	movs	r3, #255	; 0xff
 80076f8:	f88d 300c 	strb.w	r3, [sp, #12]
   	ip[1] = 255;
 80076fc:	f88d 300d 	strb.w	r3, [sp, #13]
   	ip[2] = 255;
 8007700:	f88d 300e 	strb.w	r3, [sp, #14]
   	ip[3] = 255;   	   	   	
 8007704:	f88d 300f 	strb.w	r3, [sp, #15]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8007708:	4b96      	ldr	r3, [pc, #600]	; (8007964 <send_DHCP_REQUEST+0x284>)
 800770a:	681d      	ldr	r5, [r3, #0]
 800770c:	2335      	movs	r3, #53	; 0x35
 800770e:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x01;
 8007712:	2301      	movs	r3, #1
 8007714:	f885 30f1 	strb.w	r3, [r5, #241]	; 0xf1
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8007718:	2203      	movs	r2, #3
 800771a:	f885 20f2 	strb.w	r2, [r5, #242]	; 0xf2
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800771e:	223d      	movs	r2, #61	; 0x3d
 8007720:	f885 20f3 	strb.w	r2, [r5, #243]	; 0xf3
	pDHCPMSG->OPT[k++] = 0x07;
 8007724:	2207      	movs	r2, #7
 8007726:	f885 20f4 	strb.w	r2, [r5, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = 0x01;
 800772a:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800772e:	4b8e      	ldr	r3, [pc, #568]	; (8007968 <send_DHCP_REQUEST+0x288>)
 8007730:	781a      	ldrb	r2, [r3, #0]
 8007732:	f885 20f6 	strb.w	r2, [r5, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8007736:	785a      	ldrb	r2, [r3, #1]
 8007738:	f885 20f7 	strb.w	r2, [r5, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800773c:	789a      	ldrb	r2, [r3, #2]
 800773e:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8007742:	f893 9003 	ldrb.w	r9, [r3, #3]
 8007746:	f885 90f9 	strb.w	r9, [r5, #249]	; 0xf9
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800774a:	f893 8004 	ldrb.w	r8, [r3, #4]
 800774e:	f885 80fa 	strb.w	r8, [r5, #250]	; 0xfa
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8007752:	795f      	ldrb	r7, [r3, #5]
 8007754:	f885 70fb 	strb.w	r7, [r5, #251]	; 0xfb
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8007758:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800775c:	2bff      	cmp	r3, #255	; 0xff
 800775e:	d027      	beq.n	80077b0 <send_DHCP_REQUEST+0xd0>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8007760:	2410      	movs	r4, #16
	pDHCPMSG->OPT[k++] = hostName;
 8007762:	1c63      	adds	r3, r4, #1
 8007764:	192a      	adds	r2, r5, r4
 8007766:	210c      	movs	r1, #12
 8007768:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800776c:	3402      	adds	r4, #2
 800776e:	442b      	add	r3, r5
 8007770:	2600      	movs	r6, #0
 8007772:	f883 60ec 	strb.w	r6, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8007776:	e048      	b.n	800780a <send_DHCP_REQUEST+0x12a>
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8007778:	4b7a      	ldr	r3, [pc, #488]	; (8007964 <send_DHCP_REQUEST+0x284>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2200      	movs	r2, #0
 800777e:	729a      	strb	r2, [r3, #10]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8007780:	72da      	strb	r2, [r3, #11]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8007782:	4a7a      	ldr	r2, [pc, #488]	; (800796c <send_DHCP_REQUEST+0x28c>)
 8007784:	7811      	ldrb	r1, [r2, #0]
 8007786:	7319      	strb	r1, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8007788:	7851      	ldrb	r1, [r2, #1]
 800778a:	7359      	strb	r1, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800778c:	7891      	ldrb	r1, [r2, #2]
 800778e:	7399      	strb	r1, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8007790:	78d2      	ldrb	r2, [r2, #3]
 8007792:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8007794:	4b76      	ldr	r3, [pc, #472]	; (8007970 <send_DHCP_REQUEST+0x290>)
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	f88d 200c 	strb.w	r2, [sp, #12]
   	ip[1] = DHCP_SIP[1];
 800779c:	785a      	ldrb	r2, [r3, #1]
 800779e:	f88d 200d 	strb.w	r2, [sp, #13]
   	ip[2] = DHCP_SIP[2];
 80077a2:	789a      	ldrb	r2, [r3, #2]
 80077a4:	f88d 200e 	strb.w	r2, [sp, #14]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80077a8:	78db      	ldrb	r3, [r3, #3]
 80077aa:	f88d 300f 	strb.w	r3, [sp, #15]
 80077ae:	e7ab      	b.n	8007708 <send_DHCP_REQUEST+0x28>
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80077b0:	2332      	movs	r3, #50	; 0x32
 80077b2:	f885 30fc 	strb.w	r3, [r5, #252]	; 0xfc
		pDHCPMSG->OPT[k++] = 0x04;
 80077b6:	2204      	movs	r2, #4
 80077b8:	f885 20fd 	strb.w	r2, [r5, #253]	; 0xfd
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80077bc:	4b6b      	ldr	r3, [pc, #428]	; (800796c <send_DHCP_REQUEST+0x28c>)
 80077be:	7819      	ldrb	r1, [r3, #0]
 80077c0:	f885 10fe 	strb.w	r1, [r5, #254]	; 0xfe
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80077c4:	7859      	ldrb	r1, [r3, #1]
 80077c6:	f885 10ff 	strb.w	r1, [r5, #255]	; 0xff
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80077ca:	7899      	ldrb	r1, [r3, #2]
 80077cc:	f885 1100 	strb.w	r1, [r5, #256]	; 0x100
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80077d0:	78db      	ldrb	r3, [r3, #3]
 80077d2:	f885 3101 	strb.w	r3, [r5, #257]	; 0x101
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80077d6:	2336      	movs	r3, #54	; 0x36
 80077d8:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
		pDHCPMSG->OPT[k++] = 0x04;
 80077dc:	f885 2103 	strb.w	r2, [r5, #259]	; 0x103
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80077e0:	4b63      	ldr	r3, [pc, #396]	; (8007970 <send_DHCP_REQUEST+0x290>)
 80077e2:	781a      	ldrb	r2, [r3, #0]
 80077e4:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80077e8:	785a      	ldrb	r2, [r3, #1]
 80077ea:	f885 2105 	strb.w	r2, [r5, #261]	; 0x105
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80077ee:	789a      	ldrb	r2, [r3, #2]
 80077f0:	f885 2106 	strb.w	r2, [r5, #262]	; 0x106
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80077f4:	78db      	ldrb	r3, [r3, #3]
 80077f6:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
 80077fa:	241c      	movs	r4, #28
 80077fc:	e7b1      	b.n	8007762 <send_DHCP_REQUEST+0x82>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80077fe:	1c62      	adds	r2, r4, #1
 8007800:	442c      	add	r4, r5
 8007802:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8007806:	3601      	adds	r6, #1
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8007808:	b294      	uxth	r4, r2
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800780a:	4b5a      	ldr	r3, [pc, #360]	; (8007974 <send_DHCP_REQUEST+0x294>)
 800780c:	5d9b      	ldrb	r3, [r3, r6]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1f5      	bne.n	80077fe <send_DHCP_REQUEST+0x11e>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8007812:	f104 0a01 	add.w	sl, r4, #1
 8007816:	fa1f fa8a 	uxth.w	sl, sl
 800781a:	ea4f 1019 	mov.w	r0, r9, lsr #4
 800781e:	f7ff fe63 	bl	80074e8 <NibbleToHex>
 8007822:	192b      	adds	r3, r5, r4
 8007824:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8007828:	f104 0b02 	add.w	fp, r4, #2
 800782c:	fa1f fb8b 	uxth.w	fp, fp
 8007830:	4648      	mov	r0, r9
 8007832:	f7ff fe59 	bl	80074e8 <NibbleToHex>
 8007836:	44aa      	add	sl, r5
 8007838:	f88a 00ec 	strb.w	r0, [sl, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800783c:	f104 0903 	add.w	r9, r4, #3
 8007840:	fa1f f989 	uxth.w	r9, r9
 8007844:	ea4f 1018 	mov.w	r0, r8, lsr #4
 8007848:	f7ff fe4e 	bl	80074e8 <NibbleToHex>
 800784c:	44ab      	add	fp, r5
 800784e:	f88b 00ec 	strb.w	r0, [fp, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8007852:	f104 0a04 	add.w	sl, r4, #4
 8007856:	fa1f fa8a 	uxth.w	sl, sl
 800785a:	4640      	mov	r0, r8
 800785c:	f7ff fe44 	bl	80074e8 <NibbleToHex>
 8007860:	44a9      	add	r9, r5
 8007862:	f889 00ec 	strb.w	r0, [r9, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8007866:	f104 0905 	add.w	r9, r4, #5
 800786a:	fa1f f989 	uxth.w	r9, r9
 800786e:	0938      	lsrs	r0, r7, #4
 8007870:	f7ff fe3a 	bl	80074e8 <NibbleToHex>
 8007874:	44aa      	add	sl, r5
 8007876:	f88a 00ec 	strb.w	r0, [sl, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800787a:	f104 0806 	add.w	r8, r4, #6
 800787e:	fa1f f888 	uxth.w	r8, r8
 8007882:	4638      	mov	r0, r7
 8007884:	f7ff fe30 	bl	80074e8 <NibbleToHex>
 8007888:	44a9      	add	r9, r5
 800788a:	f889 00ec 	strb.w	r0, [r9, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800788e:	1df3      	adds	r3, r6, #7
 8007890:	eba8 0303 	sub.w	r3, r8, r3
 8007894:	3606      	adds	r6, #6
 8007896:	442b      	add	r3, r5
 8007898:	f883 60ec 	strb.w	r6, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800789c:	1de2      	adds	r2, r4, #7
 800789e:	44a8      	add	r8, r5
 80078a0:	2337      	movs	r3, #55	; 0x37
 80078a2:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 80078a6:	f104 0308 	add.w	r3, r4, #8
 80078aa:	fa15 f282 	uxtah	r2, r5, r2
 80078ae:	2108      	movs	r1, #8
 80078b0:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80078b4:	f104 0209 	add.w	r2, r4, #9
 80078b8:	fa15 f383 	uxtah	r3, r5, r3
 80078bc:	2101      	movs	r1, #1
 80078be:	f883 10ec 	strb.w	r1, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80078c2:	f104 030a 	add.w	r3, r4, #10
 80078c6:	fa15 f282 	uxtah	r2, r5, r2
 80078ca:	2103      	movs	r1, #3
 80078cc:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 80078d0:	f104 020b 	add.w	r2, r4, #11
 80078d4:	fa15 f383 	uxtah	r3, r5, r3
 80078d8:	2106      	movs	r1, #6
 80078da:	f883 10ec 	strb.w	r1, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80078de:	f104 030c 	add.w	r3, r4, #12
 80078e2:	fa15 f282 	uxtah	r2, r5, r2
 80078e6:	210f      	movs	r1, #15
 80078e8:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80078ec:	f104 020d 	add.w	r2, r4, #13
 80078f0:	fa15 f383 	uxtah	r3, r5, r3
 80078f4:	213a      	movs	r1, #58	; 0x3a
 80078f6:	f883 10ec 	strb.w	r1, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80078fa:	f104 030e 	add.w	r3, r4, #14
 80078fe:	fa15 f282 	uxtah	r2, r5, r2
 8007902:	213b      	movs	r1, #59	; 0x3b
 8007904:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8007908:	f104 020f 	add.w	r2, r4, #15
 800790c:	fa15 f383 	uxtah	r3, r5, r3
 8007910:	211f      	movs	r1, #31
 8007912:	f883 10ec 	strb.w	r1, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8007916:	f104 0310 	add.w	r3, r4, #16
 800791a:	fa15 f282 	uxtah	r2, r5, r2
 800791e:	2121      	movs	r1, #33	; 0x21
 8007920:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8007924:	3411      	adds	r4, #17
 8007926:	fa15 f383 	uxtah	r3, r5, r3
 800792a:	22ff      	movs	r2, #255	; 0xff
 800792c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8007930:	b2a4      	uxth	r4, r4
 8007932:	f5b4 7f9c 	cmp.w	r4, #312	; 0x138
 8007936:	da05      	bge.n	8007944 <send_DHCP_REQUEST+0x264>
 8007938:	192b      	adds	r3, r5, r4
 800793a:	2200      	movs	r2, #0
 800793c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8007940:	3401      	adds	r4, #1
 8007942:	e7f6      	b.n	8007932 <send_DHCP_REQUEST+0x252>
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8007944:	2343      	movs	r3, #67	; 0x43
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	ab03      	add	r3, sp, #12
 800794a:	f44f 7209 	mov.w	r2, #548	; 0x224
 800794e:	4629      	mov	r1, r5
 8007950:	4809      	ldr	r0, [pc, #36]	; (8007978 <send_DHCP_REQUEST+0x298>)
 8007952:	7800      	ldrb	r0, [r0, #0]
 8007954:	f7fe fd70 	bl	8006438 <sendto>
}
 8007958:	b005      	add	sp, #20
 800795a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795e:	bf00      	nop
 8007960:	20001125 	.word	0x20001125
 8007964:	20003e24 	.word	0x20003e24
 8007968:	20003e10 	.word	0x20003e10
 800796c:	20001118 	.word	0x20001118
 8007970:	20003e20 	.word	0x20003e20
 8007974:	200000b4 	.word	0x200000b4
 8007978:	20003e28 	.word	0x20003e28

0800797c <check_DHCP_timeout>:
{
 800797c:	b510      	push	{r4, lr}
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800797e:	4b22      	ldr	r3, [pc, #136]	; (8007a08 <check_DHCP_timeout+0x8c>)
 8007980:	f993 3000 	ldrsb.w	r3, [r3]
 8007984:	2b01      	cmp	r3, #1
 8007986:	dd0d      	ble.n	80079a4 <check_DHCP_timeout+0x28>
		switch(dhcp_state) {
 8007988:	4b20      	ldr	r3, [pc, #128]	; (8007a0c <check_DHCP_timeout+0x90>)
 800798a:	f993 3000 	ldrsb.w	r3, [r3]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d031      	beq.n	80079f6 <check_DHCP_timeout+0x7a>
 8007992:	2b04      	cmp	r3, #4
 8007994:	d02f      	beq.n	80079f6 <check_DHCP_timeout+0x7a>
 8007996:	2b01      	cmp	r3, #1
 8007998:	d029      	beq.n	80079ee <check_DHCP_timeout+0x72>
 800799a:	2401      	movs	r4, #1
		reset_DHCP_timeout();
 800799c:	f7ff fd02 	bl	80073a4 <reset_DHCP_timeout>
}
 80079a0:	4620      	mov	r0, r4
 80079a2:	bd10      	pop	{r4, pc}
		if (dhcp_tick_next < dhcp_tick_1s) {
 80079a4:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <check_DHCP_timeout+0x94>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <check_DHCP_timeout+0x98>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d228      	bcs.n	8007a02 <check_DHCP_timeout+0x86>
			switch ( dhcp_state ) {
 80079b0:	4b16      	ldr	r3, [pc, #88]	; (8007a0c <check_DHCP_timeout+0x90>)
 80079b2:	f993 3000 	ldrsb.w	r3, [r3]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d013      	beq.n	80079e2 <check_DHCP_timeout+0x66>
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	d014      	beq.n	80079e8 <check_DHCP_timeout+0x6c>
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d00c      	beq.n	80079dc <check_DHCP_timeout+0x60>
			dhcp_tick_1s = 0;
 80079c2:	4b14      	ldr	r3, [pc, #80]	; (8007a14 <check_DHCP_timeout+0x98>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330a      	adds	r3, #10
 80079cc:	4a10      	ldr	r2, [pc, #64]	; (8007a10 <check_DHCP_timeout+0x94>)
 80079ce:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80079d0:	4a0d      	ldr	r2, [pc, #52]	; (8007a08 <check_DHCP_timeout+0x8c>)
 80079d2:	7813      	ldrb	r3, [r2, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	7013      	strb	r3, [r2, #0]
	uint8_t ret = DHCP_RUNNING;
 80079d8:	2401      	movs	r4, #1
 80079da:	e7e1      	b.n	80079a0 <check_DHCP_timeout+0x24>
					send_DHCP_DISCOVER();
 80079dc:	f7ff fd8c 	bl	80074f8 <send_DHCP_DISCOVER>
				break;
 80079e0:	e7ef      	b.n	80079c2 <check_DHCP_timeout+0x46>
					send_DHCP_REQUEST();
 80079e2:	f7ff fe7d 	bl	80076e0 <send_DHCP_REQUEST>
				break;
 80079e6:	e7ec      	b.n	80079c2 <check_DHCP_timeout+0x46>
					send_DHCP_REQUEST();
 80079e8:	f7ff fe7a 	bl	80076e0 <send_DHCP_REQUEST>
				break;
 80079ec:	e7e9      	b.n	80079c2 <check_DHCP_timeout+0x46>
				dhcp_state = STATE_DHCP_INIT;
 80079ee:	2400      	movs	r4, #0
 80079f0:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <check_DHCP_timeout+0x90>)
 80079f2:	701c      	strb	r4, [r3, #0]
				break;
 80079f4:	e7d2      	b.n	800799c <check_DHCP_timeout+0x20>
				send_DHCP_DISCOVER();
 80079f6:	f7ff fd7f 	bl	80074f8 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80079fa:	2401      	movs	r4, #1
 80079fc:	4b03      	ldr	r3, [pc, #12]	; (8007a0c <check_DHCP_timeout+0x90>)
 80079fe:	701c      	strb	r4, [r3, #0]
				break;
 8007a00:	e7cc      	b.n	800799c <check_DHCP_timeout+0x20>
	uint8_t ret = DHCP_RUNNING;
 8007a02:	2401      	movs	r4, #1
 8007a04:	e7cc      	b.n	80079a0 <check_DHCP_timeout+0x24>
 8007a06:	bf00      	nop
 8007a08:	20001124 	.word	0x20001124
 8007a0c:	20001125 	.word	0x20001125
 8007a10:	200000cc 	.word	0x200000cc
 8007a14:	20001128 	.word	0x20001128

08007a18 <DHCP_run>:
{
 8007a18:	b510      	push	{r4, lr}
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8007a1a:	4b67      	ldr	r3, [pc, #412]	; (8007bb8 <DHCP_run+0x1a0>)
 8007a1c:	f993 3000 	ldrsb.w	r3, [r3]
 8007a20:	2b06      	cmp	r3, #6
 8007a22:	f000 80c2 	beq.w	8007baa <DHCP_run+0x192>
	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8007a26:	4b65      	ldr	r3, [pc, #404]	; (8007bbc <DHCP_run+0x1a4>)
 8007a28:	7818      	ldrb	r0, [r3, #0]
 8007a2a:	0080      	lsls	r0, r0, #2
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	00c0      	lsls	r0, r0, #3
 8007a30:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8007a34:	f7fe fa54 	bl	8005ee0 <WIZCHIP_READ>
 8007a38:	2822      	cmp	r0, #34	; 0x22
 8007a3a:	d10d      	bne.n	8007a58 <DHCP_run+0x40>
	type = parseDHCPMSG();
 8007a3c:	f7ff fb50 	bl	80070e0 <parseDHCPMSG>
 8007a40:	b2c0      	uxtb	r0, r0
	switch ( dhcp_state ) {
 8007a42:	4b5d      	ldr	r3, [pc, #372]	; (8007bb8 <DHCP_run+0x1a0>)
 8007a44:	f993 3000 	ldrsb.w	r3, [r3]
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	f200 80b1 	bhi.w	8007bb0 <DHCP_run+0x198>
 8007a4e:	e8df f003 	tbb	[pc, r3]
 8007a52:	170b      	.short	0x170b
 8007a54:	542f      	.short	0x542f
 8007a56:	76          	.byte	0x76
 8007a57:	00          	.byte	0x00
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2244      	movs	r2, #68	; 0x44
 8007a5c:	2102      	movs	r1, #2
 8007a5e:	4857      	ldr	r0, [pc, #348]	; (8007bbc <DHCP_run+0x1a4>)
 8007a60:	7800      	ldrb	r0, [r0, #0]
 8007a62:	f7fe fc37 	bl	80062d4 <socket>
 8007a66:	e7e9      	b.n	8007a3c <DHCP_run+0x24>
         DHCP_allocated_ip[0] = 0;
 8007a68:	4b55      	ldr	r3, [pc, #340]	; (8007bc0 <DHCP_run+0x1a8>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8007a6e:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8007a70:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8007a72:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8007a74:	f7ff fd40 	bl	80074f8 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8007a78:	2401      	movs	r4, #1
 8007a7a:	4b4f      	ldr	r3, [pc, #316]	; (8007bb8 <DHCP_run+0x1a0>)
 8007a7c:	701c      	strb	r4, [r3, #0]
   		break;
 8007a7e:	e095      	b.n	8007bac <DHCP_run+0x194>
			if (type == DHCP_OFFER){
 8007a80:	2802      	cmp	r0, #2
 8007a82:	d003      	beq.n	8007a8c <DHCP_run+0x74>
			} else ret = check_DHCP_timeout();
 8007a84:	f7ff ff7a 	bl	800797c <check_DHCP_timeout>
 8007a88:	4604      	mov	r4, r0
 8007a8a:	e08f      	b.n	8007bac <DHCP_run+0x194>
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8007a8c:	4b4d      	ldr	r3, [pc, #308]	; (8007bc4 <DHCP_run+0x1ac>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	7c11      	ldrb	r1, [r2, #16]
 8007a92:	4b4b      	ldr	r3, [pc, #300]	; (8007bc0 <DHCP_run+0x1a8>)
 8007a94:	7019      	strb	r1, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8007a96:	7c51      	ldrb	r1, [r2, #17]
 8007a98:	7059      	strb	r1, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8007a9a:	7c91      	ldrb	r1, [r2, #18]
 8007a9c:	7099      	strb	r1, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8007a9e:	7cd2      	ldrb	r2, [r2, #19]
 8007aa0:	70da      	strb	r2, [r3, #3]
				send_DHCP_REQUEST();
 8007aa2:	f7ff fe1d 	bl	80076e0 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8007aa6:	4b44      	ldr	r3, [pc, #272]	; (8007bb8 <DHCP_run+0x1a0>)
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	701a      	strb	r2, [r3, #0]
	ret = DHCP_RUNNING;
 8007aac:	2401      	movs	r4, #1
 8007aae:	e07d      	b.n	8007bac <DHCP_run+0x194>
			if (type == DHCP_ACK) {
 8007ab0:	2805      	cmp	r0, #5
 8007ab2:	d005      	beq.n	8007ac0 <DHCP_run+0xa8>
			} else if (type == DHCP_NAK) {
 8007ab4:	2806      	cmp	r0, #6
 8007ab6:	d01a      	beq.n	8007aee <DHCP_run+0xd6>
			} else ret = check_DHCP_timeout();
 8007ab8:	f7ff ff60 	bl	800797c <check_DHCP_timeout>
 8007abc:	4604      	mov	r4, r0
 8007abe:	e075      	b.n	8007bac <DHCP_run+0x194>
				if (check_DHCP_leasedIP()) {
 8007ac0:	f7ff fc3a 	bl	8007338 <check_DHCP_leasedIP>
 8007ac4:	b148      	cbz	r0, 8007ada <DHCP_run+0xc2>
					dhcp_ip_assign();
 8007ac6:	4b40      	ldr	r3, [pc, #256]	; (8007bc8 <DHCP_run+0x1b0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4798      	blx	r3
					reset_DHCP_timeout();
 8007acc:	f7ff fc6a 	bl	80073a4 <reset_DHCP_timeout>
					dhcp_state = STATE_DHCP_LEASED;
 8007ad0:	4b39      	ldr	r3, [pc, #228]	; (8007bb8 <DHCP_run+0x1a0>)
 8007ad2:	2203      	movs	r2, #3
 8007ad4:	701a      	strb	r2, [r3, #0]
	ret = DHCP_RUNNING;
 8007ad6:	2401      	movs	r4, #1
 8007ad8:	e068      	b.n	8007bac <DHCP_run+0x194>
					reset_DHCP_timeout();
 8007ada:	f7ff fc63 	bl	80073a4 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8007ade:	4b3b      	ldr	r3, [pc, #236]	; (8007bcc <DHCP_run+0x1b4>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8007ae4:	4b34      	ldr	r3, [pc, #208]	; (8007bb8 <DHCP_run+0x1a0>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	701a      	strb	r2, [r3, #0]
	ret = DHCP_RUNNING;
 8007aea:	2401      	movs	r4, #1
 8007aec:	e05e      	b.n	8007bac <DHCP_run+0x194>
				reset_DHCP_timeout();
 8007aee:	f7ff fc59 	bl	80073a4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8007af2:	2401      	movs	r4, #1
 8007af4:	4b30      	ldr	r3, [pc, #192]	; (8007bb8 <DHCP_run+0x1a0>)
 8007af6:	701c      	strb	r4, [r3, #0]
 8007af8:	e058      	b.n	8007bac <DHCP_run+0x194>
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8007afa:	4b35      	ldr	r3, [pc, #212]	; (8007bd0 <DHCP_run+0x1b8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b02:	d057      	beq.n	8007bb4 <DHCP_run+0x19c>
 8007b04:	4a33      	ldr	r2, [pc, #204]	; (8007bd4 <DHCP_run+0x1bc>)
 8007b06:	6812      	ldr	r2, [r2, #0]
 8007b08:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 8007b0c:	d801      	bhi.n	8007b12 <DHCP_run+0xfa>
		   ret = DHCP_IP_LEASED;
 8007b0e:	2404      	movs	r4, #4
 8007b10:	e04c      	b.n	8007bac <DHCP_run+0x194>
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8007b12:	4a2b      	ldr	r2, [pc, #172]	; (8007bc0 <DHCP_run+0x1a8>)
 8007b14:	7811      	ldrb	r1, [r2, #0]
 8007b16:	4b30      	ldr	r3, [pc, #192]	; (8007bd8 <DHCP_run+0x1c0>)
 8007b18:	7019      	strb	r1, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8007b1a:	7851      	ldrb	r1, [r2, #1]
 8007b1c:	7059      	strb	r1, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8007b1e:	7891      	ldrb	r1, [r2, #2]
 8007b20:	7099      	strb	r1, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8007b22:	78d2      	ldrb	r2, [r2, #3]
 8007b24:	70da      	strb	r2, [r3, #3]
				DHCP_XID++;
 8007b26:	4a2d      	ldr	r2, [pc, #180]	; (8007bdc <DHCP_run+0x1c4>)
 8007b28:	6813      	ldr	r3, [r2, #0]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	6013      	str	r3, [r2, #0]
				send_DHCP_REQUEST();
 8007b2e:	f7ff fdd7 	bl	80076e0 <send_DHCP_REQUEST>
				reset_DHCP_timeout();
 8007b32:	f7ff fc37 	bl	80073a4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_REREQUEST;
 8007b36:	2404      	movs	r4, #4
 8007b38:	4b1f      	ldr	r3, [pc, #124]	; (8007bb8 <DHCP_run+0x1a0>)
 8007b3a:	701c      	strb	r4, [r3, #0]
 8007b3c:	e036      	b.n	8007bac <DHCP_run+0x194>
			if (type == DHCP_ACK) {
 8007b3e:	2805      	cmp	r0, #5
 8007b40:	d005      	beq.n	8007b4e <DHCP_run+0x136>
			} else if (type == DHCP_NAK) {
 8007b42:	2806      	cmp	r0, #6
 8007b44:	d02a      	beq.n	8007b9c <DHCP_run+0x184>
			} else ret = check_DHCP_timeout();
 8007b46:	f7ff ff19 	bl	800797c <check_DHCP_timeout>
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	e02e      	b.n	8007bac <DHCP_run+0x194>
				dhcp_retry_count = 0;
 8007b4e:	4b24      	ldr	r3, [pc, #144]	; (8007be0 <DHCP_run+0x1c8>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8007b54:	4b20      	ldr	r3, [pc, #128]	; (8007bd8 <DHCP_run+0x1c0>)
 8007b56:	781a      	ldrb	r2, [r3, #0]
 8007b58:	4b19      	ldr	r3, [pc, #100]	; (8007bc0 <DHCP_run+0x1a8>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d009      	beq.n	8007b74 <DHCP_run+0x15c>
					dhcp_ip_update();
 8007b60:	4b20      	ldr	r3, [pc, #128]	; (8007be4 <DHCP_run+0x1cc>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4798      	blx	r3
					ret = DHCP_IP_CHANGED;
 8007b66:	2403      	movs	r4, #3
				reset_DHCP_timeout();
 8007b68:	f7ff fc1c 	bl	80073a4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8007b6c:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <DHCP_run+0x1a0>)
 8007b6e:	2203      	movs	r2, #3
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	e01b      	b.n	8007bac <DHCP_run+0x194>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8007b74:	4b18      	ldr	r3, [pc, #96]	; (8007bd8 <DHCP_run+0x1c0>)
 8007b76:	785a      	ldrb	r2, [r3, #1]
 8007b78:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <DHCP_run+0x1a8>)
 8007b7a:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d1ef      	bne.n	8007b60 <DHCP_run+0x148>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8007b80:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <DHCP_run+0x1c0>)
 8007b82:	789a      	ldrb	r2, [r3, #2]
 8007b84:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <DHCP_run+0x1a8>)
 8007b86:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d1e9      	bne.n	8007b60 <DHCP_run+0x148>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8007b8c:	4b12      	ldr	r3, [pc, #72]	; (8007bd8 <DHCP_run+0x1c0>)
 8007b8e:	78da      	ldrb	r2, [r3, #3]
 8007b90:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <DHCP_run+0x1a8>)
 8007b92:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d1e3      	bne.n	8007b60 <DHCP_run+0x148>
		   ret = DHCP_IP_LEASED;
 8007b98:	2404      	movs	r4, #4
 8007b9a:	e7e5      	b.n	8007b68 <DHCP_run+0x150>
				reset_DHCP_timeout();
 8007b9c:	f7ff fc02 	bl	80073a4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <DHCP_run+0x1a0>)
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	701a      	strb	r2, [r3, #0]
		   ret = DHCP_IP_LEASED;
 8007ba6:	2404      	movs	r4, #4
 8007ba8:	e000      	b.n	8007bac <DHCP_run+0x194>
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8007baa:	2405      	movs	r4, #5
}
 8007bac:	4620      	mov	r0, r4
 8007bae:	bd10      	pop	{r4, pc}
	switch ( dhcp_state ) {
 8007bb0:	2401      	movs	r4, #1
 8007bb2:	e7fb      	b.n	8007bac <DHCP_run+0x194>
		   ret = DHCP_IP_LEASED;
 8007bb4:	2404      	movs	r4, #4
 8007bb6:	e7f9      	b.n	8007bac <DHCP_run+0x194>
 8007bb8:	20001125 	.word	0x20001125
 8007bbc:	20003e28 	.word	0x20003e28
 8007bc0:	20001118 	.word	0x20001118
 8007bc4:	20003e24 	.word	0x20003e24
 8007bc8:	200000bc 	.word	0x200000bc
 8007bcc:	200000c0 	.word	0x200000c0
 8007bd0:	200000c8 	.word	0x200000c8
 8007bd4:	20001128 	.word	0x20001128
 8007bd8:	20001120 	.word	0x20001120
 8007bdc:	20003e18 	.word	0x20003e18
 8007be0:	20001124 	.word	0x20001124
 8007be4:	200000c4 	.word	0x200000c4

08007be8 <atoi>:
 8007be8:	220a      	movs	r2, #10
 8007bea:	2100      	movs	r1, #0
 8007bec:	f000 bd02 	b.w	80085f4 <strtol>

08007bf0 <atol>:
 8007bf0:	220a      	movs	r2, #10
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	f000 bcfe 	b.w	80085f4 <strtol>

08007bf8 <__errno>:
 8007bf8:	4b01      	ldr	r3, [pc, #4]	; (8007c00 <__errno+0x8>)
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	200000d0 	.word	0x200000d0

08007c04 <__sflush_r>:
 8007c04:	898a      	ldrh	r2, [r1, #12]
 8007c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	0710      	lsls	r0, r2, #28
 8007c0e:	460c      	mov	r4, r1
 8007c10:	d458      	bmi.n	8007cc4 <__sflush_r+0xc0>
 8007c12:	684b      	ldr	r3, [r1, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dc05      	bgt.n	8007c24 <__sflush_r+0x20>
 8007c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dc02      	bgt.n	8007c24 <__sflush_r+0x20>
 8007c1e:	2000      	movs	r0, #0
 8007c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c26:	2e00      	cmp	r6, #0
 8007c28:	d0f9      	beq.n	8007c1e <__sflush_r+0x1a>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c30:	682f      	ldr	r7, [r5, #0]
 8007c32:	602b      	str	r3, [r5, #0]
 8007c34:	d032      	beq.n	8007c9c <__sflush_r+0x98>
 8007c36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	075a      	lsls	r2, r3, #29
 8007c3c:	d505      	bpl.n	8007c4a <__sflush_r+0x46>
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	1ac0      	subs	r0, r0, r3
 8007c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c44:	b10b      	cbz	r3, 8007c4a <__sflush_r+0x46>
 8007c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c48:	1ac0      	subs	r0, r0, r3
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c50:	6a21      	ldr	r1, [r4, #32]
 8007c52:	4628      	mov	r0, r5
 8007c54:	47b0      	blx	r6
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	d106      	bne.n	8007c6a <__sflush_r+0x66>
 8007c5c:	6829      	ldr	r1, [r5, #0]
 8007c5e:	291d      	cmp	r1, #29
 8007c60:	d82c      	bhi.n	8007cbc <__sflush_r+0xb8>
 8007c62:	4a2a      	ldr	r2, [pc, #168]	; (8007d0c <__sflush_r+0x108>)
 8007c64:	40ca      	lsrs	r2, r1
 8007c66:	07d6      	lsls	r6, r2, #31
 8007c68:	d528      	bpl.n	8007cbc <__sflush_r+0xb8>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	6062      	str	r2, [r4, #4]
 8007c6e:	04d9      	lsls	r1, r3, #19
 8007c70:	6922      	ldr	r2, [r4, #16]
 8007c72:	6022      	str	r2, [r4, #0]
 8007c74:	d504      	bpl.n	8007c80 <__sflush_r+0x7c>
 8007c76:	1c42      	adds	r2, r0, #1
 8007c78:	d101      	bne.n	8007c7e <__sflush_r+0x7a>
 8007c7a:	682b      	ldr	r3, [r5, #0]
 8007c7c:	b903      	cbnz	r3, 8007c80 <__sflush_r+0x7c>
 8007c7e:	6560      	str	r0, [r4, #84]	; 0x54
 8007c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c82:	602f      	str	r7, [r5, #0]
 8007c84:	2900      	cmp	r1, #0
 8007c86:	d0ca      	beq.n	8007c1e <__sflush_r+0x1a>
 8007c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c8c:	4299      	cmp	r1, r3
 8007c8e:	d002      	beq.n	8007c96 <__sflush_r+0x92>
 8007c90:	4628      	mov	r0, r5
 8007c92:	f000 f9e1 	bl	8008058 <_free_r>
 8007c96:	2000      	movs	r0, #0
 8007c98:	6360      	str	r0, [r4, #52]	; 0x34
 8007c9a:	e7c1      	b.n	8007c20 <__sflush_r+0x1c>
 8007c9c:	6a21      	ldr	r1, [r4, #32]
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b0      	blx	r6
 8007ca4:	1c41      	adds	r1, r0, #1
 8007ca6:	d1c7      	bne.n	8007c38 <__sflush_r+0x34>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0c4      	beq.n	8007c38 <__sflush_r+0x34>
 8007cae:	2b1d      	cmp	r3, #29
 8007cb0:	d001      	beq.n	8007cb6 <__sflush_r+0xb2>
 8007cb2:	2b16      	cmp	r3, #22
 8007cb4:	d101      	bne.n	8007cba <__sflush_r+0xb6>
 8007cb6:	602f      	str	r7, [r5, #0]
 8007cb8:	e7b1      	b.n	8007c1e <__sflush_r+0x1a>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	e7ad      	b.n	8007c20 <__sflush_r+0x1c>
 8007cc4:	690f      	ldr	r7, [r1, #16]
 8007cc6:	2f00      	cmp	r7, #0
 8007cc8:	d0a9      	beq.n	8007c1e <__sflush_r+0x1a>
 8007cca:	0793      	lsls	r3, r2, #30
 8007ccc:	680e      	ldr	r6, [r1, #0]
 8007cce:	bf08      	it	eq
 8007cd0:	694b      	ldreq	r3, [r1, #20]
 8007cd2:	600f      	str	r7, [r1, #0]
 8007cd4:	bf18      	it	ne
 8007cd6:	2300      	movne	r3, #0
 8007cd8:	eba6 0807 	sub.w	r8, r6, r7
 8007cdc:	608b      	str	r3, [r1, #8]
 8007cde:	f1b8 0f00 	cmp.w	r8, #0
 8007ce2:	dd9c      	ble.n	8007c1e <__sflush_r+0x1a>
 8007ce4:	6a21      	ldr	r1, [r4, #32]
 8007ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ce8:	4643      	mov	r3, r8
 8007cea:	463a      	mov	r2, r7
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b0      	blx	r6
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	dc06      	bgt.n	8007d02 <__sflush_r+0xfe>
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	e78e      	b.n	8007c20 <__sflush_r+0x1c>
 8007d02:	4407      	add	r7, r0
 8007d04:	eba8 0800 	sub.w	r8, r8, r0
 8007d08:	e7e9      	b.n	8007cde <__sflush_r+0xda>
 8007d0a:	bf00      	nop
 8007d0c:	20400001 	.word	0x20400001

08007d10 <_fflush_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	690b      	ldr	r3, [r1, #16]
 8007d14:	4605      	mov	r5, r0
 8007d16:	460c      	mov	r4, r1
 8007d18:	b913      	cbnz	r3, 8007d20 <_fflush_r+0x10>
 8007d1a:	2500      	movs	r5, #0
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	b118      	cbz	r0, 8007d2a <_fflush_r+0x1a>
 8007d22:	6983      	ldr	r3, [r0, #24]
 8007d24:	b90b      	cbnz	r3, 8007d2a <_fflush_r+0x1a>
 8007d26:	f000 f899 	bl	8007e5c <__sinit>
 8007d2a:	4b14      	ldr	r3, [pc, #80]	; (8007d7c <_fflush_r+0x6c>)
 8007d2c:	429c      	cmp	r4, r3
 8007d2e:	d11b      	bne.n	8007d68 <_fflush_r+0x58>
 8007d30:	686c      	ldr	r4, [r5, #4]
 8007d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0ef      	beq.n	8007d1a <_fflush_r+0xa>
 8007d3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d3c:	07d0      	lsls	r0, r2, #31
 8007d3e:	d404      	bmi.n	8007d4a <_fflush_r+0x3a>
 8007d40:	0599      	lsls	r1, r3, #22
 8007d42:	d402      	bmi.n	8007d4a <_fflush_r+0x3a>
 8007d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d46:	f000 f94c 	bl	8007fe2 <__retarget_lock_acquire_recursive>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	f7ff ff59 	bl	8007c04 <__sflush_r>
 8007d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d54:	07da      	lsls	r2, r3, #31
 8007d56:	4605      	mov	r5, r0
 8007d58:	d4e0      	bmi.n	8007d1c <_fflush_r+0xc>
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	059b      	lsls	r3, r3, #22
 8007d5e:	d4dd      	bmi.n	8007d1c <_fflush_r+0xc>
 8007d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d62:	f000 f93f 	bl	8007fe4 <__retarget_lock_release_recursive>
 8007d66:	e7d9      	b.n	8007d1c <_fflush_r+0xc>
 8007d68:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <_fflush_r+0x70>)
 8007d6a:	429c      	cmp	r4, r3
 8007d6c:	d101      	bne.n	8007d72 <_fflush_r+0x62>
 8007d6e:	68ac      	ldr	r4, [r5, #8]
 8007d70:	e7df      	b.n	8007d32 <_fflush_r+0x22>
 8007d72:	4b04      	ldr	r3, [pc, #16]	; (8007d84 <_fflush_r+0x74>)
 8007d74:	429c      	cmp	r4, r3
 8007d76:	bf08      	it	eq
 8007d78:	68ec      	ldreq	r4, [r5, #12]
 8007d7a:	e7da      	b.n	8007d32 <_fflush_r+0x22>
 8007d7c:	0800a5b4 	.word	0x0800a5b4
 8007d80:	0800a5d4 	.word	0x0800a5d4
 8007d84:	0800a594 	.word	0x0800a594

08007d88 <fflush>:
 8007d88:	4601      	mov	r1, r0
 8007d8a:	b920      	cbnz	r0, 8007d96 <fflush+0xe>
 8007d8c:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <fflush+0x18>)
 8007d8e:	4905      	ldr	r1, [pc, #20]	; (8007da4 <fflush+0x1c>)
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	f000 b8e1 	b.w	8007f58 <_fwalk_reent>
 8007d96:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <fflush+0x20>)
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	f7ff bfb9 	b.w	8007d10 <_fflush_r>
 8007d9e:	bf00      	nop
 8007da0:	0800a5f4 	.word	0x0800a5f4
 8007da4:	08007d11 	.word	0x08007d11
 8007da8:	200000d0 	.word	0x200000d0

08007dac <std>:
 8007dac:	2300      	movs	r3, #0
 8007dae:	b510      	push	{r4, lr}
 8007db0:	4604      	mov	r4, r0
 8007db2:	e9c0 3300 	strd	r3, r3, [r0]
 8007db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dba:	6083      	str	r3, [r0, #8]
 8007dbc:	8181      	strh	r1, [r0, #12]
 8007dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8007dc0:	81c2      	strh	r2, [r0, #14]
 8007dc2:	6183      	str	r3, [r0, #24]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	2208      	movs	r2, #8
 8007dc8:	305c      	adds	r0, #92	; 0x5c
 8007dca:	f000 f93d 	bl	8008048 <memset>
 8007dce:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <std+0x38>)
 8007dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <std+0x3c>)
 8007dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <std+0x40>)
 8007dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <std+0x44>)
 8007ddc:	6224      	str	r4, [r4, #32]
 8007dde:	6323      	str	r3, [r4, #48]	; 0x30
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	bf00      	nop
 8007de4:	080083bd 	.word	0x080083bd
 8007de8:	080083e3 	.word	0x080083e3
 8007dec:	0800841b 	.word	0x0800841b
 8007df0:	0800843f 	.word	0x0800843f

08007df4 <_cleanup_r>:
 8007df4:	4901      	ldr	r1, [pc, #4]	; (8007dfc <_cleanup_r+0x8>)
 8007df6:	f000 b8af 	b.w	8007f58 <_fwalk_reent>
 8007dfa:	bf00      	nop
 8007dfc:	08007d11 	.word	0x08007d11

08007e00 <__sfmoreglue>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	1e4a      	subs	r2, r1, #1
 8007e04:	2568      	movs	r5, #104	; 0x68
 8007e06:	4355      	muls	r5, r2
 8007e08:	460e      	mov	r6, r1
 8007e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e0e:	f000 f973 	bl	80080f8 <_malloc_r>
 8007e12:	4604      	mov	r4, r0
 8007e14:	b140      	cbz	r0, 8007e28 <__sfmoreglue+0x28>
 8007e16:	2100      	movs	r1, #0
 8007e18:	e9c0 1600 	strd	r1, r6, [r0]
 8007e1c:	300c      	adds	r0, #12
 8007e1e:	60a0      	str	r0, [r4, #8]
 8007e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e24:	f000 f910 	bl	8008048 <memset>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}

08007e2c <__sfp_lock_acquire>:
 8007e2c:	4801      	ldr	r0, [pc, #4]	; (8007e34 <__sfp_lock_acquire+0x8>)
 8007e2e:	f000 b8d8 	b.w	8007fe2 <__retarget_lock_acquire_recursive>
 8007e32:	bf00      	nop
 8007e34:	20003e31 	.word	0x20003e31

08007e38 <__sfp_lock_release>:
 8007e38:	4801      	ldr	r0, [pc, #4]	; (8007e40 <__sfp_lock_release+0x8>)
 8007e3a:	f000 b8d3 	b.w	8007fe4 <__retarget_lock_release_recursive>
 8007e3e:	bf00      	nop
 8007e40:	20003e31 	.word	0x20003e31

08007e44 <__sinit_lock_acquire>:
 8007e44:	4801      	ldr	r0, [pc, #4]	; (8007e4c <__sinit_lock_acquire+0x8>)
 8007e46:	f000 b8cc 	b.w	8007fe2 <__retarget_lock_acquire_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	20003e2c 	.word	0x20003e2c

08007e50 <__sinit_lock_release>:
 8007e50:	4801      	ldr	r0, [pc, #4]	; (8007e58 <__sinit_lock_release+0x8>)
 8007e52:	f000 b8c7 	b.w	8007fe4 <__retarget_lock_release_recursive>
 8007e56:	bf00      	nop
 8007e58:	20003e2c 	.word	0x20003e2c

08007e5c <__sinit>:
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	4604      	mov	r4, r0
 8007e60:	f7ff fff0 	bl	8007e44 <__sinit_lock_acquire>
 8007e64:	69a3      	ldr	r3, [r4, #24]
 8007e66:	b11b      	cbz	r3, 8007e70 <__sinit+0x14>
 8007e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e6c:	f7ff bff0 	b.w	8007e50 <__sinit_lock_release>
 8007e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e74:	6523      	str	r3, [r4, #80]	; 0x50
 8007e76:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <__sinit+0x68>)
 8007e78:	4a13      	ldr	r2, [pc, #76]	; (8007ec8 <__sinit+0x6c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e7e:	42a3      	cmp	r3, r4
 8007e80:	bf04      	itt	eq
 8007e82:	2301      	moveq	r3, #1
 8007e84:	61a3      	streq	r3, [r4, #24]
 8007e86:	4620      	mov	r0, r4
 8007e88:	f000 f820 	bl	8007ecc <__sfp>
 8007e8c:	6060      	str	r0, [r4, #4]
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 f81c 	bl	8007ecc <__sfp>
 8007e94:	60a0      	str	r0, [r4, #8]
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 f818 	bl	8007ecc <__sfp>
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	60e0      	str	r0, [r4, #12]
 8007ea0:	2104      	movs	r1, #4
 8007ea2:	6860      	ldr	r0, [r4, #4]
 8007ea4:	f7ff ff82 	bl	8007dac <std>
 8007ea8:	68a0      	ldr	r0, [r4, #8]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	2109      	movs	r1, #9
 8007eae:	f7ff ff7d 	bl	8007dac <std>
 8007eb2:	68e0      	ldr	r0, [r4, #12]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	2112      	movs	r1, #18
 8007eb8:	f7ff ff78 	bl	8007dac <std>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	61a3      	str	r3, [r4, #24]
 8007ec0:	e7d2      	b.n	8007e68 <__sinit+0xc>
 8007ec2:	bf00      	nop
 8007ec4:	0800a5f4 	.word	0x0800a5f4
 8007ec8:	08007df5 	.word	0x08007df5

08007ecc <__sfp>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	4607      	mov	r7, r0
 8007ed0:	f7ff ffac 	bl	8007e2c <__sfp_lock_acquire>
 8007ed4:	4b1e      	ldr	r3, [pc, #120]	; (8007f50 <__sfp+0x84>)
 8007ed6:	681e      	ldr	r6, [r3, #0]
 8007ed8:	69b3      	ldr	r3, [r6, #24]
 8007eda:	b913      	cbnz	r3, 8007ee2 <__sfp+0x16>
 8007edc:	4630      	mov	r0, r6
 8007ede:	f7ff ffbd 	bl	8007e5c <__sinit>
 8007ee2:	3648      	adds	r6, #72	; 0x48
 8007ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	d503      	bpl.n	8007ef4 <__sfp+0x28>
 8007eec:	6833      	ldr	r3, [r6, #0]
 8007eee:	b30b      	cbz	r3, 8007f34 <__sfp+0x68>
 8007ef0:	6836      	ldr	r6, [r6, #0]
 8007ef2:	e7f7      	b.n	8007ee4 <__sfp+0x18>
 8007ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ef8:	b9d5      	cbnz	r5, 8007f30 <__sfp+0x64>
 8007efa:	4b16      	ldr	r3, [pc, #88]	; (8007f54 <__sfp+0x88>)
 8007efc:	60e3      	str	r3, [r4, #12]
 8007efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f02:	6665      	str	r5, [r4, #100]	; 0x64
 8007f04:	f000 f86c 	bl	8007fe0 <__retarget_lock_init_recursive>
 8007f08:	f7ff ff96 	bl	8007e38 <__sfp_lock_release>
 8007f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f14:	6025      	str	r5, [r4, #0]
 8007f16:	61a5      	str	r5, [r4, #24]
 8007f18:	2208      	movs	r2, #8
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f20:	f000 f892 	bl	8008048 <memset>
 8007f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f30:	3468      	adds	r4, #104	; 0x68
 8007f32:	e7d9      	b.n	8007ee8 <__sfp+0x1c>
 8007f34:	2104      	movs	r1, #4
 8007f36:	4638      	mov	r0, r7
 8007f38:	f7ff ff62 	bl	8007e00 <__sfmoreglue>
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	6030      	str	r0, [r6, #0]
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d1d5      	bne.n	8007ef0 <__sfp+0x24>
 8007f44:	f7ff ff78 	bl	8007e38 <__sfp_lock_release>
 8007f48:	230c      	movs	r3, #12
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	e7ee      	b.n	8007f2c <__sfp+0x60>
 8007f4e:	bf00      	nop
 8007f50:	0800a5f4 	.word	0x0800a5f4
 8007f54:	ffff0001 	.word	0xffff0001

08007f58 <_fwalk_reent>:
 8007f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	4688      	mov	r8, r1
 8007f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f64:	2700      	movs	r7, #0
 8007f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f6e:	d505      	bpl.n	8007f7c <_fwalk_reent+0x24>
 8007f70:	6824      	ldr	r4, [r4, #0]
 8007f72:	2c00      	cmp	r4, #0
 8007f74:	d1f7      	bne.n	8007f66 <_fwalk_reent+0xe>
 8007f76:	4638      	mov	r0, r7
 8007f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7c:	89ab      	ldrh	r3, [r5, #12]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d907      	bls.n	8007f92 <_fwalk_reent+0x3a>
 8007f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f86:	3301      	adds	r3, #1
 8007f88:	d003      	beq.n	8007f92 <_fwalk_reent+0x3a>
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	47c0      	blx	r8
 8007f90:	4307      	orrs	r7, r0
 8007f92:	3568      	adds	r5, #104	; 0x68
 8007f94:	e7e9      	b.n	8007f6a <_fwalk_reent+0x12>
	...

08007f98 <__libc_init_array>:
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	4d0d      	ldr	r5, [pc, #52]	; (8007fd0 <__libc_init_array+0x38>)
 8007f9c:	4c0d      	ldr	r4, [pc, #52]	; (8007fd4 <__libc_init_array+0x3c>)
 8007f9e:	1b64      	subs	r4, r4, r5
 8007fa0:	10a4      	asrs	r4, r4, #2
 8007fa2:	2600      	movs	r6, #0
 8007fa4:	42a6      	cmp	r6, r4
 8007fa6:	d109      	bne.n	8007fbc <__libc_init_array+0x24>
 8007fa8:	4d0b      	ldr	r5, [pc, #44]	; (8007fd8 <__libc_init_array+0x40>)
 8007faa:	4c0c      	ldr	r4, [pc, #48]	; (8007fdc <__libc_init_array+0x44>)
 8007fac:	f001 fd94 	bl	8009ad8 <_init>
 8007fb0:	1b64      	subs	r4, r4, r5
 8007fb2:	10a4      	asrs	r4, r4, #2
 8007fb4:	2600      	movs	r6, #0
 8007fb6:	42a6      	cmp	r6, r4
 8007fb8:	d105      	bne.n	8007fc6 <__libc_init_array+0x2e>
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc0:	4798      	blx	r3
 8007fc2:	3601      	adds	r6, #1
 8007fc4:	e7ee      	b.n	8007fa4 <__libc_init_array+0xc>
 8007fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fca:	4798      	blx	r3
 8007fcc:	3601      	adds	r6, #1
 8007fce:	e7f2      	b.n	8007fb6 <__libc_init_array+0x1e>
 8007fd0:	0800a650 	.word	0x0800a650
 8007fd4:	0800a650 	.word	0x0800a650
 8007fd8:	0800a650 	.word	0x0800a650
 8007fdc:	0800a658 	.word	0x0800a658

08007fe0 <__retarget_lock_init_recursive>:
 8007fe0:	4770      	bx	lr

08007fe2 <__retarget_lock_acquire_recursive>:
 8007fe2:	4770      	bx	lr

08007fe4 <__retarget_lock_release_recursive>:
 8007fe4:	4770      	bx	lr
	...

08007fe8 <free>:
 8007fe8:	4b02      	ldr	r3, [pc, #8]	; (8007ff4 <free+0xc>)
 8007fea:	4601      	mov	r1, r0
 8007fec:	6818      	ldr	r0, [r3, #0]
 8007fee:	f000 b833 	b.w	8008058 <_free_r>
 8007ff2:	bf00      	nop
 8007ff4:	200000d0 	.word	0x200000d0

08007ff8 <memcpy>:
 8007ff8:	440a      	add	r2, r1
 8007ffa:	4291      	cmp	r1, r2
 8007ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008000:	d100      	bne.n	8008004 <memcpy+0xc>
 8008002:	4770      	bx	lr
 8008004:	b510      	push	{r4, lr}
 8008006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800800a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800800e:	4291      	cmp	r1, r2
 8008010:	d1f9      	bne.n	8008006 <memcpy+0xe>
 8008012:	bd10      	pop	{r4, pc}

08008014 <memmove>:
 8008014:	4288      	cmp	r0, r1
 8008016:	b510      	push	{r4, lr}
 8008018:	eb01 0402 	add.w	r4, r1, r2
 800801c:	d902      	bls.n	8008024 <memmove+0x10>
 800801e:	4284      	cmp	r4, r0
 8008020:	4623      	mov	r3, r4
 8008022:	d807      	bhi.n	8008034 <memmove+0x20>
 8008024:	1e43      	subs	r3, r0, #1
 8008026:	42a1      	cmp	r1, r4
 8008028:	d008      	beq.n	800803c <memmove+0x28>
 800802a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800802e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008032:	e7f8      	b.n	8008026 <memmove+0x12>
 8008034:	4402      	add	r2, r0
 8008036:	4601      	mov	r1, r0
 8008038:	428a      	cmp	r2, r1
 800803a:	d100      	bne.n	800803e <memmove+0x2a>
 800803c:	bd10      	pop	{r4, pc}
 800803e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008046:	e7f7      	b.n	8008038 <memmove+0x24>

08008048 <memset>:
 8008048:	4402      	add	r2, r0
 800804a:	4603      	mov	r3, r0
 800804c:	4293      	cmp	r3, r2
 800804e:	d100      	bne.n	8008052 <memset+0xa>
 8008050:	4770      	bx	lr
 8008052:	f803 1b01 	strb.w	r1, [r3], #1
 8008056:	e7f9      	b.n	800804c <memset+0x4>

08008058 <_free_r>:
 8008058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800805a:	2900      	cmp	r1, #0
 800805c:	d048      	beq.n	80080f0 <_free_r+0x98>
 800805e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008062:	9001      	str	r0, [sp, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f1a1 0404 	sub.w	r4, r1, #4
 800806a:	bfb8      	it	lt
 800806c:	18e4      	addlt	r4, r4, r3
 800806e:	f000 fc23 	bl	80088b8 <__malloc_lock>
 8008072:	4a20      	ldr	r2, [pc, #128]	; (80080f4 <_free_r+0x9c>)
 8008074:	9801      	ldr	r0, [sp, #4]
 8008076:	6813      	ldr	r3, [r2, #0]
 8008078:	4615      	mov	r5, r2
 800807a:	b933      	cbnz	r3, 800808a <_free_r+0x32>
 800807c:	6063      	str	r3, [r4, #4]
 800807e:	6014      	str	r4, [r2, #0]
 8008080:	b003      	add	sp, #12
 8008082:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008086:	f000 bc1d 	b.w	80088c4 <__malloc_unlock>
 800808a:	42a3      	cmp	r3, r4
 800808c:	d90b      	bls.n	80080a6 <_free_r+0x4e>
 800808e:	6821      	ldr	r1, [r4, #0]
 8008090:	1862      	adds	r2, r4, r1
 8008092:	4293      	cmp	r3, r2
 8008094:	bf04      	itt	eq
 8008096:	681a      	ldreq	r2, [r3, #0]
 8008098:	685b      	ldreq	r3, [r3, #4]
 800809a:	6063      	str	r3, [r4, #4]
 800809c:	bf04      	itt	eq
 800809e:	1852      	addeq	r2, r2, r1
 80080a0:	6022      	streq	r2, [r4, #0]
 80080a2:	602c      	str	r4, [r5, #0]
 80080a4:	e7ec      	b.n	8008080 <_free_r+0x28>
 80080a6:	461a      	mov	r2, r3
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	b10b      	cbz	r3, 80080b0 <_free_r+0x58>
 80080ac:	42a3      	cmp	r3, r4
 80080ae:	d9fa      	bls.n	80080a6 <_free_r+0x4e>
 80080b0:	6811      	ldr	r1, [r2, #0]
 80080b2:	1855      	adds	r5, r2, r1
 80080b4:	42a5      	cmp	r5, r4
 80080b6:	d10b      	bne.n	80080d0 <_free_r+0x78>
 80080b8:	6824      	ldr	r4, [r4, #0]
 80080ba:	4421      	add	r1, r4
 80080bc:	1854      	adds	r4, r2, r1
 80080be:	42a3      	cmp	r3, r4
 80080c0:	6011      	str	r1, [r2, #0]
 80080c2:	d1dd      	bne.n	8008080 <_free_r+0x28>
 80080c4:	681c      	ldr	r4, [r3, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	6053      	str	r3, [r2, #4]
 80080ca:	4421      	add	r1, r4
 80080cc:	6011      	str	r1, [r2, #0]
 80080ce:	e7d7      	b.n	8008080 <_free_r+0x28>
 80080d0:	d902      	bls.n	80080d8 <_free_r+0x80>
 80080d2:	230c      	movs	r3, #12
 80080d4:	6003      	str	r3, [r0, #0]
 80080d6:	e7d3      	b.n	8008080 <_free_r+0x28>
 80080d8:	6825      	ldr	r5, [r4, #0]
 80080da:	1961      	adds	r1, r4, r5
 80080dc:	428b      	cmp	r3, r1
 80080de:	bf04      	itt	eq
 80080e0:	6819      	ldreq	r1, [r3, #0]
 80080e2:	685b      	ldreq	r3, [r3, #4]
 80080e4:	6063      	str	r3, [r4, #4]
 80080e6:	bf04      	itt	eq
 80080e8:	1949      	addeq	r1, r1, r5
 80080ea:	6021      	streq	r1, [r4, #0]
 80080ec:	6054      	str	r4, [r2, #4]
 80080ee:	e7c7      	b.n	8008080 <_free_r+0x28>
 80080f0:	b003      	add	sp, #12
 80080f2:	bd30      	pop	{r4, r5, pc}
 80080f4:	2000112c 	.word	0x2000112c

080080f8 <_malloc_r>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	1ccd      	adds	r5, r1, #3
 80080fc:	f025 0503 	bic.w	r5, r5, #3
 8008100:	3508      	adds	r5, #8
 8008102:	2d0c      	cmp	r5, #12
 8008104:	bf38      	it	cc
 8008106:	250c      	movcc	r5, #12
 8008108:	2d00      	cmp	r5, #0
 800810a:	4606      	mov	r6, r0
 800810c:	db01      	blt.n	8008112 <_malloc_r+0x1a>
 800810e:	42a9      	cmp	r1, r5
 8008110:	d903      	bls.n	800811a <_malloc_r+0x22>
 8008112:	230c      	movs	r3, #12
 8008114:	6033      	str	r3, [r6, #0]
 8008116:	2000      	movs	r0, #0
 8008118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800811a:	f000 fbcd 	bl	80088b8 <__malloc_lock>
 800811e:	4921      	ldr	r1, [pc, #132]	; (80081a4 <_malloc_r+0xac>)
 8008120:	680a      	ldr	r2, [r1, #0]
 8008122:	4614      	mov	r4, r2
 8008124:	b99c      	cbnz	r4, 800814e <_malloc_r+0x56>
 8008126:	4f20      	ldr	r7, [pc, #128]	; (80081a8 <_malloc_r+0xb0>)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	b923      	cbnz	r3, 8008136 <_malloc_r+0x3e>
 800812c:	4621      	mov	r1, r4
 800812e:	4630      	mov	r0, r6
 8008130:	f000 f8e8 	bl	8008304 <_sbrk_r>
 8008134:	6038      	str	r0, [r7, #0]
 8008136:	4629      	mov	r1, r5
 8008138:	4630      	mov	r0, r6
 800813a:	f000 f8e3 	bl	8008304 <_sbrk_r>
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	d123      	bne.n	800818a <_malloc_r+0x92>
 8008142:	230c      	movs	r3, #12
 8008144:	6033      	str	r3, [r6, #0]
 8008146:	4630      	mov	r0, r6
 8008148:	f000 fbbc 	bl	80088c4 <__malloc_unlock>
 800814c:	e7e3      	b.n	8008116 <_malloc_r+0x1e>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	1b5b      	subs	r3, r3, r5
 8008152:	d417      	bmi.n	8008184 <_malloc_r+0x8c>
 8008154:	2b0b      	cmp	r3, #11
 8008156:	d903      	bls.n	8008160 <_malloc_r+0x68>
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	441c      	add	r4, r3
 800815c:	6025      	str	r5, [r4, #0]
 800815e:	e004      	b.n	800816a <_malloc_r+0x72>
 8008160:	6863      	ldr	r3, [r4, #4]
 8008162:	42a2      	cmp	r2, r4
 8008164:	bf0c      	ite	eq
 8008166:	600b      	streq	r3, [r1, #0]
 8008168:	6053      	strne	r3, [r2, #4]
 800816a:	4630      	mov	r0, r6
 800816c:	f000 fbaa 	bl	80088c4 <__malloc_unlock>
 8008170:	f104 000b 	add.w	r0, r4, #11
 8008174:	1d23      	adds	r3, r4, #4
 8008176:	f020 0007 	bic.w	r0, r0, #7
 800817a:	1ac2      	subs	r2, r0, r3
 800817c:	d0cc      	beq.n	8008118 <_malloc_r+0x20>
 800817e:	1a1b      	subs	r3, r3, r0
 8008180:	50a3      	str	r3, [r4, r2]
 8008182:	e7c9      	b.n	8008118 <_malloc_r+0x20>
 8008184:	4622      	mov	r2, r4
 8008186:	6864      	ldr	r4, [r4, #4]
 8008188:	e7cc      	b.n	8008124 <_malloc_r+0x2c>
 800818a:	1cc4      	adds	r4, r0, #3
 800818c:	f024 0403 	bic.w	r4, r4, #3
 8008190:	42a0      	cmp	r0, r4
 8008192:	d0e3      	beq.n	800815c <_malloc_r+0x64>
 8008194:	1a21      	subs	r1, r4, r0
 8008196:	4630      	mov	r0, r6
 8008198:	f000 f8b4 	bl	8008304 <_sbrk_r>
 800819c:	3001      	adds	r0, #1
 800819e:	d1dd      	bne.n	800815c <_malloc_r+0x64>
 80081a0:	e7cf      	b.n	8008142 <_malloc_r+0x4a>
 80081a2:	bf00      	nop
 80081a4:	2000112c 	.word	0x2000112c
 80081a8:	20001130 	.word	0x20001130

080081ac <iprintf>:
 80081ac:	b40f      	push	{r0, r1, r2, r3}
 80081ae:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <iprintf+0x2c>)
 80081b0:	b513      	push	{r0, r1, r4, lr}
 80081b2:	681c      	ldr	r4, [r3, #0]
 80081b4:	b124      	cbz	r4, 80081c0 <iprintf+0x14>
 80081b6:	69a3      	ldr	r3, [r4, #24]
 80081b8:	b913      	cbnz	r3, 80081c0 <iprintf+0x14>
 80081ba:	4620      	mov	r0, r4
 80081bc:	f7ff fe4e 	bl	8007e5c <__sinit>
 80081c0:	ab05      	add	r3, sp, #20
 80081c2:	9a04      	ldr	r2, [sp, #16]
 80081c4:	68a1      	ldr	r1, [r4, #8]
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	4620      	mov	r0, r4
 80081ca:	f000 feff 	bl	8008fcc <_vfiprintf_r>
 80081ce:	b002      	add	sp, #8
 80081d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d4:	b004      	add	sp, #16
 80081d6:	4770      	bx	lr
 80081d8:	200000d0 	.word	0x200000d0

080081dc <putchar>:
 80081dc:	4b09      	ldr	r3, [pc, #36]	; (8008204 <putchar+0x28>)
 80081de:	b513      	push	{r0, r1, r4, lr}
 80081e0:	681c      	ldr	r4, [r3, #0]
 80081e2:	4601      	mov	r1, r0
 80081e4:	b134      	cbz	r4, 80081f4 <putchar+0x18>
 80081e6:	69a3      	ldr	r3, [r4, #24]
 80081e8:	b923      	cbnz	r3, 80081f4 <putchar+0x18>
 80081ea:	9001      	str	r0, [sp, #4]
 80081ec:	4620      	mov	r0, r4
 80081ee:	f7ff fe35 	bl	8007e5c <__sinit>
 80081f2:	9901      	ldr	r1, [sp, #4]
 80081f4:	68a2      	ldr	r2, [r4, #8]
 80081f6:	4620      	mov	r0, r4
 80081f8:	b002      	add	sp, #8
 80081fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081fe:	f001 baf5 	b.w	80097ec <_putc_r>
 8008202:	bf00      	nop
 8008204:	200000d0 	.word	0x200000d0

08008208 <_puts_r>:
 8008208:	b570      	push	{r4, r5, r6, lr}
 800820a:	460e      	mov	r6, r1
 800820c:	4605      	mov	r5, r0
 800820e:	b118      	cbz	r0, 8008218 <_puts_r+0x10>
 8008210:	6983      	ldr	r3, [r0, #24]
 8008212:	b90b      	cbnz	r3, 8008218 <_puts_r+0x10>
 8008214:	f7ff fe22 	bl	8007e5c <__sinit>
 8008218:	69ab      	ldr	r3, [r5, #24]
 800821a:	68ac      	ldr	r4, [r5, #8]
 800821c:	b913      	cbnz	r3, 8008224 <_puts_r+0x1c>
 800821e:	4628      	mov	r0, r5
 8008220:	f7ff fe1c 	bl	8007e5c <__sinit>
 8008224:	4b2c      	ldr	r3, [pc, #176]	; (80082d8 <_puts_r+0xd0>)
 8008226:	429c      	cmp	r4, r3
 8008228:	d120      	bne.n	800826c <_puts_r+0x64>
 800822a:	686c      	ldr	r4, [r5, #4]
 800822c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800822e:	07db      	lsls	r3, r3, #31
 8008230:	d405      	bmi.n	800823e <_puts_r+0x36>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	0598      	lsls	r0, r3, #22
 8008236:	d402      	bmi.n	800823e <_puts_r+0x36>
 8008238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800823a:	f7ff fed2 	bl	8007fe2 <__retarget_lock_acquire_recursive>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	0719      	lsls	r1, r3, #28
 8008242:	d51d      	bpl.n	8008280 <_puts_r+0x78>
 8008244:	6923      	ldr	r3, [r4, #16]
 8008246:	b1db      	cbz	r3, 8008280 <_puts_r+0x78>
 8008248:	3e01      	subs	r6, #1
 800824a:	68a3      	ldr	r3, [r4, #8]
 800824c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008250:	3b01      	subs	r3, #1
 8008252:	60a3      	str	r3, [r4, #8]
 8008254:	bb39      	cbnz	r1, 80082a6 <_puts_r+0x9e>
 8008256:	2b00      	cmp	r3, #0
 8008258:	da38      	bge.n	80082cc <_puts_r+0xc4>
 800825a:	4622      	mov	r2, r4
 800825c:	210a      	movs	r1, #10
 800825e:	4628      	mov	r0, r5
 8008260:	f000 f9d2 	bl	8008608 <__swbuf_r>
 8008264:	3001      	adds	r0, #1
 8008266:	d011      	beq.n	800828c <_puts_r+0x84>
 8008268:	250a      	movs	r5, #10
 800826a:	e011      	b.n	8008290 <_puts_r+0x88>
 800826c:	4b1b      	ldr	r3, [pc, #108]	; (80082dc <_puts_r+0xd4>)
 800826e:	429c      	cmp	r4, r3
 8008270:	d101      	bne.n	8008276 <_puts_r+0x6e>
 8008272:	68ac      	ldr	r4, [r5, #8]
 8008274:	e7da      	b.n	800822c <_puts_r+0x24>
 8008276:	4b1a      	ldr	r3, [pc, #104]	; (80082e0 <_puts_r+0xd8>)
 8008278:	429c      	cmp	r4, r3
 800827a:	bf08      	it	eq
 800827c:	68ec      	ldreq	r4, [r5, #12]
 800827e:	e7d5      	b.n	800822c <_puts_r+0x24>
 8008280:	4621      	mov	r1, r4
 8008282:	4628      	mov	r0, r5
 8008284:	f000 fa24 	bl	80086d0 <__swsetup_r>
 8008288:	2800      	cmp	r0, #0
 800828a:	d0dd      	beq.n	8008248 <_puts_r+0x40>
 800828c:	f04f 35ff 	mov.w	r5, #4294967295
 8008290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008292:	07da      	lsls	r2, r3, #31
 8008294:	d405      	bmi.n	80082a2 <_puts_r+0x9a>
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	059b      	lsls	r3, r3, #22
 800829a:	d402      	bmi.n	80082a2 <_puts_r+0x9a>
 800829c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829e:	f7ff fea1 	bl	8007fe4 <__retarget_lock_release_recursive>
 80082a2:	4628      	mov	r0, r5
 80082a4:	bd70      	pop	{r4, r5, r6, pc}
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	da04      	bge.n	80082b4 <_puts_r+0xac>
 80082aa:	69a2      	ldr	r2, [r4, #24]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	dc06      	bgt.n	80082be <_puts_r+0xb6>
 80082b0:	290a      	cmp	r1, #10
 80082b2:	d004      	beq.n	80082be <_puts_r+0xb6>
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	6022      	str	r2, [r4, #0]
 80082ba:	7019      	strb	r1, [r3, #0]
 80082bc:	e7c5      	b.n	800824a <_puts_r+0x42>
 80082be:	4622      	mov	r2, r4
 80082c0:	4628      	mov	r0, r5
 80082c2:	f000 f9a1 	bl	8008608 <__swbuf_r>
 80082c6:	3001      	adds	r0, #1
 80082c8:	d1bf      	bne.n	800824a <_puts_r+0x42>
 80082ca:	e7df      	b.n	800828c <_puts_r+0x84>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	250a      	movs	r5, #10
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	6022      	str	r2, [r4, #0]
 80082d4:	701d      	strb	r5, [r3, #0]
 80082d6:	e7db      	b.n	8008290 <_puts_r+0x88>
 80082d8:	0800a5b4 	.word	0x0800a5b4
 80082dc:	0800a5d4 	.word	0x0800a5d4
 80082e0:	0800a594 	.word	0x0800a594

080082e4 <puts>:
 80082e4:	4b02      	ldr	r3, [pc, #8]	; (80082f0 <puts+0xc>)
 80082e6:	4601      	mov	r1, r0
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	f7ff bf8d 	b.w	8008208 <_puts_r>
 80082ee:	bf00      	nop
 80082f0:	200000d0 	.word	0x200000d0

080082f4 <realloc>:
 80082f4:	4b02      	ldr	r3, [pc, #8]	; (8008300 <realloc+0xc>)
 80082f6:	460a      	mov	r2, r1
 80082f8:	4601      	mov	r1, r0
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	f000 bae8 	b.w	80088d0 <_realloc_r>
 8008300:	200000d0 	.word	0x200000d0

08008304 <_sbrk_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4d06      	ldr	r5, [pc, #24]	; (8008320 <_sbrk_r+0x1c>)
 8008308:	2300      	movs	r3, #0
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	602b      	str	r3, [r5, #0]
 8008310:	f7fb face 	bl	80038b0 <_sbrk>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d102      	bne.n	800831e <_sbrk_r+0x1a>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	b103      	cbz	r3, 800831e <_sbrk_r+0x1a>
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	bd38      	pop	{r3, r4, r5, pc}
 8008320:	20003e34 	.word	0x20003e34

08008324 <siprintf>:
 8008324:	b40e      	push	{r1, r2, r3}
 8008326:	b500      	push	{lr}
 8008328:	b09c      	sub	sp, #112	; 0x70
 800832a:	ab1d      	add	r3, sp, #116	; 0x74
 800832c:	9002      	str	r0, [sp, #8]
 800832e:	9006      	str	r0, [sp, #24]
 8008330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008334:	4809      	ldr	r0, [pc, #36]	; (800835c <siprintf+0x38>)
 8008336:	9107      	str	r1, [sp, #28]
 8008338:	9104      	str	r1, [sp, #16]
 800833a:	4909      	ldr	r1, [pc, #36]	; (8008360 <siprintf+0x3c>)
 800833c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008340:	9105      	str	r1, [sp, #20]
 8008342:	6800      	ldr	r0, [r0, #0]
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	a902      	add	r1, sp, #8
 8008348:	f000 fb44 	bl	80089d4 <_svfiprintf_r>
 800834c:	9b02      	ldr	r3, [sp, #8]
 800834e:	2200      	movs	r2, #0
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	b01c      	add	sp, #112	; 0x70
 8008354:	f85d eb04 	ldr.w	lr, [sp], #4
 8008358:	b003      	add	sp, #12
 800835a:	4770      	bx	lr
 800835c:	200000d0 	.word	0x200000d0
 8008360:	ffff0208 	.word	0xffff0208

08008364 <siscanf>:
 8008364:	b40e      	push	{r1, r2, r3}
 8008366:	b510      	push	{r4, lr}
 8008368:	b09f      	sub	sp, #124	; 0x7c
 800836a:	ac21      	add	r4, sp, #132	; 0x84
 800836c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008370:	f854 2b04 	ldr.w	r2, [r4], #4
 8008374:	9201      	str	r2, [sp, #4]
 8008376:	f8ad 101c 	strh.w	r1, [sp, #28]
 800837a:	9004      	str	r0, [sp, #16]
 800837c:	9008      	str	r0, [sp, #32]
 800837e:	f7f7 ff51 	bl	8000224 <strlen>
 8008382:	4b0c      	ldr	r3, [pc, #48]	; (80083b4 <siscanf+0x50>)
 8008384:	9005      	str	r0, [sp, #20]
 8008386:	9009      	str	r0, [sp, #36]	; 0x24
 8008388:	930d      	str	r3, [sp, #52]	; 0x34
 800838a:	480b      	ldr	r0, [pc, #44]	; (80083b8 <siscanf+0x54>)
 800838c:	9a01      	ldr	r2, [sp, #4]
 800838e:	6800      	ldr	r0, [r0, #0]
 8008390:	9403      	str	r4, [sp, #12]
 8008392:	2300      	movs	r3, #0
 8008394:	9311      	str	r3, [sp, #68]	; 0x44
 8008396:	9316      	str	r3, [sp, #88]	; 0x58
 8008398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800839c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80083a0:	a904      	add	r1, sp, #16
 80083a2:	4623      	mov	r3, r4
 80083a4:	f000 fc70 	bl	8008c88 <__ssvfiscanf_r>
 80083a8:	b01f      	add	sp, #124	; 0x7c
 80083aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083ae:	b003      	add	sp, #12
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	080083df 	.word	0x080083df
 80083b8:	200000d0 	.word	0x200000d0

080083bc <__sread>:
 80083bc:	b510      	push	{r4, lr}
 80083be:	460c      	mov	r4, r1
 80083c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c4:	f001 fa5a 	bl	800987c <_read_r>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	bfab      	itete	ge
 80083cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083ce:	89a3      	ldrhlt	r3, [r4, #12]
 80083d0:	181b      	addge	r3, r3, r0
 80083d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083d6:	bfac      	ite	ge
 80083d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80083da:	81a3      	strhlt	r3, [r4, #12]
 80083dc:	bd10      	pop	{r4, pc}

080083de <__seofread>:
 80083de:	2000      	movs	r0, #0
 80083e0:	4770      	bx	lr

080083e2 <__swrite>:
 80083e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e6:	461f      	mov	r7, r3
 80083e8:	898b      	ldrh	r3, [r1, #12]
 80083ea:	05db      	lsls	r3, r3, #23
 80083ec:	4605      	mov	r5, r0
 80083ee:	460c      	mov	r4, r1
 80083f0:	4616      	mov	r6, r2
 80083f2:	d505      	bpl.n	8008400 <__swrite+0x1e>
 80083f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f8:	2302      	movs	r3, #2
 80083fa:	2200      	movs	r2, #0
 80083fc:	f000 f9e6 	bl	80087cc <_lseek_r>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800840a:	81a3      	strh	r3, [r4, #12]
 800840c:	4632      	mov	r2, r6
 800840e:	463b      	mov	r3, r7
 8008410:	4628      	mov	r0, r5
 8008412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008416:	f000 b949 	b.w	80086ac <_write_r>

0800841a <__sseek>:
 800841a:	b510      	push	{r4, lr}
 800841c:	460c      	mov	r4, r1
 800841e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008422:	f000 f9d3 	bl	80087cc <_lseek_r>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	bf15      	itete	ne
 800842c:	6560      	strne	r0, [r4, #84]	; 0x54
 800842e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008436:	81a3      	strheq	r3, [r4, #12]
 8008438:	bf18      	it	ne
 800843a:	81a3      	strhne	r3, [r4, #12]
 800843c:	bd10      	pop	{r4, pc}

0800843e <__sclose>:
 800843e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008442:	f000 b9b3 	b.w	80087ac <_close_r>

08008446 <strchr>:
 8008446:	b2c9      	uxtb	r1, r1
 8008448:	4603      	mov	r3, r0
 800844a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800844e:	b11a      	cbz	r2, 8008458 <strchr+0x12>
 8008450:	428a      	cmp	r2, r1
 8008452:	d1f9      	bne.n	8008448 <strchr+0x2>
 8008454:	4618      	mov	r0, r3
 8008456:	4770      	bx	lr
 8008458:	2900      	cmp	r1, #0
 800845a:	bf18      	it	ne
 800845c:	2300      	movne	r3, #0
 800845e:	e7f9      	b.n	8008454 <strchr+0xe>

08008460 <strcpy>:
 8008460:	4603      	mov	r3, r0
 8008462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008466:	f803 2b01 	strb.w	r2, [r3], #1
 800846a:	2a00      	cmp	r2, #0
 800846c:	d1f9      	bne.n	8008462 <strcpy+0x2>
 800846e:	4770      	bx	lr

08008470 <strncmp>:
 8008470:	b510      	push	{r4, lr}
 8008472:	b16a      	cbz	r2, 8008490 <strncmp+0x20>
 8008474:	3901      	subs	r1, #1
 8008476:	1884      	adds	r4, r0, r2
 8008478:	f810 3b01 	ldrb.w	r3, [r0], #1
 800847c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008480:	4293      	cmp	r3, r2
 8008482:	d103      	bne.n	800848c <strncmp+0x1c>
 8008484:	42a0      	cmp	r0, r4
 8008486:	d001      	beq.n	800848c <strncmp+0x1c>
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1f5      	bne.n	8008478 <strncmp+0x8>
 800848c:	1a98      	subs	r0, r3, r2
 800848e:	bd10      	pop	{r4, pc}
 8008490:	4610      	mov	r0, r2
 8008492:	e7fc      	b.n	800848e <strncmp+0x1e>

08008494 <strncpy>:
 8008494:	b510      	push	{r4, lr}
 8008496:	3901      	subs	r1, #1
 8008498:	4603      	mov	r3, r0
 800849a:	b132      	cbz	r2, 80084aa <strncpy+0x16>
 800849c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80084a0:	f803 4b01 	strb.w	r4, [r3], #1
 80084a4:	3a01      	subs	r2, #1
 80084a6:	2c00      	cmp	r4, #0
 80084a8:	d1f7      	bne.n	800849a <strncpy+0x6>
 80084aa:	441a      	add	r2, r3
 80084ac:	2100      	movs	r1, #0
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d100      	bne.n	80084b4 <strncpy+0x20>
 80084b2:	bd10      	pop	{r4, pc}
 80084b4:	f803 1b01 	strb.w	r1, [r3], #1
 80084b8:	e7f9      	b.n	80084ae <strncpy+0x1a>

080084ba <strstr>:
 80084ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084bc:	780c      	ldrb	r4, [r1, #0]
 80084be:	b164      	cbz	r4, 80084da <strstr+0x20>
 80084c0:	4603      	mov	r3, r0
 80084c2:	781a      	ldrb	r2, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	1c5e      	adds	r6, r3, #1
 80084c8:	b90a      	cbnz	r2, 80084ce <strstr+0x14>
 80084ca:	4610      	mov	r0, r2
 80084cc:	e005      	b.n	80084da <strstr+0x20>
 80084ce:	4294      	cmp	r4, r2
 80084d0:	d108      	bne.n	80084e4 <strstr+0x2a>
 80084d2:	460d      	mov	r5, r1
 80084d4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80084d8:	b902      	cbnz	r2, 80084dc <strstr+0x22>
 80084da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084dc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80084e0:	4297      	cmp	r7, r2
 80084e2:	d0f7      	beq.n	80084d4 <strstr+0x1a>
 80084e4:	4633      	mov	r3, r6
 80084e6:	e7ec      	b.n	80084c2 <strstr+0x8>

080084e8 <_strtol_l.isra.0>:
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ee:	d001      	beq.n	80084f4 <_strtol_l.isra.0+0xc>
 80084f0:	2b24      	cmp	r3, #36	; 0x24
 80084f2:	d906      	bls.n	8008502 <_strtol_l.isra.0+0x1a>
 80084f4:	f7ff fb80 	bl	8007bf8 <__errno>
 80084f8:	2316      	movs	r3, #22
 80084fa:	6003      	str	r3, [r0, #0]
 80084fc:	2000      	movs	r0, #0
 80084fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008502:	4f3a      	ldr	r7, [pc, #232]	; (80085ec <_strtol_l.isra.0+0x104>)
 8008504:	468e      	mov	lr, r1
 8008506:	4676      	mov	r6, lr
 8008508:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800850c:	5de5      	ldrb	r5, [r4, r7]
 800850e:	f015 0508 	ands.w	r5, r5, #8
 8008512:	d1f8      	bne.n	8008506 <_strtol_l.isra.0+0x1e>
 8008514:	2c2d      	cmp	r4, #45	; 0x2d
 8008516:	d134      	bne.n	8008582 <_strtol_l.isra.0+0x9a>
 8008518:	f89e 4000 	ldrb.w	r4, [lr]
 800851c:	f04f 0801 	mov.w	r8, #1
 8008520:	f106 0e02 	add.w	lr, r6, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d05c      	beq.n	80085e2 <_strtol_l.isra.0+0xfa>
 8008528:	2b10      	cmp	r3, #16
 800852a:	d10c      	bne.n	8008546 <_strtol_l.isra.0+0x5e>
 800852c:	2c30      	cmp	r4, #48	; 0x30
 800852e:	d10a      	bne.n	8008546 <_strtol_l.isra.0+0x5e>
 8008530:	f89e 4000 	ldrb.w	r4, [lr]
 8008534:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008538:	2c58      	cmp	r4, #88	; 0x58
 800853a:	d14d      	bne.n	80085d8 <_strtol_l.isra.0+0xf0>
 800853c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008540:	2310      	movs	r3, #16
 8008542:	f10e 0e02 	add.w	lr, lr, #2
 8008546:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800854a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800854e:	2600      	movs	r6, #0
 8008550:	fbbc f9f3 	udiv	r9, ip, r3
 8008554:	4635      	mov	r5, r6
 8008556:	fb03 ca19 	mls	sl, r3, r9, ip
 800855a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800855e:	2f09      	cmp	r7, #9
 8008560:	d818      	bhi.n	8008594 <_strtol_l.isra.0+0xac>
 8008562:	463c      	mov	r4, r7
 8008564:	42a3      	cmp	r3, r4
 8008566:	dd24      	ble.n	80085b2 <_strtol_l.isra.0+0xca>
 8008568:	2e00      	cmp	r6, #0
 800856a:	db1f      	blt.n	80085ac <_strtol_l.isra.0+0xc4>
 800856c:	45a9      	cmp	r9, r5
 800856e:	d31d      	bcc.n	80085ac <_strtol_l.isra.0+0xc4>
 8008570:	d101      	bne.n	8008576 <_strtol_l.isra.0+0x8e>
 8008572:	45a2      	cmp	sl, r4
 8008574:	db1a      	blt.n	80085ac <_strtol_l.isra.0+0xc4>
 8008576:	fb05 4503 	mla	r5, r5, r3, r4
 800857a:	2601      	movs	r6, #1
 800857c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008580:	e7eb      	b.n	800855a <_strtol_l.isra.0+0x72>
 8008582:	2c2b      	cmp	r4, #43	; 0x2b
 8008584:	bf08      	it	eq
 8008586:	f89e 4000 	ldrbeq.w	r4, [lr]
 800858a:	46a8      	mov	r8, r5
 800858c:	bf08      	it	eq
 800858e:	f106 0e02 	addeq.w	lr, r6, #2
 8008592:	e7c7      	b.n	8008524 <_strtol_l.isra.0+0x3c>
 8008594:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008598:	2f19      	cmp	r7, #25
 800859a:	d801      	bhi.n	80085a0 <_strtol_l.isra.0+0xb8>
 800859c:	3c37      	subs	r4, #55	; 0x37
 800859e:	e7e1      	b.n	8008564 <_strtol_l.isra.0+0x7c>
 80085a0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80085a4:	2f19      	cmp	r7, #25
 80085a6:	d804      	bhi.n	80085b2 <_strtol_l.isra.0+0xca>
 80085a8:	3c57      	subs	r4, #87	; 0x57
 80085aa:	e7db      	b.n	8008564 <_strtol_l.isra.0+0x7c>
 80085ac:	f04f 36ff 	mov.w	r6, #4294967295
 80085b0:	e7e4      	b.n	800857c <_strtol_l.isra.0+0x94>
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	da05      	bge.n	80085c2 <_strtol_l.isra.0+0xda>
 80085b6:	2322      	movs	r3, #34	; 0x22
 80085b8:	6003      	str	r3, [r0, #0]
 80085ba:	4665      	mov	r5, ip
 80085bc:	b942      	cbnz	r2, 80085d0 <_strtol_l.isra.0+0xe8>
 80085be:	4628      	mov	r0, r5
 80085c0:	e79d      	b.n	80084fe <_strtol_l.isra.0+0x16>
 80085c2:	f1b8 0f00 	cmp.w	r8, #0
 80085c6:	d000      	beq.n	80085ca <_strtol_l.isra.0+0xe2>
 80085c8:	426d      	negs	r5, r5
 80085ca:	2a00      	cmp	r2, #0
 80085cc:	d0f7      	beq.n	80085be <_strtol_l.isra.0+0xd6>
 80085ce:	b10e      	cbz	r6, 80085d4 <_strtol_l.isra.0+0xec>
 80085d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80085d4:	6011      	str	r1, [r2, #0]
 80085d6:	e7f2      	b.n	80085be <_strtol_l.isra.0+0xd6>
 80085d8:	2430      	movs	r4, #48	; 0x30
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1b3      	bne.n	8008546 <_strtol_l.isra.0+0x5e>
 80085de:	2308      	movs	r3, #8
 80085e0:	e7b1      	b.n	8008546 <_strtol_l.isra.0+0x5e>
 80085e2:	2c30      	cmp	r4, #48	; 0x30
 80085e4:	d0a4      	beq.n	8008530 <_strtol_l.isra.0+0x48>
 80085e6:	230a      	movs	r3, #10
 80085e8:	e7ad      	b.n	8008546 <_strtol_l.isra.0+0x5e>
 80085ea:	bf00      	nop
 80085ec:	0800a493 	.word	0x0800a493

080085f0 <_strtol_r>:
 80085f0:	f7ff bf7a 	b.w	80084e8 <_strtol_l.isra.0>

080085f4 <strtol>:
 80085f4:	4613      	mov	r3, r2
 80085f6:	460a      	mov	r2, r1
 80085f8:	4601      	mov	r1, r0
 80085fa:	4802      	ldr	r0, [pc, #8]	; (8008604 <strtol+0x10>)
 80085fc:	6800      	ldr	r0, [r0, #0]
 80085fe:	f7ff bf73 	b.w	80084e8 <_strtol_l.isra.0>
 8008602:	bf00      	nop
 8008604:	200000d0 	.word	0x200000d0

08008608 <__swbuf_r>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	460e      	mov	r6, r1
 800860c:	4614      	mov	r4, r2
 800860e:	4605      	mov	r5, r0
 8008610:	b118      	cbz	r0, 800861a <__swbuf_r+0x12>
 8008612:	6983      	ldr	r3, [r0, #24]
 8008614:	b90b      	cbnz	r3, 800861a <__swbuf_r+0x12>
 8008616:	f7ff fc21 	bl	8007e5c <__sinit>
 800861a:	4b21      	ldr	r3, [pc, #132]	; (80086a0 <__swbuf_r+0x98>)
 800861c:	429c      	cmp	r4, r3
 800861e:	d12b      	bne.n	8008678 <__swbuf_r+0x70>
 8008620:	686c      	ldr	r4, [r5, #4]
 8008622:	69a3      	ldr	r3, [r4, #24]
 8008624:	60a3      	str	r3, [r4, #8]
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	071a      	lsls	r2, r3, #28
 800862a:	d52f      	bpl.n	800868c <__swbuf_r+0x84>
 800862c:	6923      	ldr	r3, [r4, #16]
 800862e:	b36b      	cbz	r3, 800868c <__swbuf_r+0x84>
 8008630:	6923      	ldr	r3, [r4, #16]
 8008632:	6820      	ldr	r0, [r4, #0]
 8008634:	1ac0      	subs	r0, r0, r3
 8008636:	6963      	ldr	r3, [r4, #20]
 8008638:	b2f6      	uxtb	r6, r6
 800863a:	4283      	cmp	r3, r0
 800863c:	4637      	mov	r7, r6
 800863e:	dc04      	bgt.n	800864a <__swbuf_r+0x42>
 8008640:	4621      	mov	r1, r4
 8008642:	4628      	mov	r0, r5
 8008644:	f7ff fb64 	bl	8007d10 <_fflush_r>
 8008648:	bb30      	cbnz	r0, 8008698 <__swbuf_r+0x90>
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	3b01      	subs	r3, #1
 800864e:	60a3      	str	r3, [r4, #8]
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	1c5a      	adds	r2, r3, #1
 8008654:	6022      	str	r2, [r4, #0]
 8008656:	701e      	strb	r6, [r3, #0]
 8008658:	6963      	ldr	r3, [r4, #20]
 800865a:	3001      	adds	r0, #1
 800865c:	4283      	cmp	r3, r0
 800865e:	d004      	beq.n	800866a <__swbuf_r+0x62>
 8008660:	89a3      	ldrh	r3, [r4, #12]
 8008662:	07db      	lsls	r3, r3, #31
 8008664:	d506      	bpl.n	8008674 <__swbuf_r+0x6c>
 8008666:	2e0a      	cmp	r6, #10
 8008668:	d104      	bne.n	8008674 <__swbuf_r+0x6c>
 800866a:	4621      	mov	r1, r4
 800866c:	4628      	mov	r0, r5
 800866e:	f7ff fb4f 	bl	8007d10 <_fflush_r>
 8008672:	b988      	cbnz	r0, 8008698 <__swbuf_r+0x90>
 8008674:	4638      	mov	r0, r7
 8008676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008678:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <__swbuf_r+0x9c>)
 800867a:	429c      	cmp	r4, r3
 800867c:	d101      	bne.n	8008682 <__swbuf_r+0x7a>
 800867e:	68ac      	ldr	r4, [r5, #8]
 8008680:	e7cf      	b.n	8008622 <__swbuf_r+0x1a>
 8008682:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <__swbuf_r+0xa0>)
 8008684:	429c      	cmp	r4, r3
 8008686:	bf08      	it	eq
 8008688:	68ec      	ldreq	r4, [r5, #12]
 800868a:	e7ca      	b.n	8008622 <__swbuf_r+0x1a>
 800868c:	4621      	mov	r1, r4
 800868e:	4628      	mov	r0, r5
 8008690:	f000 f81e 	bl	80086d0 <__swsetup_r>
 8008694:	2800      	cmp	r0, #0
 8008696:	d0cb      	beq.n	8008630 <__swbuf_r+0x28>
 8008698:	f04f 37ff 	mov.w	r7, #4294967295
 800869c:	e7ea      	b.n	8008674 <__swbuf_r+0x6c>
 800869e:	bf00      	nop
 80086a0:	0800a5b4 	.word	0x0800a5b4
 80086a4:	0800a5d4 	.word	0x0800a5d4
 80086a8:	0800a594 	.word	0x0800a594

080086ac <_write_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d07      	ldr	r5, [pc, #28]	; (80086cc <_write_r+0x20>)
 80086b0:	4604      	mov	r4, r0
 80086b2:	4608      	mov	r0, r1
 80086b4:	4611      	mov	r1, r2
 80086b6:	2200      	movs	r2, #0
 80086b8:	602a      	str	r2, [r5, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f7fa f94a 	bl	8002954 <_write>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_write_r+0x1e>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_write_r+0x1e>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	20003e34 	.word	0x20003e34

080086d0 <__swsetup_r>:
 80086d0:	4b32      	ldr	r3, [pc, #200]	; (800879c <__swsetup_r+0xcc>)
 80086d2:	b570      	push	{r4, r5, r6, lr}
 80086d4:	681d      	ldr	r5, [r3, #0]
 80086d6:	4606      	mov	r6, r0
 80086d8:	460c      	mov	r4, r1
 80086da:	b125      	cbz	r5, 80086e6 <__swsetup_r+0x16>
 80086dc:	69ab      	ldr	r3, [r5, #24]
 80086de:	b913      	cbnz	r3, 80086e6 <__swsetup_r+0x16>
 80086e0:	4628      	mov	r0, r5
 80086e2:	f7ff fbbb 	bl	8007e5c <__sinit>
 80086e6:	4b2e      	ldr	r3, [pc, #184]	; (80087a0 <__swsetup_r+0xd0>)
 80086e8:	429c      	cmp	r4, r3
 80086ea:	d10f      	bne.n	800870c <__swsetup_r+0x3c>
 80086ec:	686c      	ldr	r4, [r5, #4]
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086f4:	0719      	lsls	r1, r3, #28
 80086f6:	d42c      	bmi.n	8008752 <__swsetup_r+0x82>
 80086f8:	06dd      	lsls	r5, r3, #27
 80086fa:	d411      	bmi.n	8008720 <__swsetup_r+0x50>
 80086fc:	2309      	movs	r3, #9
 80086fe:	6033      	str	r3, [r6, #0]
 8008700:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008704:	81a3      	strh	r3, [r4, #12]
 8008706:	f04f 30ff 	mov.w	r0, #4294967295
 800870a:	e03e      	b.n	800878a <__swsetup_r+0xba>
 800870c:	4b25      	ldr	r3, [pc, #148]	; (80087a4 <__swsetup_r+0xd4>)
 800870e:	429c      	cmp	r4, r3
 8008710:	d101      	bne.n	8008716 <__swsetup_r+0x46>
 8008712:	68ac      	ldr	r4, [r5, #8]
 8008714:	e7eb      	b.n	80086ee <__swsetup_r+0x1e>
 8008716:	4b24      	ldr	r3, [pc, #144]	; (80087a8 <__swsetup_r+0xd8>)
 8008718:	429c      	cmp	r4, r3
 800871a:	bf08      	it	eq
 800871c:	68ec      	ldreq	r4, [r5, #12]
 800871e:	e7e6      	b.n	80086ee <__swsetup_r+0x1e>
 8008720:	0758      	lsls	r0, r3, #29
 8008722:	d512      	bpl.n	800874a <__swsetup_r+0x7a>
 8008724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008726:	b141      	cbz	r1, 800873a <__swsetup_r+0x6a>
 8008728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800872c:	4299      	cmp	r1, r3
 800872e:	d002      	beq.n	8008736 <__swsetup_r+0x66>
 8008730:	4630      	mov	r0, r6
 8008732:	f7ff fc91 	bl	8008058 <_free_r>
 8008736:	2300      	movs	r3, #0
 8008738:	6363      	str	r3, [r4, #52]	; 0x34
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	2300      	movs	r3, #0
 8008744:	6063      	str	r3, [r4, #4]
 8008746:	6923      	ldr	r3, [r4, #16]
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	89a3      	ldrh	r3, [r4, #12]
 800874c:	f043 0308 	orr.w	r3, r3, #8
 8008750:	81a3      	strh	r3, [r4, #12]
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	b94b      	cbnz	r3, 800876a <__swsetup_r+0x9a>
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800875c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008760:	d003      	beq.n	800876a <__swsetup_r+0x9a>
 8008762:	4621      	mov	r1, r4
 8008764:	4630      	mov	r0, r6
 8008766:	f000 f867 	bl	8008838 <__smakebuf_r>
 800876a:	89a0      	ldrh	r0, [r4, #12]
 800876c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008770:	f010 0301 	ands.w	r3, r0, #1
 8008774:	d00a      	beq.n	800878c <__swsetup_r+0xbc>
 8008776:	2300      	movs	r3, #0
 8008778:	60a3      	str	r3, [r4, #8]
 800877a:	6963      	ldr	r3, [r4, #20]
 800877c:	425b      	negs	r3, r3
 800877e:	61a3      	str	r3, [r4, #24]
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	b943      	cbnz	r3, 8008796 <__swsetup_r+0xc6>
 8008784:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008788:	d1ba      	bne.n	8008700 <__swsetup_r+0x30>
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	0781      	lsls	r1, r0, #30
 800878e:	bf58      	it	pl
 8008790:	6963      	ldrpl	r3, [r4, #20]
 8008792:	60a3      	str	r3, [r4, #8]
 8008794:	e7f4      	b.n	8008780 <__swsetup_r+0xb0>
 8008796:	2000      	movs	r0, #0
 8008798:	e7f7      	b.n	800878a <__swsetup_r+0xba>
 800879a:	bf00      	nop
 800879c:	200000d0 	.word	0x200000d0
 80087a0:	0800a5b4 	.word	0x0800a5b4
 80087a4:	0800a5d4 	.word	0x0800a5d4
 80087a8:	0800a594 	.word	0x0800a594

080087ac <_close_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d06      	ldr	r5, [pc, #24]	; (80087c8 <_close_r+0x1c>)
 80087b0:	2300      	movs	r3, #0
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	f7fb f86e 	bl	8003898 <_close>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_close_r+0x1a>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_close_r+0x1a>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	20003e34 	.word	0x20003e34

080087cc <_lseek_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4d07      	ldr	r5, [pc, #28]	; (80087ec <_lseek_r+0x20>)
 80087d0:	4604      	mov	r4, r0
 80087d2:	4608      	mov	r0, r1
 80087d4:	4611      	mov	r1, r2
 80087d6:	2200      	movs	r2, #0
 80087d8:	602a      	str	r2, [r5, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	f7fb f866 	bl	80038ac <_lseek>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_lseek_r+0x1e>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_lseek_r+0x1e>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	20003e34 	.word	0x20003e34

080087f0 <__swhatbuf_r>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	460e      	mov	r6, r1
 80087f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f8:	2900      	cmp	r1, #0
 80087fa:	b096      	sub	sp, #88	; 0x58
 80087fc:	4614      	mov	r4, r2
 80087fe:	461d      	mov	r5, r3
 8008800:	da07      	bge.n	8008812 <__swhatbuf_r+0x22>
 8008802:	2300      	movs	r3, #0
 8008804:	602b      	str	r3, [r5, #0]
 8008806:	89b3      	ldrh	r3, [r6, #12]
 8008808:	061a      	lsls	r2, r3, #24
 800880a:	d410      	bmi.n	800882e <__swhatbuf_r+0x3e>
 800880c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008810:	e00e      	b.n	8008830 <__swhatbuf_r+0x40>
 8008812:	466a      	mov	r2, sp
 8008814:	f001 f936 	bl	8009a84 <_fstat_r>
 8008818:	2800      	cmp	r0, #0
 800881a:	dbf2      	blt.n	8008802 <__swhatbuf_r+0x12>
 800881c:	9a01      	ldr	r2, [sp, #4]
 800881e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008822:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008826:	425a      	negs	r2, r3
 8008828:	415a      	adcs	r2, r3
 800882a:	602a      	str	r2, [r5, #0]
 800882c:	e7ee      	b.n	800880c <__swhatbuf_r+0x1c>
 800882e:	2340      	movs	r3, #64	; 0x40
 8008830:	2000      	movs	r0, #0
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	b016      	add	sp, #88	; 0x58
 8008836:	bd70      	pop	{r4, r5, r6, pc}

08008838 <__smakebuf_r>:
 8008838:	898b      	ldrh	r3, [r1, #12]
 800883a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800883c:	079d      	lsls	r5, r3, #30
 800883e:	4606      	mov	r6, r0
 8008840:	460c      	mov	r4, r1
 8008842:	d507      	bpl.n	8008854 <__smakebuf_r+0x1c>
 8008844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	6123      	str	r3, [r4, #16]
 800884c:	2301      	movs	r3, #1
 800884e:	6163      	str	r3, [r4, #20]
 8008850:	b002      	add	sp, #8
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	ab01      	add	r3, sp, #4
 8008856:	466a      	mov	r2, sp
 8008858:	f7ff ffca 	bl	80087f0 <__swhatbuf_r>
 800885c:	9900      	ldr	r1, [sp, #0]
 800885e:	4605      	mov	r5, r0
 8008860:	4630      	mov	r0, r6
 8008862:	f7ff fc49 	bl	80080f8 <_malloc_r>
 8008866:	b948      	cbnz	r0, 800887c <__smakebuf_r+0x44>
 8008868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886c:	059a      	lsls	r2, r3, #22
 800886e:	d4ef      	bmi.n	8008850 <__smakebuf_r+0x18>
 8008870:	f023 0303 	bic.w	r3, r3, #3
 8008874:	f043 0302 	orr.w	r3, r3, #2
 8008878:	81a3      	strh	r3, [r4, #12]
 800887a:	e7e3      	b.n	8008844 <__smakebuf_r+0xc>
 800887c:	4b0d      	ldr	r3, [pc, #52]	; (80088b4 <__smakebuf_r+0x7c>)
 800887e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	6020      	str	r0, [r4, #0]
 8008884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008888:	81a3      	strh	r3, [r4, #12]
 800888a:	9b00      	ldr	r3, [sp, #0]
 800888c:	6163      	str	r3, [r4, #20]
 800888e:	9b01      	ldr	r3, [sp, #4]
 8008890:	6120      	str	r0, [r4, #16]
 8008892:	b15b      	cbz	r3, 80088ac <__smakebuf_r+0x74>
 8008894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008898:	4630      	mov	r0, r6
 800889a:	f001 f905 	bl	8009aa8 <_isatty_r>
 800889e:	b128      	cbz	r0, 80088ac <__smakebuf_r+0x74>
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	f023 0303 	bic.w	r3, r3, #3
 80088a6:	f043 0301 	orr.w	r3, r3, #1
 80088aa:	81a3      	strh	r3, [r4, #12]
 80088ac:	89a0      	ldrh	r0, [r4, #12]
 80088ae:	4305      	orrs	r5, r0
 80088b0:	81a5      	strh	r5, [r4, #12]
 80088b2:	e7cd      	b.n	8008850 <__smakebuf_r+0x18>
 80088b4:	08007df5 	.word	0x08007df5

080088b8 <__malloc_lock>:
 80088b8:	4801      	ldr	r0, [pc, #4]	; (80088c0 <__malloc_lock+0x8>)
 80088ba:	f7ff bb92 	b.w	8007fe2 <__retarget_lock_acquire_recursive>
 80088be:	bf00      	nop
 80088c0:	20003e2d 	.word	0x20003e2d

080088c4 <__malloc_unlock>:
 80088c4:	4801      	ldr	r0, [pc, #4]	; (80088cc <__malloc_unlock+0x8>)
 80088c6:	f7ff bb8d 	b.w	8007fe4 <__retarget_lock_release_recursive>
 80088ca:	bf00      	nop
 80088cc:	20003e2d 	.word	0x20003e2d

080088d0 <_realloc_r>:
 80088d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d2:	4607      	mov	r7, r0
 80088d4:	4614      	mov	r4, r2
 80088d6:	460e      	mov	r6, r1
 80088d8:	b921      	cbnz	r1, 80088e4 <_realloc_r+0x14>
 80088da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088de:	4611      	mov	r1, r2
 80088e0:	f7ff bc0a 	b.w	80080f8 <_malloc_r>
 80088e4:	b922      	cbnz	r2, 80088f0 <_realloc_r+0x20>
 80088e6:	f7ff fbb7 	bl	8008058 <_free_r>
 80088ea:	4625      	mov	r5, r4
 80088ec:	4628      	mov	r0, r5
 80088ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f0:	f001 f8ea 	bl	8009ac8 <_malloc_usable_size_r>
 80088f4:	42a0      	cmp	r0, r4
 80088f6:	d20f      	bcs.n	8008918 <_realloc_r+0x48>
 80088f8:	4621      	mov	r1, r4
 80088fa:	4638      	mov	r0, r7
 80088fc:	f7ff fbfc 	bl	80080f8 <_malloc_r>
 8008900:	4605      	mov	r5, r0
 8008902:	2800      	cmp	r0, #0
 8008904:	d0f2      	beq.n	80088ec <_realloc_r+0x1c>
 8008906:	4631      	mov	r1, r6
 8008908:	4622      	mov	r2, r4
 800890a:	f7ff fb75 	bl	8007ff8 <memcpy>
 800890e:	4631      	mov	r1, r6
 8008910:	4638      	mov	r0, r7
 8008912:	f7ff fba1 	bl	8008058 <_free_r>
 8008916:	e7e9      	b.n	80088ec <_realloc_r+0x1c>
 8008918:	4635      	mov	r5, r6
 800891a:	e7e7      	b.n	80088ec <_realloc_r+0x1c>

0800891c <__ssputs_r>:
 800891c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	688e      	ldr	r6, [r1, #8]
 8008922:	429e      	cmp	r6, r3
 8008924:	4682      	mov	sl, r0
 8008926:	460c      	mov	r4, r1
 8008928:	4690      	mov	r8, r2
 800892a:	461f      	mov	r7, r3
 800892c:	d838      	bhi.n	80089a0 <__ssputs_r+0x84>
 800892e:	898a      	ldrh	r2, [r1, #12]
 8008930:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008934:	d032      	beq.n	800899c <__ssputs_r+0x80>
 8008936:	6825      	ldr	r5, [r4, #0]
 8008938:	6909      	ldr	r1, [r1, #16]
 800893a:	eba5 0901 	sub.w	r9, r5, r1
 800893e:	6965      	ldr	r5, [r4, #20]
 8008940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008948:	3301      	adds	r3, #1
 800894a:	444b      	add	r3, r9
 800894c:	106d      	asrs	r5, r5, #1
 800894e:	429d      	cmp	r5, r3
 8008950:	bf38      	it	cc
 8008952:	461d      	movcc	r5, r3
 8008954:	0553      	lsls	r3, r2, #21
 8008956:	d531      	bpl.n	80089bc <__ssputs_r+0xa0>
 8008958:	4629      	mov	r1, r5
 800895a:	f7ff fbcd 	bl	80080f8 <_malloc_r>
 800895e:	4606      	mov	r6, r0
 8008960:	b950      	cbnz	r0, 8008978 <__ssputs_r+0x5c>
 8008962:	230c      	movs	r3, #12
 8008964:	f8ca 3000 	str.w	r3, [sl]
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800896e:	81a3      	strh	r3, [r4, #12]
 8008970:	f04f 30ff 	mov.w	r0, #4294967295
 8008974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008978:	6921      	ldr	r1, [r4, #16]
 800897a:	464a      	mov	r2, r9
 800897c:	f7ff fb3c 	bl	8007ff8 <memcpy>
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898a:	81a3      	strh	r3, [r4, #12]
 800898c:	6126      	str	r6, [r4, #16]
 800898e:	6165      	str	r5, [r4, #20]
 8008990:	444e      	add	r6, r9
 8008992:	eba5 0509 	sub.w	r5, r5, r9
 8008996:	6026      	str	r6, [r4, #0]
 8008998:	60a5      	str	r5, [r4, #8]
 800899a:	463e      	mov	r6, r7
 800899c:	42be      	cmp	r6, r7
 800899e:	d900      	bls.n	80089a2 <__ssputs_r+0x86>
 80089a0:	463e      	mov	r6, r7
 80089a2:	4632      	mov	r2, r6
 80089a4:	6820      	ldr	r0, [r4, #0]
 80089a6:	4641      	mov	r1, r8
 80089a8:	f7ff fb34 	bl	8008014 <memmove>
 80089ac:	68a3      	ldr	r3, [r4, #8]
 80089ae:	6822      	ldr	r2, [r4, #0]
 80089b0:	1b9b      	subs	r3, r3, r6
 80089b2:	4432      	add	r2, r6
 80089b4:	60a3      	str	r3, [r4, #8]
 80089b6:	6022      	str	r2, [r4, #0]
 80089b8:	2000      	movs	r0, #0
 80089ba:	e7db      	b.n	8008974 <__ssputs_r+0x58>
 80089bc:	462a      	mov	r2, r5
 80089be:	f7ff ff87 	bl	80088d0 <_realloc_r>
 80089c2:	4606      	mov	r6, r0
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d1e1      	bne.n	800898c <__ssputs_r+0x70>
 80089c8:	6921      	ldr	r1, [r4, #16]
 80089ca:	4650      	mov	r0, sl
 80089cc:	f7ff fb44 	bl	8008058 <_free_r>
 80089d0:	e7c7      	b.n	8008962 <__ssputs_r+0x46>
	...

080089d4 <_svfiprintf_r>:
 80089d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	4698      	mov	r8, r3
 80089da:	898b      	ldrh	r3, [r1, #12]
 80089dc:	061b      	lsls	r3, r3, #24
 80089de:	b09d      	sub	sp, #116	; 0x74
 80089e0:	4607      	mov	r7, r0
 80089e2:	460d      	mov	r5, r1
 80089e4:	4614      	mov	r4, r2
 80089e6:	d50e      	bpl.n	8008a06 <_svfiprintf_r+0x32>
 80089e8:	690b      	ldr	r3, [r1, #16]
 80089ea:	b963      	cbnz	r3, 8008a06 <_svfiprintf_r+0x32>
 80089ec:	2140      	movs	r1, #64	; 0x40
 80089ee:	f7ff fb83 	bl	80080f8 <_malloc_r>
 80089f2:	6028      	str	r0, [r5, #0]
 80089f4:	6128      	str	r0, [r5, #16]
 80089f6:	b920      	cbnz	r0, 8008a02 <_svfiprintf_r+0x2e>
 80089f8:	230c      	movs	r3, #12
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008a00:	e0d1      	b.n	8008ba6 <_svfiprintf_r+0x1d2>
 8008a02:	2340      	movs	r3, #64	; 0x40
 8008a04:	616b      	str	r3, [r5, #20]
 8008a06:	2300      	movs	r3, #0
 8008a08:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0a:	2320      	movs	r3, #32
 8008a0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a14:	2330      	movs	r3, #48	; 0x30
 8008a16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008bc0 <_svfiprintf_r+0x1ec>
 8008a1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a1e:	f04f 0901 	mov.w	r9, #1
 8008a22:	4623      	mov	r3, r4
 8008a24:	469a      	mov	sl, r3
 8008a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a2a:	b10a      	cbz	r2, 8008a30 <_svfiprintf_r+0x5c>
 8008a2c:	2a25      	cmp	r2, #37	; 0x25
 8008a2e:	d1f9      	bne.n	8008a24 <_svfiprintf_r+0x50>
 8008a30:	ebba 0b04 	subs.w	fp, sl, r4
 8008a34:	d00b      	beq.n	8008a4e <_svfiprintf_r+0x7a>
 8008a36:	465b      	mov	r3, fp
 8008a38:	4622      	mov	r2, r4
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff ff6d 	bl	800891c <__ssputs_r>
 8008a42:	3001      	adds	r0, #1
 8008a44:	f000 80aa 	beq.w	8008b9c <_svfiprintf_r+0x1c8>
 8008a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a4a:	445a      	add	r2, fp
 8008a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 80a2 	beq.w	8008b9c <_svfiprintf_r+0x1c8>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a62:	f10a 0a01 	add.w	sl, sl, #1
 8008a66:	9304      	str	r3, [sp, #16]
 8008a68:	9307      	str	r3, [sp, #28]
 8008a6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a6e:	931a      	str	r3, [sp, #104]	; 0x68
 8008a70:	4654      	mov	r4, sl
 8008a72:	2205      	movs	r2, #5
 8008a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a78:	4851      	ldr	r0, [pc, #324]	; (8008bc0 <_svfiprintf_r+0x1ec>)
 8008a7a:	f7f7 fbe1 	bl	8000240 <memchr>
 8008a7e:	9a04      	ldr	r2, [sp, #16]
 8008a80:	b9d8      	cbnz	r0, 8008aba <_svfiprintf_r+0xe6>
 8008a82:	06d0      	lsls	r0, r2, #27
 8008a84:	bf44      	itt	mi
 8008a86:	2320      	movmi	r3, #32
 8008a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a8c:	0711      	lsls	r1, r2, #28
 8008a8e:	bf44      	itt	mi
 8008a90:	232b      	movmi	r3, #43	; 0x2b
 8008a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a96:	f89a 3000 	ldrb.w	r3, [sl]
 8008a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a9c:	d015      	beq.n	8008aca <_svfiprintf_r+0xf6>
 8008a9e:	9a07      	ldr	r2, [sp, #28]
 8008aa0:	4654      	mov	r4, sl
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	f04f 0c0a 	mov.w	ip, #10
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aae:	3b30      	subs	r3, #48	; 0x30
 8008ab0:	2b09      	cmp	r3, #9
 8008ab2:	d94e      	bls.n	8008b52 <_svfiprintf_r+0x17e>
 8008ab4:	b1b0      	cbz	r0, 8008ae4 <_svfiprintf_r+0x110>
 8008ab6:	9207      	str	r2, [sp, #28]
 8008ab8:	e014      	b.n	8008ae4 <_svfiprintf_r+0x110>
 8008aba:	eba0 0308 	sub.w	r3, r0, r8
 8008abe:	fa09 f303 	lsl.w	r3, r9, r3
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	9304      	str	r3, [sp, #16]
 8008ac6:	46a2      	mov	sl, r4
 8008ac8:	e7d2      	b.n	8008a70 <_svfiprintf_r+0x9c>
 8008aca:	9b03      	ldr	r3, [sp, #12]
 8008acc:	1d19      	adds	r1, r3, #4
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	9103      	str	r1, [sp, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	bfbb      	ittet	lt
 8008ad6:	425b      	neglt	r3, r3
 8008ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8008adc:	9307      	strge	r3, [sp, #28]
 8008ade:	9307      	strlt	r3, [sp, #28]
 8008ae0:	bfb8      	it	lt
 8008ae2:	9204      	strlt	r2, [sp, #16]
 8008ae4:	7823      	ldrb	r3, [r4, #0]
 8008ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ae8:	d10c      	bne.n	8008b04 <_svfiprintf_r+0x130>
 8008aea:	7863      	ldrb	r3, [r4, #1]
 8008aec:	2b2a      	cmp	r3, #42	; 0x2a
 8008aee:	d135      	bne.n	8008b5c <_svfiprintf_r+0x188>
 8008af0:	9b03      	ldr	r3, [sp, #12]
 8008af2:	1d1a      	adds	r2, r3, #4
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	9203      	str	r2, [sp, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	bfb8      	it	lt
 8008afc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b00:	3402      	adds	r4, #2
 8008b02:	9305      	str	r3, [sp, #20]
 8008b04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008bd0 <_svfiprintf_r+0x1fc>
 8008b08:	7821      	ldrb	r1, [r4, #0]
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	4650      	mov	r0, sl
 8008b0e:	f7f7 fb97 	bl	8000240 <memchr>
 8008b12:	b140      	cbz	r0, 8008b26 <_svfiprintf_r+0x152>
 8008b14:	2340      	movs	r3, #64	; 0x40
 8008b16:	eba0 000a 	sub.w	r0, r0, sl
 8008b1a:	fa03 f000 	lsl.w	r0, r3, r0
 8008b1e:	9b04      	ldr	r3, [sp, #16]
 8008b20:	4303      	orrs	r3, r0
 8008b22:	3401      	adds	r4, #1
 8008b24:	9304      	str	r3, [sp, #16]
 8008b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b2a:	4826      	ldr	r0, [pc, #152]	; (8008bc4 <_svfiprintf_r+0x1f0>)
 8008b2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b30:	2206      	movs	r2, #6
 8008b32:	f7f7 fb85 	bl	8000240 <memchr>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d038      	beq.n	8008bac <_svfiprintf_r+0x1d8>
 8008b3a:	4b23      	ldr	r3, [pc, #140]	; (8008bc8 <_svfiprintf_r+0x1f4>)
 8008b3c:	bb1b      	cbnz	r3, 8008b86 <_svfiprintf_r+0x1b2>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	3307      	adds	r3, #7
 8008b42:	f023 0307 	bic.w	r3, r3, #7
 8008b46:	3308      	adds	r3, #8
 8008b48:	9303      	str	r3, [sp, #12]
 8008b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b4c:	4433      	add	r3, r6
 8008b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b50:	e767      	b.n	8008a22 <_svfiprintf_r+0x4e>
 8008b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b56:	460c      	mov	r4, r1
 8008b58:	2001      	movs	r0, #1
 8008b5a:	e7a5      	b.n	8008aa8 <_svfiprintf_r+0xd4>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	3401      	adds	r4, #1
 8008b60:	9305      	str	r3, [sp, #20]
 8008b62:	4619      	mov	r1, r3
 8008b64:	f04f 0c0a 	mov.w	ip, #10
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b6e:	3a30      	subs	r2, #48	; 0x30
 8008b70:	2a09      	cmp	r2, #9
 8008b72:	d903      	bls.n	8008b7c <_svfiprintf_r+0x1a8>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0c5      	beq.n	8008b04 <_svfiprintf_r+0x130>
 8008b78:	9105      	str	r1, [sp, #20]
 8008b7a:	e7c3      	b.n	8008b04 <_svfiprintf_r+0x130>
 8008b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b80:	4604      	mov	r4, r0
 8008b82:	2301      	movs	r3, #1
 8008b84:	e7f0      	b.n	8008b68 <_svfiprintf_r+0x194>
 8008b86:	ab03      	add	r3, sp, #12
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	462a      	mov	r2, r5
 8008b8c:	4b0f      	ldr	r3, [pc, #60]	; (8008bcc <_svfiprintf_r+0x1f8>)
 8008b8e:	a904      	add	r1, sp, #16
 8008b90:	4638      	mov	r0, r7
 8008b92:	f3af 8000 	nop.w
 8008b96:	1c42      	adds	r2, r0, #1
 8008b98:	4606      	mov	r6, r0
 8008b9a:	d1d6      	bne.n	8008b4a <_svfiprintf_r+0x176>
 8008b9c:	89ab      	ldrh	r3, [r5, #12]
 8008b9e:	065b      	lsls	r3, r3, #25
 8008ba0:	f53f af2c 	bmi.w	80089fc <_svfiprintf_r+0x28>
 8008ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ba6:	b01d      	add	sp, #116	; 0x74
 8008ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bac:	ab03      	add	r3, sp, #12
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	462a      	mov	r2, r5
 8008bb2:	4b06      	ldr	r3, [pc, #24]	; (8008bcc <_svfiprintf_r+0x1f8>)
 8008bb4:	a904      	add	r1, sp, #16
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	f000 fba6 	bl	8009308 <_printf_i>
 8008bbc:	e7eb      	b.n	8008b96 <_svfiprintf_r+0x1c2>
 8008bbe:	bf00      	nop
 8008bc0:	0800a5f8 	.word	0x0800a5f8
 8008bc4:	0800a602 	.word	0x0800a602
 8008bc8:	00000000 	.word	0x00000000
 8008bcc:	0800891d 	.word	0x0800891d
 8008bd0:	0800a5fe 	.word	0x0800a5fe

08008bd4 <_sungetc_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	1c4b      	adds	r3, r1, #1
 8008bd8:	4614      	mov	r4, r2
 8008bda:	d103      	bne.n	8008be4 <_sungetc_r+0x10>
 8008bdc:	f04f 35ff 	mov.w	r5, #4294967295
 8008be0:	4628      	mov	r0, r5
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	8993      	ldrh	r3, [r2, #12]
 8008be6:	f023 0320 	bic.w	r3, r3, #32
 8008bea:	8193      	strh	r3, [r2, #12]
 8008bec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bee:	6852      	ldr	r2, [r2, #4]
 8008bf0:	b2cd      	uxtb	r5, r1
 8008bf2:	b18b      	cbz	r3, 8008c18 <_sungetc_r+0x44>
 8008bf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	dd08      	ble.n	8008c0c <_sungetc_r+0x38>
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	1e5a      	subs	r2, r3, #1
 8008bfe:	6022      	str	r2, [r4, #0]
 8008c00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008c04:	6863      	ldr	r3, [r4, #4]
 8008c06:	3301      	adds	r3, #1
 8008c08:	6063      	str	r3, [r4, #4]
 8008c0a:	e7e9      	b.n	8008be0 <_sungetc_r+0xc>
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	f000 feff 	bl	8009a10 <__submore>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d0f1      	beq.n	8008bfa <_sungetc_r+0x26>
 8008c16:	e7e1      	b.n	8008bdc <_sungetc_r+0x8>
 8008c18:	6921      	ldr	r1, [r4, #16]
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	b151      	cbz	r1, 8008c34 <_sungetc_r+0x60>
 8008c1e:	4299      	cmp	r1, r3
 8008c20:	d208      	bcs.n	8008c34 <_sungetc_r+0x60>
 8008c22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008c26:	42a9      	cmp	r1, r5
 8008c28:	d104      	bne.n	8008c34 <_sungetc_r+0x60>
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	3201      	adds	r2, #1
 8008c2e:	6023      	str	r3, [r4, #0]
 8008c30:	6062      	str	r2, [r4, #4]
 8008c32:	e7d5      	b.n	8008be0 <_sungetc_r+0xc>
 8008c34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c3e:	2303      	movs	r3, #3
 8008c40:	63a3      	str	r3, [r4, #56]	; 0x38
 8008c42:	4623      	mov	r3, r4
 8008c44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e7dc      	b.n	8008c08 <_sungetc_r+0x34>

08008c4e <__ssrefill_r>:
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	460c      	mov	r4, r1
 8008c52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008c54:	b169      	cbz	r1, 8008c72 <__ssrefill_r+0x24>
 8008c56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c5a:	4299      	cmp	r1, r3
 8008c5c:	d001      	beq.n	8008c62 <__ssrefill_r+0x14>
 8008c5e:	f7ff f9fb 	bl	8008058 <_free_r>
 8008c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c64:	6063      	str	r3, [r4, #4]
 8008c66:	2000      	movs	r0, #0
 8008c68:	6360      	str	r0, [r4, #52]	; 0x34
 8008c6a:	b113      	cbz	r3, 8008c72 <__ssrefill_r+0x24>
 8008c6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	bd10      	pop	{r4, pc}
 8008c72:	6923      	ldr	r3, [r4, #16]
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	2300      	movs	r3, #0
 8008c78:	6063      	str	r3, [r4, #4]
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	f043 0320 	orr.w	r3, r3, #32
 8008c80:	81a3      	strh	r3, [r4, #12]
 8008c82:	f04f 30ff 	mov.w	r0, #4294967295
 8008c86:	e7f3      	b.n	8008c70 <__ssrefill_r+0x22>

08008c88 <__ssvfiscanf_r>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008c92:	2100      	movs	r1, #0
 8008c94:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008c98:	49b2      	ldr	r1, [pc, #712]	; (8008f64 <__ssvfiscanf_r+0x2dc>)
 8008c9a:	91a0      	str	r1, [sp, #640]	; 0x280
 8008c9c:	f10d 0804 	add.w	r8, sp, #4
 8008ca0:	49b1      	ldr	r1, [pc, #708]	; (8008f68 <__ssvfiscanf_r+0x2e0>)
 8008ca2:	4fb2      	ldr	r7, [pc, #712]	; (8008f6c <__ssvfiscanf_r+0x2e4>)
 8008ca4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8008f70 <__ssvfiscanf_r+0x2e8>
 8008ca8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008cac:	4606      	mov	r6, r0
 8008cae:	91a1      	str	r1, [sp, #644]	; 0x284
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	f892 a000 	ldrb.w	sl, [r2]
 8008cb6:	f1ba 0f00 	cmp.w	sl, #0
 8008cba:	f000 8151 	beq.w	8008f60 <__ssvfiscanf_r+0x2d8>
 8008cbe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8008cc2:	f013 0308 	ands.w	r3, r3, #8
 8008cc6:	f102 0501 	add.w	r5, r2, #1
 8008cca:	d019      	beq.n	8008d00 <__ssvfiscanf_r+0x78>
 8008ccc:	6863      	ldr	r3, [r4, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	dd0f      	ble.n	8008cf2 <__ssvfiscanf_r+0x6a>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	781a      	ldrb	r2, [r3, #0]
 8008cd6:	5cba      	ldrb	r2, [r7, r2]
 8008cd8:	0712      	lsls	r2, r2, #28
 8008cda:	d401      	bmi.n	8008ce0 <__ssvfiscanf_r+0x58>
 8008cdc:	462a      	mov	r2, r5
 8008cde:	e7e8      	b.n	8008cb2 <__ssvfiscanf_r+0x2a>
 8008ce0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ce2:	3201      	adds	r2, #1
 8008ce4:	9245      	str	r2, [sp, #276]	; 0x114
 8008ce6:	6862      	ldr	r2, [r4, #4]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	3a01      	subs	r2, #1
 8008cec:	6062      	str	r2, [r4, #4]
 8008cee:	6023      	str	r3, [r4, #0]
 8008cf0:	e7ec      	b.n	8008ccc <__ssvfiscanf_r+0x44>
 8008cf2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	4798      	blx	r3
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d0e9      	beq.n	8008cd2 <__ssvfiscanf_r+0x4a>
 8008cfe:	e7ed      	b.n	8008cdc <__ssvfiscanf_r+0x54>
 8008d00:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8008d04:	f040 8083 	bne.w	8008e0e <__ssvfiscanf_r+0x186>
 8008d08:	9341      	str	r3, [sp, #260]	; 0x104
 8008d0a:	9343      	str	r3, [sp, #268]	; 0x10c
 8008d0c:	7853      	ldrb	r3, [r2, #1]
 8008d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d10:	bf02      	ittt	eq
 8008d12:	2310      	moveq	r3, #16
 8008d14:	1c95      	addeq	r5, r2, #2
 8008d16:	9341      	streq	r3, [sp, #260]	; 0x104
 8008d18:	220a      	movs	r2, #10
 8008d1a:	46ab      	mov	fp, r5
 8008d1c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8008d20:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008d24:	2b09      	cmp	r3, #9
 8008d26:	d91d      	bls.n	8008d64 <__ssvfiscanf_r+0xdc>
 8008d28:	4891      	ldr	r0, [pc, #580]	; (8008f70 <__ssvfiscanf_r+0x2e8>)
 8008d2a:	2203      	movs	r2, #3
 8008d2c:	f7f7 fa88 	bl	8000240 <memchr>
 8008d30:	b140      	cbz	r0, 8008d44 <__ssvfiscanf_r+0xbc>
 8008d32:	2301      	movs	r3, #1
 8008d34:	eba0 0009 	sub.w	r0, r0, r9
 8008d38:	fa03 f000 	lsl.w	r0, r3, r0
 8008d3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008d3e:	4318      	orrs	r0, r3
 8008d40:	9041      	str	r0, [sp, #260]	; 0x104
 8008d42:	465d      	mov	r5, fp
 8008d44:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008d48:	2b78      	cmp	r3, #120	; 0x78
 8008d4a:	d806      	bhi.n	8008d5a <__ssvfiscanf_r+0xd2>
 8008d4c:	2b57      	cmp	r3, #87	; 0x57
 8008d4e:	d810      	bhi.n	8008d72 <__ssvfiscanf_r+0xea>
 8008d50:	2b25      	cmp	r3, #37	; 0x25
 8008d52:	d05c      	beq.n	8008e0e <__ssvfiscanf_r+0x186>
 8008d54:	d856      	bhi.n	8008e04 <__ssvfiscanf_r+0x17c>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d074      	beq.n	8008e44 <__ssvfiscanf_r+0x1bc>
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	9347      	str	r3, [sp, #284]	; 0x11c
 8008d5e:	230a      	movs	r3, #10
 8008d60:	9342      	str	r3, [sp, #264]	; 0x108
 8008d62:	e081      	b.n	8008e68 <__ssvfiscanf_r+0x1e0>
 8008d64:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008d66:	fb02 1303 	mla	r3, r2, r3, r1
 8008d6a:	3b30      	subs	r3, #48	; 0x30
 8008d6c:	9343      	str	r3, [sp, #268]	; 0x10c
 8008d6e:	465d      	mov	r5, fp
 8008d70:	e7d3      	b.n	8008d1a <__ssvfiscanf_r+0x92>
 8008d72:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008d76:	2a20      	cmp	r2, #32
 8008d78:	d8ef      	bhi.n	8008d5a <__ssvfiscanf_r+0xd2>
 8008d7a:	a101      	add	r1, pc, #4	; (adr r1, 8008d80 <__ssvfiscanf_r+0xf8>)
 8008d7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d80:	08008e53 	.word	0x08008e53
 8008d84:	08008d5b 	.word	0x08008d5b
 8008d88:	08008d5b 	.word	0x08008d5b
 8008d8c:	08008eb1 	.word	0x08008eb1
 8008d90:	08008d5b 	.word	0x08008d5b
 8008d94:	08008d5b 	.word	0x08008d5b
 8008d98:	08008d5b 	.word	0x08008d5b
 8008d9c:	08008d5b 	.word	0x08008d5b
 8008da0:	08008d5b 	.word	0x08008d5b
 8008da4:	08008d5b 	.word	0x08008d5b
 8008da8:	08008d5b 	.word	0x08008d5b
 8008dac:	08008ec7 	.word	0x08008ec7
 8008db0:	08008e9d 	.word	0x08008e9d
 8008db4:	08008e0b 	.word	0x08008e0b
 8008db8:	08008e0b 	.word	0x08008e0b
 8008dbc:	08008e0b 	.word	0x08008e0b
 8008dc0:	08008d5b 	.word	0x08008d5b
 8008dc4:	08008ea1 	.word	0x08008ea1
 8008dc8:	08008d5b 	.word	0x08008d5b
 8008dcc:	08008d5b 	.word	0x08008d5b
 8008dd0:	08008d5b 	.word	0x08008d5b
 8008dd4:	08008d5b 	.word	0x08008d5b
 8008dd8:	08008ed7 	.word	0x08008ed7
 8008ddc:	08008ea9 	.word	0x08008ea9
 8008de0:	08008e4b 	.word	0x08008e4b
 8008de4:	08008d5b 	.word	0x08008d5b
 8008de8:	08008d5b 	.word	0x08008d5b
 8008dec:	08008ed3 	.word	0x08008ed3
 8008df0:	08008d5b 	.word	0x08008d5b
 8008df4:	08008e9d 	.word	0x08008e9d
 8008df8:	08008d5b 	.word	0x08008d5b
 8008dfc:	08008d5b 	.word	0x08008d5b
 8008e00:	08008e53 	.word	0x08008e53
 8008e04:	3b45      	subs	r3, #69	; 0x45
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d8a7      	bhi.n	8008d5a <__ssvfiscanf_r+0xd2>
 8008e0a:	2305      	movs	r3, #5
 8008e0c:	e02b      	b.n	8008e66 <__ssvfiscanf_r+0x1de>
 8008e0e:	6863      	ldr	r3, [r4, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	dd0d      	ble.n	8008e30 <__ssvfiscanf_r+0x1a8>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	781a      	ldrb	r2, [r3, #0]
 8008e18:	4552      	cmp	r2, sl
 8008e1a:	f040 80a1 	bne.w	8008f60 <__ssvfiscanf_r+0x2d8>
 8008e1e:	3301      	adds	r3, #1
 8008e20:	6862      	ldr	r2, [r4, #4]
 8008e22:	6023      	str	r3, [r4, #0]
 8008e24:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008e26:	3a01      	subs	r2, #1
 8008e28:	3301      	adds	r3, #1
 8008e2a:	6062      	str	r2, [r4, #4]
 8008e2c:	9345      	str	r3, [sp, #276]	; 0x114
 8008e2e:	e755      	b.n	8008cdc <__ssvfiscanf_r+0x54>
 8008e30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008e32:	4621      	mov	r1, r4
 8008e34:	4630      	mov	r0, r6
 8008e36:	4798      	blx	r3
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d0eb      	beq.n	8008e14 <__ssvfiscanf_r+0x18c>
 8008e3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	f040 8084 	bne.w	8008f4c <__ssvfiscanf_r+0x2c4>
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295
 8008e48:	e086      	b.n	8008f58 <__ssvfiscanf_r+0x2d0>
 8008e4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008e4c:	f042 0220 	orr.w	r2, r2, #32
 8008e50:	9241      	str	r2, [sp, #260]	; 0x104
 8008e52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e58:	9241      	str	r2, [sp, #260]	; 0x104
 8008e5a:	2210      	movs	r2, #16
 8008e5c:	2b6f      	cmp	r3, #111	; 0x6f
 8008e5e:	9242      	str	r2, [sp, #264]	; 0x108
 8008e60:	bf34      	ite	cc
 8008e62:	2303      	movcc	r3, #3
 8008e64:	2304      	movcs	r3, #4
 8008e66:	9347      	str	r3, [sp, #284]	; 0x11c
 8008e68:	6863      	ldr	r3, [r4, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	dd41      	ble.n	8008ef2 <__ssvfiscanf_r+0x26a>
 8008e6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008e70:	0659      	lsls	r1, r3, #25
 8008e72:	d404      	bmi.n	8008e7e <__ssvfiscanf_r+0x1f6>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	5cba      	ldrb	r2, [r7, r2]
 8008e7a:	0712      	lsls	r2, r2, #28
 8008e7c:	d440      	bmi.n	8008f00 <__ssvfiscanf_r+0x278>
 8008e7e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	dc4f      	bgt.n	8008f24 <__ssvfiscanf_r+0x29c>
 8008e84:	466b      	mov	r3, sp
 8008e86:	4622      	mov	r2, r4
 8008e88:	a941      	add	r1, sp, #260	; 0x104
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f000 fb62 	bl	8009554 <_scanf_chars>
 8008e90:	2801      	cmp	r0, #1
 8008e92:	d065      	beq.n	8008f60 <__ssvfiscanf_r+0x2d8>
 8008e94:	2802      	cmp	r0, #2
 8008e96:	f47f af21 	bne.w	8008cdc <__ssvfiscanf_r+0x54>
 8008e9a:	e7cf      	b.n	8008e3c <__ssvfiscanf_r+0x1b4>
 8008e9c:	220a      	movs	r2, #10
 8008e9e:	e7dd      	b.n	8008e5c <__ssvfiscanf_r+0x1d4>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	9342      	str	r3, [sp, #264]	; 0x108
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e7de      	b.n	8008e66 <__ssvfiscanf_r+0x1de>
 8008ea8:	2308      	movs	r3, #8
 8008eaa:	9342      	str	r3, [sp, #264]	; 0x108
 8008eac:	2304      	movs	r3, #4
 8008eae:	e7da      	b.n	8008e66 <__ssvfiscanf_r+0x1de>
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	f000 fcf4 	bl	80098a0 <__sccl>
 8008eb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ebe:	9341      	str	r3, [sp, #260]	; 0x104
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e7cf      	b.n	8008e66 <__ssvfiscanf_r+0x1de>
 8008ec6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ecc:	9341      	str	r3, [sp, #260]	; 0x104
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e7c9      	b.n	8008e66 <__ssvfiscanf_r+0x1de>
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e7c7      	b.n	8008e66 <__ssvfiscanf_r+0x1de>
 8008ed6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008ed8:	06c3      	lsls	r3, r0, #27
 8008eda:	f53f aeff 	bmi.w	8008cdc <__ssvfiscanf_r+0x54>
 8008ede:	9b00      	ldr	r3, [sp, #0]
 8008ee0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ee2:	1d19      	adds	r1, r3, #4
 8008ee4:	9100      	str	r1, [sp, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	07c0      	lsls	r0, r0, #31
 8008eea:	bf4c      	ite	mi
 8008eec:	801a      	strhmi	r2, [r3, #0]
 8008eee:	601a      	strpl	r2, [r3, #0]
 8008ef0:	e6f4      	b.n	8008cdc <__ssvfiscanf_r+0x54>
 8008ef2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	4798      	blx	r3
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d0b7      	beq.n	8008e6e <__ssvfiscanf_r+0x1e6>
 8008efe:	e79d      	b.n	8008e3c <__ssvfiscanf_r+0x1b4>
 8008f00:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008f02:	3201      	adds	r2, #1
 8008f04:	9245      	str	r2, [sp, #276]	; 0x114
 8008f06:	6862      	ldr	r2, [r4, #4]
 8008f08:	3a01      	subs	r2, #1
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	6062      	str	r2, [r4, #4]
 8008f0e:	dd02      	ble.n	8008f16 <__ssvfiscanf_r+0x28e>
 8008f10:	3301      	adds	r3, #1
 8008f12:	6023      	str	r3, [r4, #0]
 8008f14:	e7ae      	b.n	8008e74 <__ssvfiscanf_r+0x1ec>
 8008f16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008f18:	4621      	mov	r1, r4
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	4798      	blx	r3
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d0a8      	beq.n	8008e74 <__ssvfiscanf_r+0x1ec>
 8008f22:	e78b      	b.n	8008e3c <__ssvfiscanf_r+0x1b4>
 8008f24:	2b04      	cmp	r3, #4
 8008f26:	dc06      	bgt.n	8008f36 <__ssvfiscanf_r+0x2ae>
 8008f28:	466b      	mov	r3, sp
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	a941      	add	r1, sp, #260	; 0x104
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f000 fb68 	bl	8009604 <_scanf_i>
 8008f34:	e7ac      	b.n	8008e90 <__ssvfiscanf_r+0x208>
 8008f36:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <__ssvfiscanf_r+0x2ec>)
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f43f aecf 	beq.w	8008cdc <__ssvfiscanf_r+0x54>
 8008f3e:	466b      	mov	r3, sp
 8008f40:	4622      	mov	r2, r4
 8008f42:	a941      	add	r1, sp, #260	; 0x104
 8008f44:	4630      	mov	r0, r6
 8008f46:	f3af 8000 	nop.w
 8008f4a:	e7a1      	b.n	8008e90 <__ssvfiscanf_r+0x208>
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008f52:	bf18      	it	ne
 8008f54:	f04f 30ff 	movne.w	r0, #4294967295
 8008f58:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f60:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008f62:	e7f9      	b.n	8008f58 <__ssvfiscanf_r+0x2d0>
 8008f64:	08008bd5 	.word	0x08008bd5
 8008f68:	08008c4f 	.word	0x08008c4f
 8008f6c:	0800a493 	.word	0x0800a493
 8008f70:	0800a5fe 	.word	0x0800a5fe
 8008f74:	00000000 	.word	0x00000000

08008f78 <__sfputc_r>:
 8008f78:	6893      	ldr	r3, [r2, #8]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	b410      	push	{r4}
 8008f80:	6093      	str	r3, [r2, #8]
 8008f82:	da08      	bge.n	8008f96 <__sfputc_r+0x1e>
 8008f84:	6994      	ldr	r4, [r2, #24]
 8008f86:	42a3      	cmp	r3, r4
 8008f88:	db01      	blt.n	8008f8e <__sfputc_r+0x16>
 8008f8a:	290a      	cmp	r1, #10
 8008f8c:	d103      	bne.n	8008f96 <__sfputc_r+0x1e>
 8008f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f92:	f7ff bb39 	b.w	8008608 <__swbuf_r>
 8008f96:	6813      	ldr	r3, [r2, #0]
 8008f98:	1c58      	adds	r0, r3, #1
 8008f9a:	6010      	str	r0, [r2, #0]
 8008f9c:	7019      	strb	r1, [r3, #0]
 8008f9e:	4608      	mov	r0, r1
 8008fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <__sfputs_r>:
 8008fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa8:	4606      	mov	r6, r0
 8008faa:	460f      	mov	r7, r1
 8008fac:	4614      	mov	r4, r2
 8008fae:	18d5      	adds	r5, r2, r3
 8008fb0:	42ac      	cmp	r4, r5
 8008fb2:	d101      	bne.n	8008fb8 <__sfputs_r+0x12>
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	e007      	b.n	8008fc8 <__sfputs_r+0x22>
 8008fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fbc:	463a      	mov	r2, r7
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7ff ffda 	bl	8008f78 <__sfputc_r>
 8008fc4:	1c43      	adds	r3, r0, #1
 8008fc6:	d1f3      	bne.n	8008fb0 <__sfputs_r+0xa>
 8008fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fcc <_vfiprintf_r>:
 8008fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	460d      	mov	r5, r1
 8008fd2:	b09d      	sub	sp, #116	; 0x74
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	4698      	mov	r8, r3
 8008fd8:	4606      	mov	r6, r0
 8008fda:	b118      	cbz	r0, 8008fe4 <_vfiprintf_r+0x18>
 8008fdc:	6983      	ldr	r3, [r0, #24]
 8008fde:	b90b      	cbnz	r3, 8008fe4 <_vfiprintf_r+0x18>
 8008fe0:	f7fe ff3c 	bl	8007e5c <__sinit>
 8008fe4:	4b89      	ldr	r3, [pc, #548]	; (800920c <_vfiprintf_r+0x240>)
 8008fe6:	429d      	cmp	r5, r3
 8008fe8:	d11b      	bne.n	8009022 <_vfiprintf_r+0x56>
 8008fea:	6875      	ldr	r5, [r6, #4]
 8008fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fee:	07d9      	lsls	r1, r3, #31
 8008ff0:	d405      	bmi.n	8008ffe <_vfiprintf_r+0x32>
 8008ff2:	89ab      	ldrh	r3, [r5, #12]
 8008ff4:	059a      	lsls	r2, r3, #22
 8008ff6:	d402      	bmi.n	8008ffe <_vfiprintf_r+0x32>
 8008ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ffa:	f7fe fff2 	bl	8007fe2 <__retarget_lock_acquire_recursive>
 8008ffe:	89ab      	ldrh	r3, [r5, #12]
 8009000:	071b      	lsls	r3, r3, #28
 8009002:	d501      	bpl.n	8009008 <_vfiprintf_r+0x3c>
 8009004:	692b      	ldr	r3, [r5, #16]
 8009006:	b9eb      	cbnz	r3, 8009044 <_vfiprintf_r+0x78>
 8009008:	4629      	mov	r1, r5
 800900a:	4630      	mov	r0, r6
 800900c:	f7ff fb60 	bl	80086d0 <__swsetup_r>
 8009010:	b1c0      	cbz	r0, 8009044 <_vfiprintf_r+0x78>
 8009012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009014:	07dc      	lsls	r4, r3, #31
 8009016:	d50e      	bpl.n	8009036 <_vfiprintf_r+0x6a>
 8009018:	f04f 30ff 	mov.w	r0, #4294967295
 800901c:	b01d      	add	sp, #116	; 0x74
 800901e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009022:	4b7b      	ldr	r3, [pc, #492]	; (8009210 <_vfiprintf_r+0x244>)
 8009024:	429d      	cmp	r5, r3
 8009026:	d101      	bne.n	800902c <_vfiprintf_r+0x60>
 8009028:	68b5      	ldr	r5, [r6, #8]
 800902a:	e7df      	b.n	8008fec <_vfiprintf_r+0x20>
 800902c:	4b79      	ldr	r3, [pc, #484]	; (8009214 <_vfiprintf_r+0x248>)
 800902e:	429d      	cmp	r5, r3
 8009030:	bf08      	it	eq
 8009032:	68f5      	ldreq	r5, [r6, #12]
 8009034:	e7da      	b.n	8008fec <_vfiprintf_r+0x20>
 8009036:	89ab      	ldrh	r3, [r5, #12]
 8009038:	0598      	lsls	r0, r3, #22
 800903a:	d4ed      	bmi.n	8009018 <_vfiprintf_r+0x4c>
 800903c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800903e:	f7fe ffd1 	bl	8007fe4 <__retarget_lock_release_recursive>
 8009042:	e7e9      	b.n	8009018 <_vfiprintf_r+0x4c>
 8009044:	2300      	movs	r3, #0
 8009046:	9309      	str	r3, [sp, #36]	; 0x24
 8009048:	2320      	movs	r3, #32
 800904a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800904e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009052:	2330      	movs	r3, #48	; 0x30
 8009054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009218 <_vfiprintf_r+0x24c>
 8009058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800905c:	f04f 0901 	mov.w	r9, #1
 8009060:	4623      	mov	r3, r4
 8009062:	469a      	mov	sl, r3
 8009064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009068:	b10a      	cbz	r2, 800906e <_vfiprintf_r+0xa2>
 800906a:	2a25      	cmp	r2, #37	; 0x25
 800906c:	d1f9      	bne.n	8009062 <_vfiprintf_r+0x96>
 800906e:	ebba 0b04 	subs.w	fp, sl, r4
 8009072:	d00b      	beq.n	800908c <_vfiprintf_r+0xc0>
 8009074:	465b      	mov	r3, fp
 8009076:	4622      	mov	r2, r4
 8009078:	4629      	mov	r1, r5
 800907a:	4630      	mov	r0, r6
 800907c:	f7ff ff93 	bl	8008fa6 <__sfputs_r>
 8009080:	3001      	adds	r0, #1
 8009082:	f000 80aa 	beq.w	80091da <_vfiprintf_r+0x20e>
 8009086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009088:	445a      	add	r2, fp
 800908a:	9209      	str	r2, [sp, #36]	; 0x24
 800908c:	f89a 3000 	ldrb.w	r3, [sl]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 80a2 	beq.w	80091da <_vfiprintf_r+0x20e>
 8009096:	2300      	movs	r3, #0
 8009098:	f04f 32ff 	mov.w	r2, #4294967295
 800909c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090a0:	f10a 0a01 	add.w	sl, sl, #1
 80090a4:	9304      	str	r3, [sp, #16]
 80090a6:	9307      	str	r3, [sp, #28]
 80090a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090ac:	931a      	str	r3, [sp, #104]	; 0x68
 80090ae:	4654      	mov	r4, sl
 80090b0:	2205      	movs	r2, #5
 80090b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b6:	4858      	ldr	r0, [pc, #352]	; (8009218 <_vfiprintf_r+0x24c>)
 80090b8:	f7f7 f8c2 	bl	8000240 <memchr>
 80090bc:	9a04      	ldr	r2, [sp, #16]
 80090be:	b9d8      	cbnz	r0, 80090f8 <_vfiprintf_r+0x12c>
 80090c0:	06d1      	lsls	r1, r2, #27
 80090c2:	bf44      	itt	mi
 80090c4:	2320      	movmi	r3, #32
 80090c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090ca:	0713      	lsls	r3, r2, #28
 80090cc:	bf44      	itt	mi
 80090ce:	232b      	movmi	r3, #43	; 0x2b
 80090d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090d4:	f89a 3000 	ldrb.w	r3, [sl]
 80090d8:	2b2a      	cmp	r3, #42	; 0x2a
 80090da:	d015      	beq.n	8009108 <_vfiprintf_r+0x13c>
 80090dc:	9a07      	ldr	r2, [sp, #28]
 80090de:	4654      	mov	r4, sl
 80090e0:	2000      	movs	r0, #0
 80090e2:	f04f 0c0a 	mov.w	ip, #10
 80090e6:	4621      	mov	r1, r4
 80090e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ec:	3b30      	subs	r3, #48	; 0x30
 80090ee:	2b09      	cmp	r3, #9
 80090f0:	d94e      	bls.n	8009190 <_vfiprintf_r+0x1c4>
 80090f2:	b1b0      	cbz	r0, 8009122 <_vfiprintf_r+0x156>
 80090f4:	9207      	str	r2, [sp, #28]
 80090f6:	e014      	b.n	8009122 <_vfiprintf_r+0x156>
 80090f8:	eba0 0308 	sub.w	r3, r0, r8
 80090fc:	fa09 f303 	lsl.w	r3, r9, r3
 8009100:	4313      	orrs	r3, r2
 8009102:	9304      	str	r3, [sp, #16]
 8009104:	46a2      	mov	sl, r4
 8009106:	e7d2      	b.n	80090ae <_vfiprintf_r+0xe2>
 8009108:	9b03      	ldr	r3, [sp, #12]
 800910a:	1d19      	adds	r1, r3, #4
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	9103      	str	r1, [sp, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	bfbb      	ittet	lt
 8009114:	425b      	neglt	r3, r3
 8009116:	f042 0202 	orrlt.w	r2, r2, #2
 800911a:	9307      	strge	r3, [sp, #28]
 800911c:	9307      	strlt	r3, [sp, #28]
 800911e:	bfb8      	it	lt
 8009120:	9204      	strlt	r2, [sp, #16]
 8009122:	7823      	ldrb	r3, [r4, #0]
 8009124:	2b2e      	cmp	r3, #46	; 0x2e
 8009126:	d10c      	bne.n	8009142 <_vfiprintf_r+0x176>
 8009128:	7863      	ldrb	r3, [r4, #1]
 800912a:	2b2a      	cmp	r3, #42	; 0x2a
 800912c:	d135      	bne.n	800919a <_vfiprintf_r+0x1ce>
 800912e:	9b03      	ldr	r3, [sp, #12]
 8009130:	1d1a      	adds	r2, r3, #4
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	9203      	str	r2, [sp, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	bfb8      	it	lt
 800913a:	f04f 33ff 	movlt.w	r3, #4294967295
 800913e:	3402      	adds	r4, #2
 8009140:	9305      	str	r3, [sp, #20]
 8009142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009228 <_vfiprintf_r+0x25c>
 8009146:	7821      	ldrb	r1, [r4, #0]
 8009148:	2203      	movs	r2, #3
 800914a:	4650      	mov	r0, sl
 800914c:	f7f7 f878 	bl	8000240 <memchr>
 8009150:	b140      	cbz	r0, 8009164 <_vfiprintf_r+0x198>
 8009152:	2340      	movs	r3, #64	; 0x40
 8009154:	eba0 000a 	sub.w	r0, r0, sl
 8009158:	fa03 f000 	lsl.w	r0, r3, r0
 800915c:	9b04      	ldr	r3, [sp, #16]
 800915e:	4303      	orrs	r3, r0
 8009160:	3401      	adds	r4, #1
 8009162:	9304      	str	r3, [sp, #16]
 8009164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009168:	482c      	ldr	r0, [pc, #176]	; (800921c <_vfiprintf_r+0x250>)
 800916a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800916e:	2206      	movs	r2, #6
 8009170:	f7f7 f866 	bl	8000240 <memchr>
 8009174:	2800      	cmp	r0, #0
 8009176:	d03f      	beq.n	80091f8 <_vfiprintf_r+0x22c>
 8009178:	4b29      	ldr	r3, [pc, #164]	; (8009220 <_vfiprintf_r+0x254>)
 800917a:	bb1b      	cbnz	r3, 80091c4 <_vfiprintf_r+0x1f8>
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	3307      	adds	r3, #7
 8009180:	f023 0307 	bic.w	r3, r3, #7
 8009184:	3308      	adds	r3, #8
 8009186:	9303      	str	r3, [sp, #12]
 8009188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918a:	443b      	add	r3, r7
 800918c:	9309      	str	r3, [sp, #36]	; 0x24
 800918e:	e767      	b.n	8009060 <_vfiprintf_r+0x94>
 8009190:	fb0c 3202 	mla	r2, ip, r2, r3
 8009194:	460c      	mov	r4, r1
 8009196:	2001      	movs	r0, #1
 8009198:	e7a5      	b.n	80090e6 <_vfiprintf_r+0x11a>
 800919a:	2300      	movs	r3, #0
 800919c:	3401      	adds	r4, #1
 800919e:	9305      	str	r3, [sp, #20]
 80091a0:	4619      	mov	r1, r3
 80091a2:	f04f 0c0a 	mov.w	ip, #10
 80091a6:	4620      	mov	r0, r4
 80091a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ac:	3a30      	subs	r2, #48	; 0x30
 80091ae:	2a09      	cmp	r2, #9
 80091b0:	d903      	bls.n	80091ba <_vfiprintf_r+0x1ee>
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0c5      	beq.n	8009142 <_vfiprintf_r+0x176>
 80091b6:	9105      	str	r1, [sp, #20]
 80091b8:	e7c3      	b.n	8009142 <_vfiprintf_r+0x176>
 80091ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80091be:	4604      	mov	r4, r0
 80091c0:	2301      	movs	r3, #1
 80091c2:	e7f0      	b.n	80091a6 <_vfiprintf_r+0x1da>
 80091c4:	ab03      	add	r3, sp, #12
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	462a      	mov	r2, r5
 80091ca:	4b16      	ldr	r3, [pc, #88]	; (8009224 <_vfiprintf_r+0x258>)
 80091cc:	a904      	add	r1, sp, #16
 80091ce:	4630      	mov	r0, r6
 80091d0:	f3af 8000 	nop.w
 80091d4:	4607      	mov	r7, r0
 80091d6:	1c78      	adds	r0, r7, #1
 80091d8:	d1d6      	bne.n	8009188 <_vfiprintf_r+0x1bc>
 80091da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091dc:	07d9      	lsls	r1, r3, #31
 80091de:	d405      	bmi.n	80091ec <_vfiprintf_r+0x220>
 80091e0:	89ab      	ldrh	r3, [r5, #12]
 80091e2:	059a      	lsls	r2, r3, #22
 80091e4:	d402      	bmi.n	80091ec <_vfiprintf_r+0x220>
 80091e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091e8:	f7fe fefc 	bl	8007fe4 <__retarget_lock_release_recursive>
 80091ec:	89ab      	ldrh	r3, [r5, #12]
 80091ee:	065b      	lsls	r3, r3, #25
 80091f0:	f53f af12 	bmi.w	8009018 <_vfiprintf_r+0x4c>
 80091f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091f6:	e711      	b.n	800901c <_vfiprintf_r+0x50>
 80091f8:	ab03      	add	r3, sp, #12
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	462a      	mov	r2, r5
 80091fe:	4b09      	ldr	r3, [pc, #36]	; (8009224 <_vfiprintf_r+0x258>)
 8009200:	a904      	add	r1, sp, #16
 8009202:	4630      	mov	r0, r6
 8009204:	f000 f880 	bl	8009308 <_printf_i>
 8009208:	e7e4      	b.n	80091d4 <_vfiprintf_r+0x208>
 800920a:	bf00      	nop
 800920c:	0800a5b4 	.word	0x0800a5b4
 8009210:	0800a5d4 	.word	0x0800a5d4
 8009214:	0800a594 	.word	0x0800a594
 8009218:	0800a5f8 	.word	0x0800a5f8
 800921c:	0800a602 	.word	0x0800a602
 8009220:	00000000 	.word	0x00000000
 8009224:	08008fa7 	.word	0x08008fa7
 8009228:	0800a5fe 	.word	0x0800a5fe

0800922c <_printf_common>:
 800922c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009230:	4616      	mov	r6, r2
 8009232:	4699      	mov	r9, r3
 8009234:	688a      	ldr	r2, [r1, #8]
 8009236:	690b      	ldr	r3, [r1, #16]
 8009238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800923c:	4293      	cmp	r3, r2
 800923e:	bfb8      	it	lt
 8009240:	4613      	movlt	r3, r2
 8009242:	6033      	str	r3, [r6, #0]
 8009244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009248:	4607      	mov	r7, r0
 800924a:	460c      	mov	r4, r1
 800924c:	b10a      	cbz	r2, 8009252 <_printf_common+0x26>
 800924e:	3301      	adds	r3, #1
 8009250:	6033      	str	r3, [r6, #0]
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	0699      	lsls	r1, r3, #26
 8009256:	bf42      	ittt	mi
 8009258:	6833      	ldrmi	r3, [r6, #0]
 800925a:	3302      	addmi	r3, #2
 800925c:	6033      	strmi	r3, [r6, #0]
 800925e:	6825      	ldr	r5, [r4, #0]
 8009260:	f015 0506 	ands.w	r5, r5, #6
 8009264:	d106      	bne.n	8009274 <_printf_common+0x48>
 8009266:	f104 0a19 	add.w	sl, r4, #25
 800926a:	68e3      	ldr	r3, [r4, #12]
 800926c:	6832      	ldr	r2, [r6, #0]
 800926e:	1a9b      	subs	r3, r3, r2
 8009270:	42ab      	cmp	r3, r5
 8009272:	dc26      	bgt.n	80092c2 <_printf_common+0x96>
 8009274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009278:	1e13      	subs	r3, r2, #0
 800927a:	6822      	ldr	r2, [r4, #0]
 800927c:	bf18      	it	ne
 800927e:	2301      	movne	r3, #1
 8009280:	0692      	lsls	r2, r2, #26
 8009282:	d42b      	bmi.n	80092dc <_printf_common+0xb0>
 8009284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009288:	4649      	mov	r1, r9
 800928a:	4638      	mov	r0, r7
 800928c:	47c0      	blx	r8
 800928e:	3001      	adds	r0, #1
 8009290:	d01e      	beq.n	80092d0 <_printf_common+0xa4>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	68e5      	ldr	r5, [r4, #12]
 8009296:	6832      	ldr	r2, [r6, #0]
 8009298:	f003 0306 	and.w	r3, r3, #6
 800929c:	2b04      	cmp	r3, #4
 800929e:	bf08      	it	eq
 80092a0:	1aad      	subeq	r5, r5, r2
 80092a2:	68a3      	ldr	r3, [r4, #8]
 80092a4:	6922      	ldr	r2, [r4, #16]
 80092a6:	bf0c      	ite	eq
 80092a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092ac:	2500      	movne	r5, #0
 80092ae:	4293      	cmp	r3, r2
 80092b0:	bfc4      	itt	gt
 80092b2:	1a9b      	subgt	r3, r3, r2
 80092b4:	18ed      	addgt	r5, r5, r3
 80092b6:	2600      	movs	r6, #0
 80092b8:	341a      	adds	r4, #26
 80092ba:	42b5      	cmp	r5, r6
 80092bc:	d11a      	bne.n	80092f4 <_printf_common+0xc8>
 80092be:	2000      	movs	r0, #0
 80092c0:	e008      	b.n	80092d4 <_printf_common+0xa8>
 80092c2:	2301      	movs	r3, #1
 80092c4:	4652      	mov	r2, sl
 80092c6:	4649      	mov	r1, r9
 80092c8:	4638      	mov	r0, r7
 80092ca:	47c0      	blx	r8
 80092cc:	3001      	adds	r0, #1
 80092ce:	d103      	bne.n	80092d8 <_printf_common+0xac>
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
 80092d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d8:	3501      	adds	r5, #1
 80092da:	e7c6      	b.n	800926a <_printf_common+0x3e>
 80092dc:	18e1      	adds	r1, r4, r3
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	2030      	movs	r0, #48	; 0x30
 80092e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092e6:	4422      	add	r2, r4
 80092e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092f0:	3302      	adds	r3, #2
 80092f2:	e7c7      	b.n	8009284 <_printf_common+0x58>
 80092f4:	2301      	movs	r3, #1
 80092f6:	4622      	mov	r2, r4
 80092f8:	4649      	mov	r1, r9
 80092fa:	4638      	mov	r0, r7
 80092fc:	47c0      	blx	r8
 80092fe:	3001      	adds	r0, #1
 8009300:	d0e6      	beq.n	80092d0 <_printf_common+0xa4>
 8009302:	3601      	adds	r6, #1
 8009304:	e7d9      	b.n	80092ba <_printf_common+0x8e>
	...

08009308 <_printf_i>:
 8009308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800930c:	460c      	mov	r4, r1
 800930e:	4691      	mov	r9, r2
 8009310:	7e27      	ldrb	r7, [r4, #24]
 8009312:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009314:	2f78      	cmp	r7, #120	; 0x78
 8009316:	4680      	mov	r8, r0
 8009318:	469a      	mov	sl, r3
 800931a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800931e:	d807      	bhi.n	8009330 <_printf_i+0x28>
 8009320:	2f62      	cmp	r7, #98	; 0x62
 8009322:	d80a      	bhi.n	800933a <_printf_i+0x32>
 8009324:	2f00      	cmp	r7, #0
 8009326:	f000 80d8 	beq.w	80094da <_printf_i+0x1d2>
 800932a:	2f58      	cmp	r7, #88	; 0x58
 800932c:	f000 80a3 	beq.w	8009476 <_printf_i+0x16e>
 8009330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009338:	e03a      	b.n	80093b0 <_printf_i+0xa8>
 800933a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800933e:	2b15      	cmp	r3, #21
 8009340:	d8f6      	bhi.n	8009330 <_printf_i+0x28>
 8009342:	a001      	add	r0, pc, #4	; (adr r0, 8009348 <_printf_i+0x40>)
 8009344:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009348:	080093a1 	.word	0x080093a1
 800934c:	080093b5 	.word	0x080093b5
 8009350:	08009331 	.word	0x08009331
 8009354:	08009331 	.word	0x08009331
 8009358:	08009331 	.word	0x08009331
 800935c:	08009331 	.word	0x08009331
 8009360:	080093b5 	.word	0x080093b5
 8009364:	08009331 	.word	0x08009331
 8009368:	08009331 	.word	0x08009331
 800936c:	08009331 	.word	0x08009331
 8009370:	08009331 	.word	0x08009331
 8009374:	080094c1 	.word	0x080094c1
 8009378:	080093e5 	.word	0x080093e5
 800937c:	080094a3 	.word	0x080094a3
 8009380:	08009331 	.word	0x08009331
 8009384:	08009331 	.word	0x08009331
 8009388:	080094e3 	.word	0x080094e3
 800938c:	08009331 	.word	0x08009331
 8009390:	080093e5 	.word	0x080093e5
 8009394:	08009331 	.word	0x08009331
 8009398:	08009331 	.word	0x08009331
 800939c:	080094ab 	.word	0x080094ab
 80093a0:	680b      	ldr	r3, [r1, #0]
 80093a2:	1d1a      	adds	r2, r3, #4
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	600a      	str	r2, [r1, #0]
 80093a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093b0:	2301      	movs	r3, #1
 80093b2:	e0a3      	b.n	80094fc <_printf_i+0x1f4>
 80093b4:	6825      	ldr	r5, [r4, #0]
 80093b6:	6808      	ldr	r0, [r1, #0]
 80093b8:	062e      	lsls	r6, r5, #24
 80093ba:	f100 0304 	add.w	r3, r0, #4
 80093be:	d50a      	bpl.n	80093d6 <_printf_i+0xce>
 80093c0:	6805      	ldr	r5, [r0, #0]
 80093c2:	600b      	str	r3, [r1, #0]
 80093c4:	2d00      	cmp	r5, #0
 80093c6:	da03      	bge.n	80093d0 <_printf_i+0xc8>
 80093c8:	232d      	movs	r3, #45	; 0x2d
 80093ca:	426d      	negs	r5, r5
 80093cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093d0:	485e      	ldr	r0, [pc, #376]	; (800954c <_printf_i+0x244>)
 80093d2:	230a      	movs	r3, #10
 80093d4:	e019      	b.n	800940a <_printf_i+0x102>
 80093d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80093da:	6805      	ldr	r5, [r0, #0]
 80093dc:	600b      	str	r3, [r1, #0]
 80093de:	bf18      	it	ne
 80093e0:	b22d      	sxthne	r5, r5
 80093e2:	e7ef      	b.n	80093c4 <_printf_i+0xbc>
 80093e4:	680b      	ldr	r3, [r1, #0]
 80093e6:	6825      	ldr	r5, [r4, #0]
 80093e8:	1d18      	adds	r0, r3, #4
 80093ea:	6008      	str	r0, [r1, #0]
 80093ec:	0628      	lsls	r0, r5, #24
 80093ee:	d501      	bpl.n	80093f4 <_printf_i+0xec>
 80093f0:	681d      	ldr	r5, [r3, #0]
 80093f2:	e002      	b.n	80093fa <_printf_i+0xf2>
 80093f4:	0669      	lsls	r1, r5, #25
 80093f6:	d5fb      	bpl.n	80093f0 <_printf_i+0xe8>
 80093f8:	881d      	ldrh	r5, [r3, #0]
 80093fa:	4854      	ldr	r0, [pc, #336]	; (800954c <_printf_i+0x244>)
 80093fc:	2f6f      	cmp	r7, #111	; 0x6f
 80093fe:	bf0c      	ite	eq
 8009400:	2308      	moveq	r3, #8
 8009402:	230a      	movne	r3, #10
 8009404:	2100      	movs	r1, #0
 8009406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800940a:	6866      	ldr	r6, [r4, #4]
 800940c:	60a6      	str	r6, [r4, #8]
 800940e:	2e00      	cmp	r6, #0
 8009410:	bfa2      	ittt	ge
 8009412:	6821      	ldrge	r1, [r4, #0]
 8009414:	f021 0104 	bicge.w	r1, r1, #4
 8009418:	6021      	strge	r1, [r4, #0]
 800941a:	b90d      	cbnz	r5, 8009420 <_printf_i+0x118>
 800941c:	2e00      	cmp	r6, #0
 800941e:	d04d      	beq.n	80094bc <_printf_i+0x1b4>
 8009420:	4616      	mov	r6, r2
 8009422:	fbb5 f1f3 	udiv	r1, r5, r3
 8009426:	fb03 5711 	mls	r7, r3, r1, r5
 800942a:	5dc7      	ldrb	r7, [r0, r7]
 800942c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009430:	462f      	mov	r7, r5
 8009432:	42bb      	cmp	r3, r7
 8009434:	460d      	mov	r5, r1
 8009436:	d9f4      	bls.n	8009422 <_printf_i+0x11a>
 8009438:	2b08      	cmp	r3, #8
 800943a:	d10b      	bne.n	8009454 <_printf_i+0x14c>
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	07df      	lsls	r7, r3, #31
 8009440:	d508      	bpl.n	8009454 <_printf_i+0x14c>
 8009442:	6923      	ldr	r3, [r4, #16]
 8009444:	6861      	ldr	r1, [r4, #4]
 8009446:	4299      	cmp	r1, r3
 8009448:	bfde      	ittt	le
 800944a:	2330      	movle	r3, #48	; 0x30
 800944c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009450:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009454:	1b92      	subs	r2, r2, r6
 8009456:	6122      	str	r2, [r4, #16]
 8009458:	f8cd a000 	str.w	sl, [sp]
 800945c:	464b      	mov	r3, r9
 800945e:	aa03      	add	r2, sp, #12
 8009460:	4621      	mov	r1, r4
 8009462:	4640      	mov	r0, r8
 8009464:	f7ff fee2 	bl	800922c <_printf_common>
 8009468:	3001      	adds	r0, #1
 800946a:	d14c      	bne.n	8009506 <_printf_i+0x1fe>
 800946c:	f04f 30ff 	mov.w	r0, #4294967295
 8009470:	b004      	add	sp, #16
 8009472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009476:	4835      	ldr	r0, [pc, #212]	; (800954c <_printf_i+0x244>)
 8009478:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	680e      	ldr	r6, [r1, #0]
 8009480:	061f      	lsls	r7, r3, #24
 8009482:	f856 5b04 	ldr.w	r5, [r6], #4
 8009486:	600e      	str	r6, [r1, #0]
 8009488:	d514      	bpl.n	80094b4 <_printf_i+0x1ac>
 800948a:	07d9      	lsls	r1, r3, #31
 800948c:	bf44      	itt	mi
 800948e:	f043 0320 	orrmi.w	r3, r3, #32
 8009492:	6023      	strmi	r3, [r4, #0]
 8009494:	b91d      	cbnz	r5, 800949e <_printf_i+0x196>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	f023 0320 	bic.w	r3, r3, #32
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	2310      	movs	r3, #16
 80094a0:	e7b0      	b.n	8009404 <_printf_i+0xfc>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	f043 0320 	orr.w	r3, r3, #32
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	2378      	movs	r3, #120	; 0x78
 80094ac:	4828      	ldr	r0, [pc, #160]	; (8009550 <_printf_i+0x248>)
 80094ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094b2:	e7e3      	b.n	800947c <_printf_i+0x174>
 80094b4:	065e      	lsls	r6, r3, #25
 80094b6:	bf48      	it	mi
 80094b8:	b2ad      	uxthmi	r5, r5
 80094ba:	e7e6      	b.n	800948a <_printf_i+0x182>
 80094bc:	4616      	mov	r6, r2
 80094be:	e7bb      	b.n	8009438 <_printf_i+0x130>
 80094c0:	680b      	ldr	r3, [r1, #0]
 80094c2:	6826      	ldr	r6, [r4, #0]
 80094c4:	6960      	ldr	r0, [r4, #20]
 80094c6:	1d1d      	adds	r5, r3, #4
 80094c8:	600d      	str	r5, [r1, #0]
 80094ca:	0635      	lsls	r5, r6, #24
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	d501      	bpl.n	80094d4 <_printf_i+0x1cc>
 80094d0:	6018      	str	r0, [r3, #0]
 80094d2:	e002      	b.n	80094da <_printf_i+0x1d2>
 80094d4:	0671      	lsls	r1, r6, #25
 80094d6:	d5fb      	bpl.n	80094d0 <_printf_i+0x1c8>
 80094d8:	8018      	strh	r0, [r3, #0]
 80094da:	2300      	movs	r3, #0
 80094dc:	6123      	str	r3, [r4, #16]
 80094de:	4616      	mov	r6, r2
 80094e0:	e7ba      	b.n	8009458 <_printf_i+0x150>
 80094e2:	680b      	ldr	r3, [r1, #0]
 80094e4:	1d1a      	adds	r2, r3, #4
 80094e6:	600a      	str	r2, [r1, #0]
 80094e8:	681e      	ldr	r6, [r3, #0]
 80094ea:	6862      	ldr	r2, [r4, #4]
 80094ec:	2100      	movs	r1, #0
 80094ee:	4630      	mov	r0, r6
 80094f0:	f7f6 fea6 	bl	8000240 <memchr>
 80094f4:	b108      	cbz	r0, 80094fa <_printf_i+0x1f2>
 80094f6:	1b80      	subs	r0, r0, r6
 80094f8:	6060      	str	r0, [r4, #4]
 80094fa:	6863      	ldr	r3, [r4, #4]
 80094fc:	6123      	str	r3, [r4, #16]
 80094fe:	2300      	movs	r3, #0
 8009500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009504:	e7a8      	b.n	8009458 <_printf_i+0x150>
 8009506:	6923      	ldr	r3, [r4, #16]
 8009508:	4632      	mov	r2, r6
 800950a:	4649      	mov	r1, r9
 800950c:	4640      	mov	r0, r8
 800950e:	47d0      	blx	sl
 8009510:	3001      	adds	r0, #1
 8009512:	d0ab      	beq.n	800946c <_printf_i+0x164>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	079b      	lsls	r3, r3, #30
 8009518:	d413      	bmi.n	8009542 <_printf_i+0x23a>
 800951a:	68e0      	ldr	r0, [r4, #12]
 800951c:	9b03      	ldr	r3, [sp, #12]
 800951e:	4298      	cmp	r0, r3
 8009520:	bfb8      	it	lt
 8009522:	4618      	movlt	r0, r3
 8009524:	e7a4      	b.n	8009470 <_printf_i+0x168>
 8009526:	2301      	movs	r3, #1
 8009528:	4632      	mov	r2, r6
 800952a:	4649      	mov	r1, r9
 800952c:	4640      	mov	r0, r8
 800952e:	47d0      	blx	sl
 8009530:	3001      	adds	r0, #1
 8009532:	d09b      	beq.n	800946c <_printf_i+0x164>
 8009534:	3501      	adds	r5, #1
 8009536:	68e3      	ldr	r3, [r4, #12]
 8009538:	9903      	ldr	r1, [sp, #12]
 800953a:	1a5b      	subs	r3, r3, r1
 800953c:	42ab      	cmp	r3, r5
 800953e:	dcf2      	bgt.n	8009526 <_printf_i+0x21e>
 8009540:	e7eb      	b.n	800951a <_printf_i+0x212>
 8009542:	2500      	movs	r5, #0
 8009544:	f104 0619 	add.w	r6, r4, #25
 8009548:	e7f5      	b.n	8009536 <_printf_i+0x22e>
 800954a:	bf00      	nop
 800954c:	0800a609 	.word	0x0800a609
 8009550:	0800a61a 	.word	0x0800a61a

08009554 <_scanf_chars>:
 8009554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009558:	4615      	mov	r5, r2
 800955a:	688a      	ldr	r2, [r1, #8]
 800955c:	4680      	mov	r8, r0
 800955e:	460c      	mov	r4, r1
 8009560:	b932      	cbnz	r2, 8009570 <_scanf_chars+0x1c>
 8009562:	698a      	ldr	r2, [r1, #24]
 8009564:	2a00      	cmp	r2, #0
 8009566:	bf0c      	ite	eq
 8009568:	2201      	moveq	r2, #1
 800956a:	f04f 32ff 	movne.w	r2, #4294967295
 800956e:	608a      	str	r2, [r1, #8]
 8009570:	6822      	ldr	r2, [r4, #0]
 8009572:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009600 <_scanf_chars+0xac>
 8009576:	06d1      	lsls	r1, r2, #27
 8009578:	bf5f      	itttt	pl
 800957a:	681a      	ldrpl	r2, [r3, #0]
 800957c:	1d11      	addpl	r1, r2, #4
 800957e:	6019      	strpl	r1, [r3, #0]
 8009580:	6816      	ldrpl	r6, [r2, #0]
 8009582:	2700      	movs	r7, #0
 8009584:	69a0      	ldr	r0, [r4, #24]
 8009586:	b188      	cbz	r0, 80095ac <_scanf_chars+0x58>
 8009588:	2801      	cmp	r0, #1
 800958a:	d107      	bne.n	800959c <_scanf_chars+0x48>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	781a      	ldrb	r2, [r3, #0]
 8009590:	6963      	ldr	r3, [r4, #20]
 8009592:	5c9b      	ldrb	r3, [r3, r2]
 8009594:	b953      	cbnz	r3, 80095ac <_scanf_chars+0x58>
 8009596:	bb27      	cbnz	r7, 80095e2 <_scanf_chars+0x8e>
 8009598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800959c:	2802      	cmp	r0, #2
 800959e:	d120      	bne.n	80095e2 <_scanf_chars+0x8e>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80095a8:	071b      	lsls	r3, r3, #28
 80095aa:	d41a      	bmi.n	80095e2 <_scanf_chars+0x8e>
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	06da      	lsls	r2, r3, #27
 80095b0:	bf5e      	ittt	pl
 80095b2:	682b      	ldrpl	r3, [r5, #0]
 80095b4:	781b      	ldrbpl	r3, [r3, #0]
 80095b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80095ba:	682a      	ldr	r2, [r5, #0]
 80095bc:	686b      	ldr	r3, [r5, #4]
 80095be:	3201      	adds	r2, #1
 80095c0:	602a      	str	r2, [r5, #0]
 80095c2:	68a2      	ldr	r2, [r4, #8]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	3a01      	subs	r2, #1
 80095c8:	606b      	str	r3, [r5, #4]
 80095ca:	3701      	adds	r7, #1
 80095cc:	60a2      	str	r2, [r4, #8]
 80095ce:	b142      	cbz	r2, 80095e2 <_scanf_chars+0x8e>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	dcd7      	bgt.n	8009584 <_scanf_chars+0x30>
 80095d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80095d8:	4629      	mov	r1, r5
 80095da:	4640      	mov	r0, r8
 80095dc:	4798      	blx	r3
 80095de:	2800      	cmp	r0, #0
 80095e0:	d0d0      	beq.n	8009584 <_scanf_chars+0x30>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	f013 0310 	ands.w	r3, r3, #16
 80095e8:	d105      	bne.n	80095f6 <_scanf_chars+0xa2>
 80095ea:	68e2      	ldr	r2, [r4, #12]
 80095ec:	3201      	adds	r2, #1
 80095ee:	60e2      	str	r2, [r4, #12]
 80095f0:	69a2      	ldr	r2, [r4, #24]
 80095f2:	b102      	cbz	r2, 80095f6 <_scanf_chars+0xa2>
 80095f4:	7033      	strb	r3, [r6, #0]
 80095f6:	6923      	ldr	r3, [r4, #16]
 80095f8:	441f      	add	r7, r3
 80095fa:	6127      	str	r7, [r4, #16]
 80095fc:	2000      	movs	r0, #0
 80095fe:	e7cb      	b.n	8009598 <_scanf_chars+0x44>
 8009600:	0800a493 	.word	0x0800a493

08009604 <_scanf_i>:
 8009604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	4698      	mov	r8, r3
 800960a:	4b74      	ldr	r3, [pc, #464]	; (80097dc <_scanf_i+0x1d8>)
 800960c:	460c      	mov	r4, r1
 800960e:	4682      	mov	sl, r0
 8009610:	4616      	mov	r6, r2
 8009612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009616:	b087      	sub	sp, #28
 8009618:	ab03      	add	r3, sp, #12
 800961a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800961e:	4b70      	ldr	r3, [pc, #448]	; (80097e0 <_scanf_i+0x1dc>)
 8009620:	69a1      	ldr	r1, [r4, #24]
 8009622:	4a70      	ldr	r2, [pc, #448]	; (80097e4 <_scanf_i+0x1e0>)
 8009624:	2903      	cmp	r1, #3
 8009626:	bf18      	it	ne
 8009628:	461a      	movne	r2, r3
 800962a:	68a3      	ldr	r3, [r4, #8]
 800962c:	9201      	str	r2, [sp, #4]
 800962e:	1e5a      	subs	r2, r3, #1
 8009630:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009634:	bf88      	it	hi
 8009636:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800963a:	4627      	mov	r7, r4
 800963c:	bf82      	ittt	hi
 800963e:	eb03 0905 	addhi.w	r9, r3, r5
 8009642:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009646:	60a3      	strhi	r3, [r4, #8]
 8009648:	f857 3b1c 	ldr.w	r3, [r7], #28
 800964c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009650:	bf98      	it	ls
 8009652:	f04f 0900 	movls.w	r9, #0
 8009656:	6023      	str	r3, [r4, #0]
 8009658:	463d      	mov	r5, r7
 800965a:	f04f 0b00 	mov.w	fp, #0
 800965e:	6831      	ldr	r1, [r6, #0]
 8009660:	ab03      	add	r3, sp, #12
 8009662:	7809      	ldrb	r1, [r1, #0]
 8009664:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009668:	2202      	movs	r2, #2
 800966a:	f7f6 fde9 	bl	8000240 <memchr>
 800966e:	b328      	cbz	r0, 80096bc <_scanf_i+0xb8>
 8009670:	f1bb 0f01 	cmp.w	fp, #1
 8009674:	d159      	bne.n	800972a <_scanf_i+0x126>
 8009676:	6862      	ldr	r2, [r4, #4]
 8009678:	b92a      	cbnz	r2, 8009686 <_scanf_i+0x82>
 800967a:	6822      	ldr	r2, [r4, #0]
 800967c:	2308      	movs	r3, #8
 800967e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009682:	6063      	str	r3, [r4, #4]
 8009684:	6022      	str	r2, [r4, #0]
 8009686:	6822      	ldr	r2, [r4, #0]
 8009688:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800968c:	6022      	str	r2, [r4, #0]
 800968e:	68a2      	ldr	r2, [r4, #8]
 8009690:	1e51      	subs	r1, r2, #1
 8009692:	60a1      	str	r1, [r4, #8]
 8009694:	b192      	cbz	r2, 80096bc <_scanf_i+0xb8>
 8009696:	6832      	ldr	r2, [r6, #0]
 8009698:	1c51      	adds	r1, r2, #1
 800969a:	6031      	str	r1, [r6, #0]
 800969c:	7812      	ldrb	r2, [r2, #0]
 800969e:	f805 2b01 	strb.w	r2, [r5], #1
 80096a2:	6872      	ldr	r2, [r6, #4]
 80096a4:	3a01      	subs	r2, #1
 80096a6:	2a00      	cmp	r2, #0
 80096a8:	6072      	str	r2, [r6, #4]
 80096aa:	dc07      	bgt.n	80096bc <_scanf_i+0xb8>
 80096ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80096b0:	4631      	mov	r1, r6
 80096b2:	4650      	mov	r0, sl
 80096b4:	4790      	blx	r2
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f040 8085 	bne.w	80097c6 <_scanf_i+0x1c2>
 80096bc:	f10b 0b01 	add.w	fp, fp, #1
 80096c0:	f1bb 0f03 	cmp.w	fp, #3
 80096c4:	d1cb      	bne.n	800965e <_scanf_i+0x5a>
 80096c6:	6863      	ldr	r3, [r4, #4]
 80096c8:	b90b      	cbnz	r3, 80096ce <_scanf_i+0xca>
 80096ca:	230a      	movs	r3, #10
 80096cc:	6063      	str	r3, [r4, #4]
 80096ce:	6863      	ldr	r3, [r4, #4]
 80096d0:	4945      	ldr	r1, [pc, #276]	; (80097e8 <_scanf_i+0x1e4>)
 80096d2:	6960      	ldr	r0, [r4, #20]
 80096d4:	1ac9      	subs	r1, r1, r3
 80096d6:	f000 f8e3 	bl	80098a0 <__sccl>
 80096da:	f04f 0b00 	mov.w	fp, #0
 80096de:	68a3      	ldr	r3, [r4, #8]
 80096e0:	6822      	ldr	r2, [r4, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d03d      	beq.n	8009762 <_scanf_i+0x15e>
 80096e6:	6831      	ldr	r1, [r6, #0]
 80096e8:	6960      	ldr	r0, [r4, #20]
 80096ea:	f891 c000 	ldrb.w	ip, [r1]
 80096ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d035      	beq.n	8009762 <_scanf_i+0x15e>
 80096f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80096fa:	d124      	bne.n	8009746 <_scanf_i+0x142>
 80096fc:	0510      	lsls	r0, r2, #20
 80096fe:	d522      	bpl.n	8009746 <_scanf_i+0x142>
 8009700:	f10b 0b01 	add.w	fp, fp, #1
 8009704:	f1b9 0f00 	cmp.w	r9, #0
 8009708:	d003      	beq.n	8009712 <_scanf_i+0x10e>
 800970a:	3301      	adds	r3, #1
 800970c:	f109 39ff 	add.w	r9, r9, #4294967295
 8009710:	60a3      	str	r3, [r4, #8]
 8009712:	6873      	ldr	r3, [r6, #4]
 8009714:	3b01      	subs	r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	6073      	str	r3, [r6, #4]
 800971a:	dd1b      	ble.n	8009754 <_scanf_i+0x150>
 800971c:	6833      	ldr	r3, [r6, #0]
 800971e:	3301      	adds	r3, #1
 8009720:	6033      	str	r3, [r6, #0]
 8009722:	68a3      	ldr	r3, [r4, #8]
 8009724:	3b01      	subs	r3, #1
 8009726:	60a3      	str	r3, [r4, #8]
 8009728:	e7d9      	b.n	80096de <_scanf_i+0xda>
 800972a:	f1bb 0f02 	cmp.w	fp, #2
 800972e:	d1ae      	bne.n	800968e <_scanf_i+0x8a>
 8009730:	6822      	ldr	r2, [r4, #0]
 8009732:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009736:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800973a:	d1bf      	bne.n	80096bc <_scanf_i+0xb8>
 800973c:	2310      	movs	r3, #16
 800973e:	6063      	str	r3, [r4, #4]
 8009740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009744:	e7a2      	b.n	800968c <_scanf_i+0x88>
 8009746:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800974a:	6022      	str	r2, [r4, #0]
 800974c:	780b      	ldrb	r3, [r1, #0]
 800974e:	f805 3b01 	strb.w	r3, [r5], #1
 8009752:	e7de      	b.n	8009712 <_scanf_i+0x10e>
 8009754:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009758:	4631      	mov	r1, r6
 800975a:	4650      	mov	r0, sl
 800975c:	4798      	blx	r3
 800975e:	2800      	cmp	r0, #0
 8009760:	d0df      	beq.n	8009722 <_scanf_i+0x11e>
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	05d9      	lsls	r1, r3, #23
 8009766:	d50d      	bpl.n	8009784 <_scanf_i+0x180>
 8009768:	42bd      	cmp	r5, r7
 800976a:	d909      	bls.n	8009780 <_scanf_i+0x17c>
 800976c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009770:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009774:	4632      	mov	r2, r6
 8009776:	4650      	mov	r0, sl
 8009778:	4798      	blx	r3
 800977a:	f105 39ff 	add.w	r9, r5, #4294967295
 800977e:	464d      	mov	r5, r9
 8009780:	42bd      	cmp	r5, r7
 8009782:	d028      	beq.n	80097d6 <_scanf_i+0x1d2>
 8009784:	6822      	ldr	r2, [r4, #0]
 8009786:	f012 0210 	ands.w	r2, r2, #16
 800978a:	d113      	bne.n	80097b4 <_scanf_i+0x1b0>
 800978c:	702a      	strb	r2, [r5, #0]
 800978e:	6863      	ldr	r3, [r4, #4]
 8009790:	9e01      	ldr	r6, [sp, #4]
 8009792:	4639      	mov	r1, r7
 8009794:	4650      	mov	r0, sl
 8009796:	47b0      	blx	r6
 8009798:	f8d8 3000 	ldr.w	r3, [r8]
 800979c:	6821      	ldr	r1, [r4, #0]
 800979e:	1d1a      	adds	r2, r3, #4
 80097a0:	f8c8 2000 	str.w	r2, [r8]
 80097a4:	f011 0f20 	tst.w	r1, #32
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	d00f      	beq.n	80097cc <_scanf_i+0x1c8>
 80097ac:	6018      	str	r0, [r3, #0]
 80097ae:	68e3      	ldr	r3, [r4, #12]
 80097b0:	3301      	adds	r3, #1
 80097b2:	60e3      	str	r3, [r4, #12]
 80097b4:	1bed      	subs	r5, r5, r7
 80097b6:	44ab      	add	fp, r5
 80097b8:	6925      	ldr	r5, [r4, #16]
 80097ba:	445d      	add	r5, fp
 80097bc:	6125      	str	r5, [r4, #16]
 80097be:	2000      	movs	r0, #0
 80097c0:	b007      	add	sp, #28
 80097c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c6:	f04f 0b00 	mov.w	fp, #0
 80097ca:	e7ca      	b.n	8009762 <_scanf_i+0x15e>
 80097cc:	07ca      	lsls	r2, r1, #31
 80097ce:	bf4c      	ite	mi
 80097d0:	8018      	strhmi	r0, [r3, #0]
 80097d2:	6018      	strpl	r0, [r3, #0]
 80097d4:	e7eb      	b.n	80097ae <_scanf_i+0x1aa>
 80097d6:	2001      	movs	r0, #1
 80097d8:	e7f2      	b.n	80097c0 <_scanf_i+0x1bc>
 80097da:	bf00      	nop
 80097dc:	08009b00 	.word	0x08009b00
 80097e0:	08009a0d 	.word	0x08009a0d
 80097e4:	080085f1 	.word	0x080085f1
 80097e8:	0800a644 	.word	0x0800a644

080097ec <_putc_r>:
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	460d      	mov	r5, r1
 80097f0:	4614      	mov	r4, r2
 80097f2:	4606      	mov	r6, r0
 80097f4:	b118      	cbz	r0, 80097fe <_putc_r+0x12>
 80097f6:	6983      	ldr	r3, [r0, #24]
 80097f8:	b90b      	cbnz	r3, 80097fe <_putc_r+0x12>
 80097fa:	f7fe fb2f 	bl	8007e5c <__sinit>
 80097fe:	4b1c      	ldr	r3, [pc, #112]	; (8009870 <_putc_r+0x84>)
 8009800:	429c      	cmp	r4, r3
 8009802:	d124      	bne.n	800984e <_putc_r+0x62>
 8009804:	6874      	ldr	r4, [r6, #4]
 8009806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009808:	07d8      	lsls	r0, r3, #31
 800980a:	d405      	bmi.n	8009818 <_putc_r+0x2c>
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	0599      	lsls	r1, r3, #22
 8009810:	d402      	bmi.n	8009818 <_putc_r+0x2c>
 8009812:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009814:	f7fe fbe5 	bl	8007fe2 <__retarget_lock_acquire_recursive>
 8009818:	68a3      	ldr	r3, [r4, #8]
 800981a:	3b01      	subs	r3, #1
 800981c:	2b00      	cmp	r3, #0
 800981e:	60a3      	str	r3, [r4, #8]
 8009820:	da05      	bge.n	800982e <_putc_r+0x42>
 8009822:	69a2      	ldr	r2, [r4, #24]
 8009824:	4293      	cmp	r3, r2
 8009826:	db1c      	blt.n	8009862 <_putc_r+0x76>
 8009828:	b2eb      	uxtb	r3, r5
 800982a:	2b0a      	cmp	r3, #10
 800982c:	d019      	beq.n	8009862 <_putc_r+0x76>
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	6022      	str	r2, [r4, #0]
 8009834:	701d      	strb	r5, [r3, #0]
 8009836:	b2ed      	uxtb	r5, r5
 8009838:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800983a:	07da      	lsls	r2, r3, #31
 800983c:	d405      	bmi.n	800984a <_putc_r+0x5e>
 800983e:	89a3      	ldrh	r3, [r4, #12]
 8009840:	059b      	lsls	r3, r3, #22
 8009842:	d402      	bmi.n	800984a <_putc_r+0x5e>
 8009844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009846:	f7fe fbcd 	bl	8007fe4 <__retarget_lock_release_recursive>
 800984a:	4628      	mov	r0, r5
 800984c:	bd70      	pop	{r4, r5, r6, pc}
 800984e:	4b09      	ldr	r3, [pc, #36]	; (8009874 <_putc_r+0x88>)
 8009850:	429c      	cmp	r4, r3
 8009852:	d101      	bne.n	8009858 <_putc_r+0x6c>
 8009854:	68b4      	ldr	r4, [r6, #8]
 8009856:	e7d6      	b.n	8009806 <_putc_r+0x1a>
 8009858:	4b07      	ldr	r3, [pc, #28]	; (8009878 <_putc_r+0x8c>)
 800985a:	429c      	cmp	r4, r3
 800985c:	bf08      	it	eq
 800985e:	68f4      	ldreq	r4, [r6, #12]
 8009860:	e7d1      	b.n	8009806 <_putc_r+0x1a>
 8009862:	4629      	mov	r1, r5
 8009864:	4622      	mov	r2, r4
 8009866:	4630      	mov	r0, r6
 8009868:	f7fe fece 	bl	8008608 <__swbuf_r>
 800986c:	4605      	mov	r5, r0
 800986e:	e7e3      	b.n	8009838 <_putc_r+0x4c>
 8009870:	0800a5b4 	.word	0x0800a5b4
 8009874:	0800a5d4 	.word	0x0800a5d4
 8009878:	0800a594 	.word	0x0800a594

0800987c <_read_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4d07      	ldr	r5, [pc, #28]	; (800989c <_read_r+0x20>)
 8009880:	4604      	mov	r4, r0
 8009882:	4608      	mov	r0, r1
 8009884:	4611      	mov	r1, r2
 8009886:	2200      	movs	r2, #0
 8009888:	602a      	str	r2, [r5, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	f7f9 fff4 	bl	8003878 <_read>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_read_r+0x1e>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_read_r+0x1e>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	20003e34 	.word	0x20003e34

080098a0 <__sccl>:
 80098a0:	b570      	push	{r4, r5, r6, lr}
 80098a2:	780b      	ldrb	r3, [r1, #0]
 80098a4:	4604      	mov	r4, r0
 80098a6:	2b5e      	cmp	r3, #94	; 0x5e
 80098a8:	bf0b      	itete	eq
 80098aa:	784b      	ldrbeq	r3, [r1, #1]
 80098ac:	1c48      	addne	r0, r1, #1
 80098ae:	1c88      	addeq	r0, r1, #2
 80098b0:	2200      	movne	r2, #0
 80098b2:	bf08      	it	eq
 80098b4:	2201      	moveq	r2, #1
 80098b6:	1e61      	subs	r1, r4, #1
 80098b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80098bc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80098c0:	42a9      	cmp	r1, r5
 80098c2:	d1fb      	bne.n	80098bc <__sccl+0x1c>
 80098c4:	b90b      	cbnz	r3, 80098ca <__sccl+0x2a>
 80098c6:	3801      	subs	r0, #1
 80098c8:	bd70      	pop	{r4, r5, r6, pc}
 80098ca:	f082 0101 	eor.w	r1, r2, #1
 80098ce:	54e1      	strb	r1, [r4, r3]
 80098d0:	1c42      	adds	r2, r0, #1
 80098d2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80098d6:	2d2d      	cmp	r5, #45	; 0x2d
 80098d8:	f102 36ff 	add.w	r6, r2, #4294967295
 80098dc:	4610      	mov	r0, r2
 80098de:	d006      	beq.n	80098ee <__sccl+0x4e>
 80098e0:	2d5d      	cmp	r5, #93	; 0x5d
 80098e2:	d0f1      	beq.n	80098c8 <__sccl+0x28>
 80098e4:	b90d      	cbnz	r5, 80098ea <__sccl+0x4a>
 80098e6:	4630      	mov	r0, r6
 80098e8:	e7ee      	b.n	80098c8 <__sccl+0x28>
 80098ea:	462b      	mov	r3, r5
 80098ec:	e7ef      	b.n	80098ce <__sccl+0x2e>
 80098ee:	7816      	ldrb	r6, [r2, #0]
 80098f0:	2e5d      	cmp	r6, #93	; 0x5d
 80098f2:	d0fa      	beq.n	80098ea <__sccl+0x4a>
 80098f4:	42b3      	cmp	r3, r6
 80098f6:	dcf8      	bgt.n	80098ea <__sccl+0x4a>
 80098f8:	4618      	mov	r0, r3
 80098fa:	3001      	adds	r0, #1
 80098fc:	4286      	cmp	r6, r0
 80098fe:	5421      	strb	r1, [r4, r0]
 8009900:	dcfb      	bgt.n	80098fa <__sccl+0x5a>
 8009902:	43d8      	mvns	r0, r3
 8009904:	4430      	add	r0, r6
 8009906:	1c5d      	adds	r5, r3, #1
 8009908:	42b3      	cmp	r3, r6
 800990a:	bfa8      	it	ge
 800990c:	2000      	movge	r0, #0
 800990e:	182b      	adds	r3, r5, r0
 8009910:	3202      	adds	r2, #2
 8009912:	e7de      	b.n	80098d2 <__sccl+0x32>

08009914 <_strtoul_l.isra.0>:
 8009914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009918:	4e3b      	ldr	r6, [pc, #236]	; (8009a08 <_strtoul_l.isra.0+0xf4>)
 800991a:	4686      	mov	lr, r0
 800991c:	468c      	mov	ip, r1
 800991e:	4660      	mov	r0, ip
 8009920:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009924:	5da5      	ldrb	r5, [r4, r6]
 8009926:	f015 0508 	ands.w	r5, r5, #8
 800992a:	d1f8      	bne.n	800991e <_strtoul_l.isra.0+0xa>
 800992c:	2c2d      	cmp	r4, #45	; 0x2d
 800992e:	d134      	bne.n	800999a <_strtoul_l.isra.0+0x86>
 8009930:	f89c 4000 	ldrb.w	r4, [ip]
 8009934:	f04f 0801 	mov.w	r8, #1
 8009938:	f100 0c02 	add.w	ip, r0, #2
 800993c:	2b00      	cmp	r3, #0
 800993e:	d05e      	beq.n	80099fe <_strtoul_l.isra.0+0xea>
 8009940:	2b10      	cmp	r3, #16
 8009942:	d10c      	bne.n	800995e <_strtoul_l.isra.0+0x4a>
 8009944:	2c30      	cmp	r4, #48	; 0x30
 8009946:	d10a      	bne.n	800995e <_strtoul_l.isra.0+0x4a>
 8009948:	f89c 0000 	ldrb.w	r0, [ip]
 800994c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009950:	2858      	cmp	r0, #88	; 0x58
 8009952:	d14f      	bne.n	80099f4 <_strtoul_l.isra.0+0xe0>
 8009954:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009958:	2310      	movs	r3, #16
 800995a:	f10c 0c02 	add.w	ip, ip, #2
 800995e:	f04f 37ff 	mov.w	r7, #4294967295
 8009962:	2500      	movs	r5, #0
 8009964:	fbb7 f7f3 	udiv	r7, r7, r3
 8009968:	fb03 f907 	mul.w	r9, r3, r7
 800996c:	ea6f 0909 	mvn.w	r9, r9
 8009970:	4628      	mov	r0, r5
 8009972:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009976:	2e09      	cmp	r6, #9
 8009978:	d818      	bhi.n	80099ac <_strtoul_l.isra.0+0x98>
 800997a:	4634      	mov	r4, r6
 800997c:	42a3      	cmp	r3, r4
 800997e:	dd24      	ble.n	80099ca <_strtoul_l.isra.0+0xb6>
 8009980:	2d00      	cmp	r5, #0
 8009982:	db1f      	blt.n	80099c4 <_strtoul_l.isra.0+0xb0>
 8009984:	4287      	cmp	r7, r0
 8009986:	d31d      	bcc.n	80099c4 <_strtoul_l.isra.0+0xb0>
 8009988:	d101      	bne.n	800998e <_strtoul_l.isra.0+0x7a>
 800998a:	45a1      	cmp	r9, r4
 800998c:	db1a      	blt.n	80099c4 <_strtoul_l.isra.0+0xb0>
 800998e:	fb00 4003 	mla	r0, r0, r3, r4
 8009992:	2501      	movs	r5, #1
 8009994:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009998:	e7eb      	b.n	8009972 <_strtoul_l.isra.0+0x5e>
 800999a:	2c2b      	cmp	r4, #43	; 0x2b
 800999c:	bf08      	it	eq
 800999e:	f89c 4000 	ldrbeq.w	r4, [ip]
 80099a2:	46a8      	mov	r8, r5
 80099a4:	bf08      	it	eq
 80099a6:	f100 0c02 	addeq.w	ip, r0, #2
 80099aa:	e7c7      	b.n	800993c <_strtoul_l.isra.0+0x28>
 80099ac:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80099b0:	2e19      	cmp	r6, #25
 80099b2:	d801      	bhi.n	80099b8 <_strtoul_l.isra.0+0xa4>
 80099b4:	3c37      	subs	r4, #55	; 0x37
 80099b6:	e7e1      	b.n	800997c <_strtoul_l.isra.0+0x68>
 80099b8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80099bc:	2e19      	cmp	r6, #25
 80099be:	d804      	bhi.n	80099ca <_strtoul_l.isra.0+0xb6>
 80099c0:	3c57      	subs	r4, #87	; 0x57
 80099c2:	e7db      	b.n	800997c <_strtoul_l.isra.0+0x68>
 80099c4:	f04f 35ff 	mov.w	r5, #4294967295
 80099c8:	e7e4      	b.n	8009994 <_strtoul_l.isra.0+0x80>
 80099ca:	2d00      	cmp	r5, #0
 80099cc:	da07      	bge.n	80099de <_strtoul_l.isra.0+0xca>
 80099ce:	2322      	movs	r3, #34	; 0x22
 80099d0:	f8ce 3000 	str.w	r3, [lr]
 80099d4:	f04f 30ff 	mov.w	r0, #4294967295
 80099d8:	b942      	cbnz	r2, 80099ec <_strtoul_l.isra.0+0xd8>
 80099da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099de:	f1b8 0f00 	cmp.w	r8, #0
 80099e2:	d000      	beq.n	80099e6 <_strtoul_l.isra.0+0xd2>
 80099e4:	4240      	negs	r0, r0
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	d0f7      	beq.n	80099da <_strtoul_l.isra.0+0xc6>
 80099ea:	b10d      	cbz	r5, 80099f0 <_strtoul_l.isra.0+0xdc>
 80099ec:	f10c 31ff 	add.w	r1, ip, #4294967295
 80099f0:	6011      	str	r1, [r2, #0]
 80099f2:	e7f2      	b.n	80099da <_strtoul_l.isra.0+0xc6>
 80099f4:	2430      	movs	r4, #48	; 0x30
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1b1      	bne.n	800995e <_strtoul_l.isra.0+0x4a>
 80099fa:	2308      	movs	r3, #8
 80099fc:	e7af      	b.n	800995e <_strtoul_l.isra.0+0x4a>
 80099fe:	2c30      	cmp	r4, #48	; 0x30
 8009a00:	d0a2      	beq.n	8009948 <_strtoul_l.isra.0+0x34>
 8009a02:	230a      	movs	r3, #10
 8009a04:	e7ab      	b.n	800995e <_strtoul_l.isra.0+0x4a>
 8009a06:	bf00      	nop
 8009a08:	0800a493 	.word	0x0800a493

08009a0c <_strtoul_r>:
 8009a0c:	f7ff bf82 	b.w	8009914 <_strtoul_l.isra.0>

08009a10 <__submore>:
 8009a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a14:	460c      	mov	r4, r1
 8009a16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a1c:	4299      	cmp	r1, r3
 8009a1e:	d11d      	bne.n	8009a5c <__submore+0x4c>
 8009a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009a24:	f7fe fb68 	bl	80080f8 <_malloc_r>
 8009a28:	b918      	cbnz	r0, 8009a32 <__submore+0x22>
 8009a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a36:	63a3      	str	r3, [r4, #56]	; 0x38
 8009a38:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009a3c:	6360      	str	r0, [r4, #52]	; 0x34
 8009a3e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009a42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009a46:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009a4a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009a4e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009a52:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009a56:	6020      	str	r0, [r4, #0]
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e7e8      	b.n	8009a2e <__submore+0x1e>
 8009a5c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009a5e:	0077      	lsls	r7, r6, #1
 8009a60:	463a      	mov	r2, r7
 8009a62:	f7fe ff35 	bl	80088d0 <_realloc_r>
 8009a66:	4605      	mov	r5, r0
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d0de      	beq.n	8009a2a <__submore+0x1a>
 8009a6c:	eb00 0806 	add.w	r8, r0, r6
 8009a70:	4601      	mov	r1, r0
 8009a72:	4632      	mov	r2, r6
 8009a74:	4640      	mov	r0, r8
 8009a76:	f7fe fabf 	bl	8007ff8 <memcpy>
 8009a7a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009a7e:	f8c4 8000 	str.w	r8, [r4]
 8009a82:	e7e9      	b.n	8009a58 <__submore+0x48>

08009a84 <_fstat_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d07      	ldr	r5, [pc, #28]	; (8009aa4 <_fstat_r+0x20>)
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4608      	mov	r0, r1
 8009a8e:	4611      	mov	r1, r2
 8009a90:	602b      	str	r3, [r5, #0]
 8009a92:	f7f9 ff04 	bl	800389e <_fstat>
 8009a96:	1c43      	adds	r3, r0, #1
 8009a98:	d102      	bne.n	8009aa0 <_fstat_r+0x1c>
 8009a9a:	682b      	ldr	r3, [r5, #0]
 8009a9c:	b103      	cbz	r3, 8009aa0 <_fstat_r+0x1c>
 8009a9e:	6023      	str	r3, [r4, #0]
 8009aa0:	bd38      	pop	{r3, r4, r5, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20003e34 	.word	0x20003e34

08009aa8 <_isatty_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d06      	ldr	r5, [pc, #24]	; (8009ac4 <_isatty_r+0x1c>)
 8009aac:	2300      	movs	r3, #0
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	602b      	str	r3, [r5, #0]
 8009ab4:	f7f9 fef8 	bl	80038a8 <_isatty>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d102      	bne.n	8009ac2 <_isatty_r+0x1a>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	b103      	cbz	r3, 8009ac2 <_isatty_r+0x1a>
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	20003e34 	.word	0x20003e34

08009ac8 <_malloc_usable_size_r>:
 8009ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009acc:	1f18      	subs	r0, r3, #4
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	bfbc      	itt	lt
 8009ad2:	580b      	ldrlt	r3, [r1, r0]
 8009ad4:	18c0      	addlt	r0, r0, r3
 8009ad6:	4770      	bx	lr

08009ad8 <_init>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	bf00      	nop
 8009adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ade:	bc08      	pop	{r3}
 8009ae0:	469e      	mov	lr, r3
 8009ae2:	4770      	bx	lr

08009ae4 <_fini>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	bf00      	nop
 8009ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aea:	bc08      	pop	{r3}
 8009aec:	469e      	mov	lr, r3
 8009aee:	4770      	bx	lr
